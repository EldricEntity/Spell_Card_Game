{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aaron\\\\DND_Spell_Cards\\\\Spell_Card_Game\\\\DND_Spell_Cards_online\\\\frontend - Copy\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// dnd-spell-cards-app/frontend/src/App.js\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique keys for deck card instances\n\n// IMPORTANT: Update this to your VM's Public IP address (or domain name if configured)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://193.122.147.91:5000/api';\n\n// Inline CSS for self-contained component\nconst AppStyles = `\n    body {\n        background-color: #f0e6d2;\n        font-family: 'Inter', sans-serif;\n        color: #333;\n        margin: 0;\n        padding: 0;\n        line-height: 1.6;\n    }\n\n    .App {\n        display: flex;\n        flex-direction: column;\n        min-height: 100vh;\n        align-items: center;\n        padding: 1rem;\n        box-sizing: border-box;\n    }\n\n    .app-title {\n        color: #2d3748;\n        text-align: center;\n        margin-bottom: 1.5rem;\n        font-size: 2.5rem;\n        font-weight: 700;\n    }\n\n    .login-container, .stats-container, .booster-controls {\n        background: #4a5568; /* Dark gray for a solid background */\n        color: #e2e8f0; /* Light gray text */\n        padding: 1.5rem;\n        margin-bottom: 1.5rem;\n        border-radius: 0.75rem;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n        display: flex;\n        gap: 1rem;\n        align-items: center;\n        justify-content: center;\n        flex-wrap: wrap;\n        width: 100%;\n        max-width: 1200px;\n    }\n\n    .login-container input {\n        padding: 0.6rem 0.8rem;\n        border-radius: 0.5rem;\n        border: 1px solid #a0aec0;\n        background: #e2e8f0;\n        color: #2d3748;\n        font-size: 1rem;\n        flex-grow: 1;\n        max-width: 180px;\n    }\n\n    .login-container button, .use-button, .reset-button, .remove-button, .select-button, .booster-button {\n        background-color: #63b3ed; /* Blue button */\n        color: white;\n        padding: 0.75rem 1.25rem;\n        border: none;\n        border-radius: 0.5rem;\n        cursor: pointer;\n        font-weight: bold;\n        transition: background-color 0.3s ease, transform 0.2s ease;\n        white-space: nowrap;\n    }\n\n    .login-container button:hover, .select-button:hover:not(:disabled), .booster-button:hover:not(:disabled) {\n        background-color: #4299e1; /* Darker blue on hover */\n        transform: translateY(-2px);\n    }\n\n    .select-button:disabled, .use-button:disabled, .booster-button:disabled {\n        background-color: #cbd5e0;\n        cursor: not-allowed;\n        transform: none;\n    }\n\n    .stats-container {\n        background: #2d3748;\n        color: #e2e8f0;\n    }\n\n    .stats-container label {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n        font-weight: 500;\n    }\n\n    .stats-container input {\n        width: 4rem;\n        padding: 0.25rem;\n        border-radius: 0.5rem;\n        border: none;\n        background: #e2e8f0;\n        color: #2d3748;\n        text-align: center;\n    }\n\n    .stats-container p {\n        margin: 0;\n        padding: 0;\n        font-size: 1rem;\n    }\n\n    .message-box {\n        position: fixed;\n        top: 1rem;\n        left: 50%;\n        transform: translateX(-50%);\n        padding: 0.75rem 1.5rem;\n        border-radius: 0.5rem;\n        font-weight: bold;\n        z-index: 1000; /* High z-index to appear above everything */\n        animation: fadein 0.5s, fadeout 0.5s 2.5s;\n        text-align: center;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n    }\n\n    .message-box.success {\n        background-color: #48bb78; /* Green success color */\n        color: white;\n    }\n\n    .message-box.error {\n        background-color: #f56565; /* Red error color */\n        color: white;\n    }\n\n    .message-box.info {\n        background-color: #63b3ed;\n        color: white;\n    }\n\n    @keyframes fadein {\n        from { opacity: 0; }\n        to   { opacity: 1; }\n    }\n\n    @keyframes fadeout {\n        from { opacity: 1; }\n        to   { opacity: 0; }\n    }\n\n    .tab-navigation {\n        display: flex;\n        justify-content: center;\n        width: 100%;\n        max-width: 1200px;\n        margin-bottom: 1.5rem;\n        background-color: #e2e8f0;\n        border-radius: 0.75rem;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n        overflow: hidden; /* Ensures rounded corners */\n    }\n\n    .tab-item {\n        flex: 1;\n        text-align: center;\n        padding: 1rem 1.5rem;\n        cursor: pointer;\n        font-weight: bold;\n        color: #4a5568;\n        background-color: #e2e8f0;\n        transition: background-color 0.3s ease, color 0.3s ease;\n        border-bottom: 3px solid transparent; /* For active indicator */\n    }\n\n    .tab-item:hover:not(.active) {\n        background-color: #cbd5e0;\n    }\n\n    .tab-item.active {\n        background-color: #63b3ed;\n        color: white;\n        border-bottom-color: #2b6cb0;\n    }\n\n    .main-content {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 1.5rem;\n        width: 100%;\n        max-width: 1200px;\n        flex: 1; /* Allows content to take up remaining space */\n    }\n\n    .card-collection-panel, .built-deck-panel {\n        background: #fdfaf5;\n        border-radius: 0.75rem;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n        padding: 1.5rem;\n        flex: 1;\n        min-width: 300px;\n        display: flex;\n        flex-direction: column;\n    }\n\n    .panel-title {\n        text-align: center;\n        color: #2c5282;\n        margin-top: 0;\n        margin-bottom: 1.5rem;\n        font-size: 1.8rem;\n    }\n\n    .card-list, .deck-list {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n        gap: 1rem;\n        flex-grow: 1;\n    }\n\n    .card-item {\n        background: #fff;\n        border: 1px solid #e2e8f0;\n        border-radius: 0.75rem;\n        padding: 1rem;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);\n        transition: transform 0.2s ease, box-shadow 0.2s ease;\n        display: flex;\n        flex-direction: column;\n        text-align: center;\n    }\n\n    .card-item:hover.available-card {\n        transform: translateY(-5px);\n        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);\n        cursor: pointer;\n    }\n\n    .card-item.deck-card {\n        background: #edf2f7; /* Lighter background for deck cards */\n    }\n\n    .card-image {\n        max-width: 100%;\n        height: auto;\n        border-radius: 0.5rem;\n        margin-bottom: 0.75rem;\n    }\n\n    .card-name {\n        font-weight: bold;\n        font-size: 1.1rem;\n        color: #2c5282;\n        margin-bottom: 0.4rem;\n    }\n\n    .card-type {\n        font-style: italic;\n        color: #718096;\n        margin-bottom: 0.5rem;\n    }\n\n    .card-description {\n        font-size: 0.85rem;\n        color: #4a5568;\n        flex-grow: 1; /* Allows description to take up available space */\n        margin-bottom: 0.75rem;\n    }\n\n    .card-meta, .card-uses {\n        font-size: 0.8rem;\n        color: #666;\n        margin-bottom: 0.5rem;\n    }\n    \n    .card-meta span {\n        font-weight: bold;\n        color: #2c5282;\n    }\n\n    .card-actions {\n        margin-top: 0.75rem;\n        display: flex;\n        flex-wrap: wrap;\n        gap: 0.5rem;\n        justify-content: center;\n    }\n\n    .use-button {\n        background-color: #3182ce; /* Blue use button */\n        color: white;\n    }\n    .use-button:hover:not(:disabled) {\n        background-color: #2b6cb0;\n        transform: translateY(-1px);\n    }\n\n    .reset-button {\n        background-color: #68d391; /* Green reset button */\n        color: white;\n    }\n    .reset-button:hover {\n        background-color: #48bb78;\n        transform: translateY(-1px);\n    }\n\n    .remove-button {\n        background-color: #fc8181; /* Red remove button */\n        color: white;\n    }\n    .remove-button:hover {\n        background-color: #e53e3e;\n        transform: translateY(-1px);\n    }\n\n    .empty-message, .pre-login-message {\n        text-align: center;\n        padding: 2rem;\n        background: #e9e9e9;\n        border-radius: 0.75rem;\n        color: #555;\n        font-style: italic;\n        margin: 1rem;\n    }\n\n    .error-message {\n        color: #e53e3e;\n        background-color: #fed7d7;\n        border: 1px solid #fc8181;\n        padding: 0.75rem;\n        border-radius: 0.5rem;\n        text-align: center;\n        margin-top: 1rem;\n        font-weight: bold;\n    }\n\n    .highlight {\n        color: #3182ce;\n        font-weight: bold;\n    }\n\n    .booster-pack-section {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        margin-top: 1.5rem;\n        padding-top: 1.5rem;\n        border-top: 1px solid #e2e8f0;\n        width: 100%;\n    }\n\n    .booster-pack-section button {\n        margin-top: 1rem;\n    }\n\n    .new-cards-display {\n        margin-top: 1rem;\n        padding: 1rem;\n        background: #e2e8f0;\n        border-radius: 0.5rem;\n        text-align: center;\n        width: 100%;\n        max-width: 400px;\n    }\n    .new-cards-display h4 {\n        color: #2c5282;\n        margin-bottom: 0.5rem;\n    }\n    .new-cards-display ul {\n        list-style-type: none;\n        padding: 0;\n        margin: 0;\n    }\n    .new-cards-display li {\n        margin-bottom: 0.2rem;\n        color: #4a5568;\n    }\n\n    /* Responsive Adjustments */\n    @media (max-width: 768px) {\n        .main-content {\n            flex-direction: column;\n        }\n        .login-container, .stats-container, .tab-navigation, .booster-controls {\n            flex-direction: column;\n            align-items: stretch;\n        }\n        .login-container input {\n            max-width: 100%;\n        }\n        .tab-item {\n            border-bottom: none; /* No bottom border on stacked tabs */\n            border-right: 3px solid transparent; /* Use right border for active indicator */\n        }\n        .tab-item.active {\n            border-bottom-color: transparent;\n            border-right-color: #2b6cb0;\n        }\n    }\n\n    @media (max-width: 480px) {\n        .app-title {\n            font-size: 2rem;\n        }\n        .panel-title {\n            font-size: 1.5rem;\n        }\n        .login-container button, .use-button, .reset-button, .remove-button, .select-button, .booster-button {\n            width: 100%; /* Full width buttons on very small screens */\n            padding: 0.6rem 1rem;\n        }\n        .card-list, .deck-list {\n            grid-template-columns: 1fr; /* Single column layout for cards */\n        }\n    }\n`;\nfunction App() {\n  _s();\n  // --- State Variables ---\n  const [allCards, setAllCards] = useState([]); // All cards fetched from the backend (master list)\n  const [characterLevel, setCharacterLevel] = useState(1);\n  const [wisMod, setWisMod] = useState(0);\n  const [intMod, setIntMod] = useState(0);\n  const [chaMod, setChaMod] = useState(0);\n  const [maxDeckSize, setMaxDeckSize] = useState(0);\n  const [activeDeckInstances, setActiveDeckInstances] = useState([]); // Cards currently in the player's ACTIVE deck (persistent instances)\n  const [unlockedCollectionIds, setUnlockedCollectionIds] = useState([]); // IDs of all UNIQUE card types the player HAS UNLOCKED (owned pool)\n  const [error, setError] = useState(''); // General error messages for UI\n\n  // New states for login/auth\n  const [playerId, setPlayerId] = useState('');\n  const [password, setPassword] = useState('');\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [message, setMessage] = useState({\n    text: '',\n    type: ''\n  });\n  const [loading, setLoading] = useState(true); // Loading state for initial data fetch of allCards\n\n  // New state for tab management\n  const [activeTab, setActiveTab] = useState('available'); // 'available' or 'deck'\n\n  // State for newly acquired cards from booster packs\n  const [newlyAcquiredCards, setNewlyAcquiredCards] = useState([]);\n  const [lastOpenedPackType, setLastOpenedPackType] = useState('');\n\n  // --- Helper function to display messages ---\n  const showMessage = useCallback((text, type) => {\n    setMessage({\n      text,\n      type\n    });\n    // Clear message after 5 seconds for info, 3 seconds for others\n    const duration = type === 'info' ? 5000 : 3000;\n    setTimeout(() => setMessage({\n      text: '',\n      type: ''\n    }), duration);\n  }, []);\n\n  // --- API Call: Create Account ---\n  const handleCreateAccount = async () => {\n    if (!playerId || !password) {\n      showMessage('Player ID and password are required to create an account.', 'error');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/deck/create`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          player_id: playerId,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to create account.');\n      }\n      showMessage('Account created successfully! You can now log in.', 'success');\n    } catch (err) {\n      console.error('Error creating account:', err);\n      showMessage(`Failed to create account: ${err.message}`, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // --- API Call: Login and Load Deck ---\n  const handleLoginAndLoadDeck = async () => {\n    if (!playerId || !password) {\n      showMessage('Player ID and password are required to log in.', 'error');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/deck/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          player_id: playerId,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Authentication failed.');\n      }\n\n      // Load data from backend upon successful login\n      setActiveDeckInstances(data.active_deck_instances || []); // Load active deck instances\n      setUnlockedCollectionIds(data.unlocked_collection_ids || []); // Load unlocked card IDs\n      setCharacterLevel(data.character_level !== undefined ? data.character_level : 1);\n      setWisMod(data.wis_mod !== undefined ? data.wis_mod : 0);\n      setIntMod(data.int_mod !== undefined ? data.int_mod : 0);\n      setChaMod(data.cha_mod !== undefined ? data.cha_mod : 0);\n      setIsAuthenticated(true);\n      setActiveTab('deck'); // Automatically switch to the deck tab after login\n\n      showMessage('Login successful! Deck and unlocked cards loaded.', 'success');\n    } catch (err) {\n      setIsAuthenticated(false);\n      console.error('Error logging in:', err);\n      showMessage(`Failed to load deck: ${err.message}`, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // --- API Call: Save Deck ---\n  const handleSaveDeck = async () => {\n    if (!isAuthenticated) {\n      showMessage('You must be logged in to save your deck.', 'error');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/deck/save`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          player_id: playerId,\n          password: password,\n          // Send password for re-validation on backend\n          active_deck_instances: activeDeckInstances,\n          // Save active deck instances\n          unlocked_collection_ids: unlockedCollectionIds,\n          // Save unlocked card IDs\n          character_level: characterLevel,\n          wis_mod: wisMod,\n          int_mod: intMod,\n          cha_mod: chaMod\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to save deck.');\n      }\n      showMessage('Deck and unlocked cards saved successfully!', 'success');\n    } catch (err) {\n      console.error('Error saving deck:', err);\n      showMessage(`Failed to save deck: ${err.message}`, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // --- Effect to Fetch All Cards on Component Mount ---\n  useEffect(() => {\n    const fetchAllCards = async () => {\n      setLoading(true);\n      try {\n        const cardsResponse = await fetch(`${API_BASE_URL}/cards`);\n        if (!cardsResponse.ok) {\n          throw new Error(`HTTP error fetching cards! status: ${cardsResponse.status}`);\n        }\n        const cardsData = await cardsResponse.json();\n        setAllCards(cardsData);\n      } catch (err) {\n        console.error('Error fetching initial data:', err);\n        showMessage('Failed to fetch initial data: ' + err.message, 'error');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAllCards();\n  }, [showMessage]); // Empty dependency array, this effect runs only once on mount\n\n  // --- Effect to Calculate Max Deck Size when Character Stats Change ---\n  useEffect(() => {\n    const calculateDeckSize = async () => {\n      setError(''); // Clear previous errors related to deck size\n      try {\n        const response = await fetch(`${API_BASE_URL}/calculate_deck_size`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            character_level: characterLevel,\n            wis_mod: wisMod,\n            int_mod: intMod,\n            cha_mod: chaMod\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setMaxDeckSize(data.max_deck_size);\n      } catch (err) {\n        setError('Failed to calculate deck size: ' + err.message);\n        console.error('Error calculating deck size:', err);\n      }\n    };\n    if (!isNaN(characterLevel) && !isNaN(wisMod) && !isNaN(intMod) && !isNaN(chaMod)) {\n      calculateDeckSize();\n    }\n  }, [characterLevel, wisMod, intMod, chaMod]);\n\n  // --- Booster Pack Logic: Open a new pack ---\n  const handleOpenBoosterPack = async () => {\n    if (!isAuthenticated) {\n      showMessage(\"You must be logged in to open booster packs.\", \"error\");\n      return;\n    }\n    setLoading(true); // Indicate loading while opening pack\n    setNewlyAcquiredCards([]); // Clear previous new cards display\n    setLastOpenedPackType('');\n    try {\n      const response = await fetch(`${API_BASE_URL}/deck/open_booster`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          player_id: playerId,\n          password: password\n        }) // Backend determines pack size\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to open booster pack.');\n      }\n      setLastOpenedPackType(data.pack_type);\n      if (data.new_cards && data.new_cards.length > 0) {\n        // Update the unlockedCollectionIds state with the new IDs\n        setUnlockedCollectionIds(prevIds => {\n          const newIds = data.new_cards.map(card => card.id);\n          return [...new Set([...prevIds, ...newIds])]; // Use Set to prevent duplicates\n        });\n        setNewlyAcquiredCards(data.new_cards); // Store new cards for display\n        showMessage(`You opened a ${data.pack_type} and acquired ${data.new_cards.length} cards!`, 'success');\n      } else {\n        showMessage(data.message || \"No new cards were found in the booster pack.\", 'info');\n      }\n    } catch (err) {\n      console.error('Error opening booster pack:', err);\n      showMessage(`Failed to open booster pack: ${err.message}`, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // --- Deck Building Logic: Add Card ---\n  const handleAddCardToDeck = useCallback(card => {\n    if (!isAuthenticated) {\n      showMessage(\"You must be logged in to build a deck.\", \"error\");\n      return;\n    }\n    if (activeDeckInstances.length >= maxDeckSize) {\n      showMessage('Deck is full! Remove cards to add new ones.', 'error');\n      return;\n    }\n    // Ensure the card being added is actually unlocked (player owns at least one copy of this type)\n    if (!unlockedCollectionIds.includes(card.id)) {\n      showMessage(\"You don't own this card yet! Open booster packs to unlock more spells.\", \"error\");\n      return;\n    }\n    const cantripCountInDeck = activeDeckInstances.filter(c => c.type === 'Cantrip').length;\n    if (card.type !== 'Cantrip' && cantripCountInDeck === 0 && activeDeckInstances.length === 0) {\n      showMessage('Your deck must contain at least one Cantrip! Add a Cantrip first.', 'error');\n      return;\n    }\n\n    // Add a new instance of the card to the active deck\n    setActiveDeckInstances(prev => [...prev, {\n      ...card,\n      instance_id: uuidv4(),\n      // Assign a unique ID for this specific copy in the active deck\n      current_uses: card.default_uses_per_rest\n    }]);\n    showMessage('Card added to your deck!', 'success');\n  }, [isAuthenticated, maxDeckSize, activeDeckInstances, unlockedCollectionIds, showMessage]);\n\n  // --- Deck Building Logic: Remove Card ---\n  const handleRemoveCardFromDeck = useCallback(instance_id => {\n    const updatedDeck = activeDeckInstances.filter(card => card.instance_id !== instance_id);\n    const cantripCount = updatedDeck.filter(c => c.type === 'Cantrip').length;\n    if (cantripCount === 0 && updatedDeck.length > 0) {\n      showMessage('Your deck must contain at least one Cantrip! You cannot remove the last one.', 'error');\n      return;\n    }\n    setActiveDeckInstances(updatedDeck);\n    showMessage('Card removed from deck.', 'success');\n  }, [activeDeckInstances, showMessage]);\n\n  // --- Card Usage Logic: Mark Card as Used ---\n  const handleMarkCardUsed = useCallback(async instance_id => {\n    const cardToUse = activeDeckInstances.find(card => card.instance_id === instance_id);\n    if (!cardToUse) return;\n    if (cardToUse.current_uses > 0) {\n      setActiveDeckInstances(prev => prev.map(card => card.instance_id === instance_id ? {\n        ...card,\n        current_uses: card.current_uses - 1\n      } : card));\n\n      // Notify backend about the card usage for logging purposes.\n      try {\n        const response = await fetch(`${API_BASE_URL}/card_used`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: cardToUse.name,\n            // Use 'name' to match backend's 'card_name' expectation\n            type: cardToUse.type,\n            // Use 'type' to match backend's 'card_type' expectation\n            deck_card_id: cardToUse.instance_id\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Backend notification:', data.message);\n        console.log('Simulated System Log Entry from Backend:', data.log_entry);\n      } catch (err) {\n        showMessage('Failed to notify backend of card usage for logging: ' + err.message, 'error');\n        console.error('Error sending card used notification:', err);\n      }\n    } else {\n      showMessage(`\"${cardToUse.name}\" has no uses left! It needs a long rest.`, 'error');\n    }\n  }, [activeDeckInstances, showMessage]);\n\n  // --- Card Usage Logic: Reset Card Uses (Long Rest) ---\n  const handleResetCardUses = useCallback(instance_id => {\n    setActiveDeckInstances(prev => prev.map(card => card.instance_id === instance_id ? {\n      ...card,\n      current_uses: card.default_uses_per_rest\n    } : card));\n    showMessage('Card uses reset!', 'success');\n  }, [showMessage]);\n\n  // Filter available cards based on what the player has unlocked\n  // And also count how many copies of each unique card ID the player owns\n  const filteredAvailableCardsWithCounts = allCards.filter(card => unlockedCollectionIds.includes(card.id)).map(card => {\n    const count = unlockedCollectionIds.filter(id => id === card.id).length;\n    return {\n      ...card,\n      owned_copies: count\n    };\n  });\n\n  // --- Main Component Render ---\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: AppStyles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"app-title\",\n        children: \"Spell Trading Cards Manager\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 765,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Player ID\",\n          value: playerId,\n          onChange: e => setPlayerId(e.target.value),\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 769,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 776,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLoginAndLoadDeck,\n          disabled: loading,\n          children: \"Log In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 783,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCreateAccount,\n          disabled: loading,\n          children: \"Create Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 784,\n          columnNumber: 21\n        }, this), isAuthenticated && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSaveDeck,\n          disabled: loading,\n          children: \"Save Deck\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 785,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 768,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stats-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Level: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: characterLevel,\n            onChange: e => setCharacterLevel(Math.max(1, parseInt(e.target.value) || 1)),\n            min: \"1\",\n            max: \"20\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 790,\n            columnNumber: 35\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 790,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"WIS Mod: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: wisMod,\n            onChange: e => setWisMod(parseInt(e.target.value) || 0)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 791,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"INT Mod: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: intMod,\n            onChange: e => setIntMod(parseInt(e.target.value) || 0)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 792,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"CHA Mod: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: chaMod,\n            onChange: e => setChaMod(parseInt(e.target.value) || 0)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 793,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 793,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Max Deck Size: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"highlight\",\n            children: maxDeckSize\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 794,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 794,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 789,\n        columnNumber: 17\n      }, this), message.text && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message-box ${message.type}`,\n        children: message.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 798,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tab-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `tab-item ${activeTab === 'available' ? 'active' : ''}`,\n          onClick: () => setActiveTab('available'),\n          children: [\"Available Spells (\", unlockedCollectionIds.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `tab-item ${activeTab === 'deck' ? 'active' : ''}`,\n          onClick: () => setActiveTab('deck'),\n          children: [\"Your Deck (\", activeDeckInstances.length, \"/\", maxDeckSize, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 808,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 801,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [activeTab === 'available' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-collection-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"panel-title\",\n            children: \"Available Spells\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 821,\n            columnNumber: 29\n          }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"empty-message\",\n            children: \"Loading cards...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 822,\n            columnNumber: 41\n          }, this), !isAuthenticated && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pre-login-message\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Log in to see your available spells.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 825,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 824,\n            columnNumber: 33\n          }, this), isAuthenticated && !loading && filteredAvailableCardsWithCounts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-list\",\n            children: filteredAvailableCardsWithCounts.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-item available-card\",\n              onClick: () => handleAddCardToDeck(card),\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: `https://placehold.co/100x150/a8dadc/ffffff?text=${card.name.split('.')[0].replace('_', '%20')}`,\n                alt: card.name,\n                className: \"card-image\",\n                onError: e => {\n                  e.target.onerror = null;\n                  e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\";\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 832,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"card-name\",\n                children: [card.name, \" (\", card.type, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 838,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-description\",\n                children: card.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 839,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-meta\",\n                children: [\"Rarity: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: card.rarity\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 840,\n                  columnNumber: 78\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 840,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-meta\",\n                children: [\"Owned Copies: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: card.owned_copies\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 841,\n                  columnNumber: 84\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 841,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: e => {\n                  e.stopPropagation();\n                  handleAddCardToDeck(card);\n                } // Stop propagation to prevent parent onClick\n                ,\n                disabled: activeDeckInstances.length >= maxDeckSize,\n                className: \"select-button\",\n                children: \"Add to Deck\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 842,\n                columnNumber: 45\n              }, this)]\n            }, card.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 831,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 829,\n            columnNumber: 33\n          }, this), isAuthenticated && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"booster-pack-section\",\n            children: [filteredAvailableCardsWithCounts.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"empty-message\",\n              children: \"You haven't unlocked any unique spells yet! Open a booster pack to get started.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 857,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleOpenBoosterPack,\n              disabled: loading,\n              className: \"booster-button\",\n              children: \"Open Booster Pack\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 859,\n              columnNumber: 37\n            }, this), newlyAcquiredCards.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"new-cards-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: [\"Newly Acquired Cards from \", lastOpenedPackType, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 868,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: newlyAcquiredCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [card.name, \" (\", card.type, \", \", card.rarity, \")\", unlockedCollectionIds.includes(card.id) && /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \" (Duplicate)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 873,\n                    columnNumber: 101\n                  }, this)]\n                }, card.id + \"-\" + index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 871,\n                  columnNumber: 53\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 869,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 867,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 855,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 820,\n          columnNumber: 25\n        }, this), activeTab === 'deck' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"built-deck-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"panel-title\",\n            children: [\"Your Deck (\", activeDeckInstances.length, \"/\", maxDeckSize, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 887,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"deck-list\",\n            children: isAuthenticated ? activeDeckInstances.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"empty-message\",\n              children: \"Select cards from the \\\"Available Spells\\\" tab to build your deck!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 891,\n              columnNumber: 41\n            }, this) : activeDeckInstances.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-item deck-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: `https://placehold.co/100x150/a8dadc/ffffff?text=${card.name.split('.')[0].replace('_', '%20')}`,\n                alt: card.name,\n                className: \"card-image\",\n                onError: e => {\n                  e.target.onerror = null;\n                  e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\";\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 895,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"card-name\",\n                children: [card.name, \" (\", card.type, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 901,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-description\",\n                children: card.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 902,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-meta\",\n                children: [\"Rarity: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: card.rarity\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 903,\n                  columnNumber: 82\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 903,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-uses\",\n                children: [\"Uses Left: \", card.current_uses, \"/\", card.default_uses_per_rest]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 904,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-actions\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleMarkCardUsed(card.instance_id),\n                  disabled: card.current_uses <= 0,\n                  className: \"use-button\",\n                  children: \"Use\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 906,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleResetCardUses(card.instance_id),\n                  className: \"reset-button\",\n                  children: \"Reset Uses\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 913,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleRemoveCardFromDeck(card.instance_id),\n                  className: \"remove-button\",\n                  children: \"Remove\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 919,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 905,\n                columnNumber: 49\n              }, this)]\n            }, card.instance_id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 894,\n              columnNumber: 45\n            }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pre-login-message\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Please log in to load your character and spell deck.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 931,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Once logged in, your deck and stats will appear here.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 932,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 930,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 888,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 886,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 817,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 764,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"UgiZ76n/S6obr/BZixE0q+ca7mE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","v4","uuidv4","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","AppStyles","App","_s","allCards","setAllCards","characterLevel","setCharacterLevel","wisMod","setWisMod","intMod","setIntMod","chaMod","setChaMod","maxDeckSize","setMaxDeckSize","activeDeckInstances","setActiveDeckInstances","unlockedCollectionIds","setUnlockedCollectionIds","error","setError","playerId","setPlayerId","password","setPassword","isAuthenticated","setIsAuthenticated","message","setMessage","text","type","loading","setLoading","activeTab","setActiveTab","newlyAcquiredCards","setNewlyAcquiredCards","lastOpenedPackType","setLastOpenedPackType","showMessage","duration","setTimeout","handleCreateAccount","response","fetch","method","headers","body","JSON","stringify","player_id","data","json","ok","Error","err","console","handleLoginAndLoadDeck","active_deck_instances","unlocked_collection_ids","character_level","undefined","wis_mod","int_mod","cha_mod","handleSaveDeck","fetchAllCards","cardsResponse","status","cardsData","calculateDeckSize","max_deck_size","isNaN","handleOpenBoosterPack","pack_type","new_cards","length","prevIds","newIds","map","card","id","Set","handleAddCardToDeck","includes","cantripCountInDeck","filter","c","prev","instance_id","current_uses","default_uses_per_rest","handleRemoveCardFromDeck","updatedDeck","cantripCount","handleMarkCardUsed","cardToUse","find","name","deck_card_id","log","log_entry","handleResetCardUses","filteredAvailableCardsWithCounts","count","owned_copies","children","fileName","_jsxFileName","lineNumber","columnNumber","className","placeholder","value","onChange","e","target","disabled","onClick","Math","max","parseInt","min","src","split","replace","alt","onError","onerror","description","rarity","stopPropagation","index","_c","$RefreshReg$"],"sources":["C:/Users/aaron/DND_Spell_Cards/Spell_Card_Game/DND_Spell_Cards_online/frontend - Copy/src/App.js"],"sourcesContent":["// dnd-spell-cards-app/frontend/src/App.js\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique keys for deck card instances\r\n\r\n// IMPORTANT: Update this to your VM's Public IP address (or domain name if configured)\r\nconst API_BASE_URL = 'http://193.122.147.91:5000/api';\r\n\r\n// Inline CSS for self-contained component\r\nconst AppStyles = `\r\n    body {\r\n        background-color: #f0e6d2;\r\n        font-family: 'Inter', sans-serif;\r\n        color: #333;\r\n        margin: 0;\r\n        padding: 0;\r\n        line-height: 1.6;\r\n    }\r\n\r\n    .App {\r\n        display: flex;\r\n        flex-direction: column;\r\n        min-height: 100vh;\r\n        align-items: center;\r\n        padding: 1rem;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    .app-title {\r\n        color: #2d3748;\r\n        text-align: center;\r\n        margin-bottom: 1.5rem;\r\n        font-size: 2.5rem;\r\n        font-weight: 700;\r\n    }\r\n\r\n    .login-container, .stats-container, .booster-controls {\r\n        background: #4a5568; /* Dark gray for a solid background */\r\n        color: #e2e8f0; /* Light gray text */\r\n        padding: 1.5rem;\r\n        margin-bottom: 1.5rem;\r\n        border-radius: 0.75rem;\r\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\r\n        display: flex;\r\n        gap: 1rem;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-wrap: wrap;\r\n        width: 100%;\r\n        max-width: 1200px;\r\n    }\r\n\r\n    .login-container input {\r\n        padding: 0.6rem 0.8rem;\r\n        border-radius: 0.5rem;\r\n        border: 1px solid #a0aec0;\r\n        background: #e2e8f0;\r\n        color: #2d3748;\r\n        font-size: 1rem;\r\n        flex-grow: 1;\r\n        max-width: 180px;\r\n    }\r\n\r\n    .login-container button, .use-button, .reset-button, .remove-button, .select-button, .booster-button {\r\n        background-color: #63b3ed; /* Blue button */\r\n        color: white;\r\n        padding: 0.75rem 1.25rem;\r\n        border: none;\r\n        border-radius: 0.5rem;\r\n        cursor: pointer;\r\n        font-weight: bold;\r\n        transition: background-color 0.3s ease, transform 0.2s ease;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    .login-container button:hover, .select-button:hover:not(:disabled), .booster-button:hover:not(:disabled) {\r\n        background-color: #4299e1; /* Darker blue on hover */\r\n        transform: translateY(-2px);\r\n    }\r\n\r\n    .select-button:disabled, .use-button:disabled, .booster-button:disabled {\r\n        background-color: #cbd5e0;\r\n        cursor: not-allowed;\r\n        transform: none;\r\n    }\r\n\r\n    .stats-container {\r\n        background: #2d3748;\r\n        color: #e2e8f0;\r\n    }\r\n\r\n    .stats-container label {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 0.5rem;\r\n        font-weight: 500;\r\n    }\r\n\r\n    .stats-container input {\r\n        width: 4rem;\r\n        padding: 0.25rem;\r\n        border-radius: 0.5rem;\r\n        border: none;\r\n        background: #e2e8f0;\r\n        color: #2d3748;\r\n        text-align: center;\r\n    }\r\n\r\n    .stats-container p {\r\n        margin: 0;\r\n        padding: 0;\r\n        font-size: 1rem;\r\n    }\r\n\r\n    .message-box {\r\n        position: fixed;\r\n        top: 1rem;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        padding: 0.75rem 1.5rem;\r\n        border-radius: 0.5rem;\r\n        font-weight: bold;\r\n        z-index: 1000; /* High z-index to appear above everything */\r\n        animation: fadein 0.5s, fadeout 0.5s 2.5s;\r\n        text-align: center;\r\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n    }\r\n\r\n    .message-box.success {\r\n        background-color: #48bb78; /* Green success color */\r\n        color: white;\r\n    }\r\n\r\n    .message-box.error {\r\n        background-color: #f56565; /* Red error color */\r\n        color: white;\r\n    }\r\n\r\n    .message-box.info {\r\n        background-color: #63b3ed;\r\n        color: white;\r\n    }\r\n\r\n    @keyframes fadein {\r\n        from { opacity: 0; }\r\n        to   { opacity: 1; }\r\n    }\r\n\r\n    @keyframes fadeout {\r\n        from { opacity: 1; }\r\n        to   { opacity: 0; }\r\n    }\r\n\r\n    .tab-navigation {\r\n        display: flex;\r\n        justify-content: center;\r\n        width: 100%;\r\n        max-width: 1200px;\r\n        margin-bottom: 1.5rem;\r\n        background-color: #e2e8f0;\r\n        border-radius: 0.75rem;\r\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n        overflow: hidden; /* Ensures rounded corners */\r\n    }\r\n\r\n    .tab-item {\r\n        flex: 1;\r\n        text-align: center;\r\n        padding: 1rem 1.5rem;\r\n        cursor: pointer;\r\n        font-weight: bold;\r\n        color: #4a5568;\r\n        background-color: #e2e8f0;\r\n        transition: background-color 0.3s ease, color 0.3s ease;\r\n        border-bottom: 3px solid transparent; /* For active indicator */\r\n    }\r\n\r\n    .tab-item:hover:not(.active) {\r\n        background-color: #cbd5e0;\r\n    }\r\n\r\n    .tab-item.active {\r\n        background-color: #63b3ed;\r\n        color: white;\r\n        border-bottom-color: #2b6cb0;\r\n    }\r\n\r\n    .main-content {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        gap: 1.5rem;\r\n        width: 100%;\r\n        max-width: 1200px;\r\n        flex: 1; /* Allows content to take up remaining space */\r\n    }\r\n\r\n    .card-collection-panel, .built-deck-panel {\r\n        background: #fdfaf5;\r\n        border-radius: 0.75rem;\r\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n        padding: 1.5rem;\r\n        flex: 1;\r\n        min-width: 300px;\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .panel-title {\r\n        text-align: center;\r\n        color: #2c5282;\r\n        margin-top: 0;\r\n        margin-bottom: 1.5rem;\r\n        font-size: 1.8rem;\r\n    }\r\n\r\n    .card-list, .deck-list {\r\n        display: grid;\r\n        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n        gap: 1rem;\r\n        flex-grow: 1;\r\n    }\r\n\r\n    .card-item {\r\n        background: #fff;\r\n        border: 1px solid #e2e8f0;\r\n        border-radius: 0.75rem;\r\n        padding: 1rem;\r\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);\r\n        transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n        display: flex;\r\n        flex-direction: column;\r\n        text-align: center;\r\n    }\r\n\r\n    .card-item:hover.available-card {\r\n        transform: translateY(-5px);\r\n        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);\r\n        cursor: pointer;\r\n    }\r\n\r\n    .card-item.deck-card {\r\n        background: #edf2f7; /* Lighter background for deck cards */\r\n    }\r\n\r\n    .card-image {\r\n        max-width: 100%;\r\n        height: auto;\r\n        border-radius: 0.5rem;\r\n        margin-bottom: 0.75rem;\r\n    }\r\n\r\n    .card-name {\r\n        font-weight: bold;\r\n        font-size: 1.1rem;\r\n        color: #2c5282;\r\n        margin-bottom: 0.4rem;\r\n    }\r\n\r\n    .card-type {\r\n        font-style: italic;\r\n        color: #718096;\r\n        margin-bottom: 0.5rem;\r\n    }\r\n\r\n    .card-description {\r\n        font-size: 0.85rem;\r\n        color: #4a5568;\r\n        flex-grow: 1; /* Allows description to take up available space */\r\n        margin-bottom: 0.75rem;\r\n    }\r\n\r\n    .card-meta, .card-uses {\r\n        font-size: 0.8rem;\r\n        color: #666;\r\n        margin-bottom: 0.5rem;\r\n    }\r\n    \r\n    .card-meta span {\r\n        font-weight: bold;\r\n        color: #2c5282;\r\n    }\r\n\r\n    .card-actions {\r\n        margin-top: 0.75rem;\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        gap: 0.5rem;\r\n        justify-content: center;\r\n    }\r\n\r\n    .use-button {\r\n        background-color: #3182ce; /* Blue use button */\r\n        color: white;\r\n    }\r\n    .use-button:hover:not(:disabled) {\r\n        background-color: #2b6cb0;\r\n        transform: translateY(-1px);\r\n    }\r\n\r\n    .reset-button {\r\n        background-color: #68d391; /* Green reset button */\r\n        color: white;\r\n    }\r\n    .reset-button:hover {\r\n        background-color: #48bb78;\r\n        transform: translateY(-1px);\r\n    }\r\n\r\n    .remove-button {\r\n        background-color: #fc8181; /* Red remove button */\r\n        color: white;\r\n    }\r\n    .remove-button:hover {\r\n        background-color: #e53e3e;\r\n        transform: translateY(-1px);\r\n    }\r\n\r\n    .empty-message, .pre-login-message {\r\n        text-align: center;\r\n        padding: 2rem;\r\n        background: #e9e9e9;\r\n        border-radius: 0.75rem;\r\n        color: #555;\r\n        font-style: italic;\r\n        margin: 1rem;\r\n    }\r\n\r\n    .error-message {\r\n        color: #e53e3e;\r\n        background-color: #fed7d7;\r\n        border: 1px solid #fc8181;\r\n        padding: 0.75rem;\r\n        border-radius: 0.5rem;\r\n        text-align: center;\r\n        margin-top: 1rem;\r\n        font-weight: bold;\r\n    }\r\n\r\n    .highlight {\r\n        color: #3182ce;\r\n        font-weight: bold;\r\n    }\r\n\r\n    .booster-pack-section {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        margin-top: 1.5rem;\r\n        padding-top: 1.5rem;\r\n        border-top: 1px solid #e2e8f0;\r\n        width: 100%;\r\n    }\r\n\r\n    .booster-pack-section button {\r\n        margin-top: 1rem;\r\n    }\r\n\r\n    .new-cards-display {\r\n        margin-top: 1rem;\r\n        padding: 1rem;\r\n        background: #e2e8f0;\r\n        border-radius: 0.5rem;\r\n        text-align: center;\r\n        width: 100%;\r\n        max-width: 400px;\r\n    }\r\n    .new-cards-display h4 {\r\n        color: #2c5282;\r\n        margin-bottom: 0.5rem;\r\n    }\r\n    .new-cards-display ul {\r\n        list-style-type: none;\r\n        padding: 0;\r\n        margin: 0;\r\n    }\r\n    .new-cards-display li {\r\n        margin-bottom: 0.2rem;\r\n        color: #4a5568;\r\n    }\r\n\r\n    /* Responsive Adjustments */\r\n    @media (max-width: 768px) {\r\n        .main-content {\r\n            flex-direction: column;\r\n        }\r\n        .login-container, .stats-container, .tab-navigation, .booster-controls {\r\n            flex-direction: column;\r\n            align-items: stretch;\r\n        }\r\n        .login-container input {\r\n            max-width: 100%;\r\n        }\r\n        .tab-item {\r\n            border-bottom: none; /* No bottom border on stacked tabs */\r\n            border-right: 3px solid transparent; /* Use right border for active indicator */\r\n        }\r\n        .tab-item.active {\r\n            border-bottom-color: transparent;\r\n            border-right-color: #2b6cb0;\r\n        }\r\n    }\r\n\r\n    @media (max-width: 480px) {\r\n        .app-title {\r\n            font-size: 2rem;\r\n        }\r\n        .panel-title {\r\n            font-size: 1.5rem;\r\n        }\r\n        .login-container button, .use-button, .reset-button, .remove-button, .select-button, .booster-button {\r\n            width: 100%; /* Full width buttons on very small screens */\r\n            padding: 0.6rem 1rem;\r\n        }\r\n        .card-list, .deck-list {\r\n            grid-template-columns: 1fr; /* Single column layout for cards */\r\n        }\r\n    }\r\n`;\r\n\r\nfunction App() {\r\n    // --- State Variables ---\r\n    const [allCards, setAllCards] = useState([]); // All cards fetched from the backend (master list)\r\n    const [characterLevel, setCharacterLevel] = useState(1);\r\n    const [wisMod, setWisMod] = useState(0);\r\n    const [intMod, setIntMod] = useState(0);\r\n    const [chaMod, setChaMod] = useState(0);\r\n    const [maxDeckSize, setMaxDeckSize] = useState(0);\r\n    const [activeDeckInstances, setActiveDeckInstances] = useState([]); // Cards currently in the player's ACTIVE deck (persistent instances)\r\n    const [unlockedCollectionIds, setUnlockedCollectionIds] = useState([]); // IDs of all UNIQUE card types the player HAS UNLOCKED (owned pool)\r\n    const [error, setError] = useState(''); // General error messages for UI\r\n\r\n    // New states for login/auth\r\n    const [playerId, setPlayerId] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [message, setMessage] = useState({ text: '', type: '' });\r\n    const [loading, setLoading] = useState(true); // Loading state for initial data fetch of allCards\r\n\r\n    // New state for tab management\r\n    const [activeTab, setActiveTab] = useState('available'); // 'available' or 'deck'\r\n\r\n    // State for newly acquired cards from booster packs\r\n    const [newlyAcquiredCards, setNewlyAcquiredCards] = useState([]);\r\n    const [lastOpenedPackType, setLastOpenedPackType] = useState('');\r\n\r\n    // --- Helper function to display messages ---\r\n    const showMessage = useCallback((text, type) => {\r\n        setMessage({ text, type });\r\n        // Clear message after 5 seconds for info, 3 seconds for others\r\n        const duration = type === 'info' ? 5000 : 3000;\r\n        setTimeout(() => setMessage({ text: '', type: '' }), duration);\r\n    }, []);\r\n\r\n    // --- API Call: Create Account ---\r\n    const handleCreateAccount = async () => {\r\n        if (!playerId || !password) {\r\n            showMessage('Player ID and password are required to create an account.', 'error');\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/deck/create`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ player_id: playerId, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Failed to create account.');\r\n            }\r\n            \r\n            showMessage('Account created successfully! You can now log in.', 'success');\r\n        } catch (err) {\r\n            console.error('Error creating account:', err);\r\n            showMessage(`Failed to create account: ${err.message}`, 'error');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // --- API Call: Login and Load Deck ---\r\n    const handleLoginAndLoadDeck = async () => {\r\n        if (!playerId || !password) {\r\n            showMessage('Player ID and password are required to log in.', 'error');\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/deck/login`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ player_id: playerId, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Authentication failed.');\r\n            }\r\n\r\n            // Load data from backend upon successful login\r\n            setActiveDeckInstances(data.active_deck_instances || []); // Load active deck instances\r\n            setUnlockedCollectionIds(data.unlocked_collection_ids || []); // Load unlocked card IDs\r\n            setCharacterLevel(data.character_level !== undefined ? data.character_level : 1);\r\n            setWisMod(data.wis_mod !== undefined ? data.wis_mod : 0);\r\n            setIntMod(data.int_mod !== undefined ? data.int_mod : 0);\r\n            setChaMod(data.cha_mod !== undefined ? data.cha_mod : 0);\r\n            setIsAuthenticated(true);\r\n            setActiveTab('deck'); // Automatically switch to the deck tab after login\r\n\r\n            showMessage('Login successful! Deck and unlocked cards loaded.', 'success');\r\n        } catch (err) {\r\n            setIsAuthenticated(false);\r\n            console.error('Error logging in:', err);\r\n            showMessage(`Failed to load deck: ${err.message}`, 'error');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // --- API Call: Save Deck ---\r\n    const handleSaveDeck = async () => {\r\n        if (!isAuthenticated) {\r\n            showMessage('You must be logged in to save your deck.', 'error');\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/deck/save`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    player_id: playerId,\r\n                    password: password, // Send password for re-validation on backend\r\n                    active_deck_instances: activeDeckInstances, // Save active deck instances\r\n                    unlocked_collection_ids: unlockedCollectionIds, // Save unlocked card IDs\r\n                    character_level: characterLevel,\r\n                    wis_mod: wisMod,\r\n                    int_mod: intMod,\r\n                    cha_mod: chaMod,\r\n                }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Failed to save deck.');\r\n            }\r\n\r\n            showMessage('Deck and unlocked cards saved successfully!', 'success');\r\n        } catch (err) {\r\n            console.error('Error saving deck:', err);\r\n            showMessage(`Failed to save deck: ${err.message}`, 'error');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // --- Effect to Fetch All Cards on Component Mount ---\r\n    useEffect(() => {\r\n        const fetchAllCards = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const cardsResponse = await fetch(`${API_BASE_URL}/cards`);\r\n                if (!cardsResponse.ok) {\r\n                    throw new Error(`HTTP error fetching cards! status: ${cardsResponse.status}`);\r\n                }\r\n                const cardsData = await cardsResponse.json();\r\n                setAllCards(cardsData);\r\n            } catch (err) {\r\n                console.error('Error fetching initial data:', err);\r\n                showMessage('Failed to fetch initial data: ' + err.message, 'error');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchAllCards();\r\n    }, [showMessage]); // Empty dependency array, this effect runs only once on mount\r\n\r\n    // --- Effect to Calculate Max Deck Size when Character Stats Change ---\r\n    useEffect(() => {\r\n        const calculateDeckSize = async () => {\r\n            setError(''); // Clear previous errors related to deck size\r\n            try {\r\n                const response = await fetch(`${API_BASE_URL}/calculate_deck_size`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        character_level: characterLevel,\r\n                        wis_mod: wisMod,\r\n                        int_mod: intMod,\r\n                        cha_mod: chaMod,\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n                setMaxDeckSize(data.max_deck_size);\r\n            } catch (err) {\r\n                setError('Failed to calculate deck size: ' + err.message);\r\n                console.error('Error calculating deck size:', err);\r\n            }\r\n        };\r\n\r\n        if (!isNaN(characterLevel) && !isNaN(wisMod) && !isNaN(intMod) && !isNaN(chaMod)) {\r\n            calculateDeckSize();\r\n        }\r\n    }, [characterLevel, wisMod, intMod, chaMod]);\r\n\r\n    // --- Booster Pack Logic: Open a new pack ---\r\n    const handleOpenBoosterPack = async () => {\r\n        if (!isAuthenticated) {\r\n            showMessage(\"You must be logged in to open booster packs.\", \"error\");\r\n            return;\r\n        }\r\n        setLoading(true); // Indicate loading while opening pack\r\n        setNewlyAcquiredCards([]); // Clear previous new cards display\r\n        setLastOpenedPackType('');\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/deck/open_booster`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ player_id: playerId, password: password }), // Backend determines pack size\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Failed to open booster pack.');\r\n            }\r\n\r\n            setLastOpenedPackType(data.pack_type);\r\n\r\n            if (data.new_cards && data.new_cards.length > 0) {\r\n                // Update the unlockedCollectionIds state with the new IDs\r\n                setUnlockedCollectionIds(prevIds => {\r\n                    const newIds = data.new_cards.map(card => card.id);\r\n                    return [...new Set([...prevIds, ...newIds])]; // Use Set to prevent duplicates\r\n                });\r\n                setNewlyAcquiredCards(data.new_cards); // Store new cards for display\r\n                showMessage(`You opened a ${data.pack_type} and acquired ${data.new_cards.length} cards!`, 'success');\r\n            } else {\r\n                showMessage(data.message || \"No new cards were found in the booster pack.\", 'info');\r\n            }\r\n        } catch (err) {\r\n            console.error('Error opening booster pack:', err);\r\n            showMessage(`Failed to open booster pack: ${err.message}`, 'error');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n\r\n    // --- Deck Building Logic: Add Card ---\r\n    const handleAddCardToDeck = useCallback((card) => {\r\n        if (!isAuthenticated) {\r\n            showMessage(\"You must be logged in to build a deck.\", \"error\");\r\n            return;\r\n        }\r\n        if (activeDeckInstances.length >= maxDeckSize) {\r\n            showMessage('Deck is full! Remove cards to add new ones.', 'error');\r\n            return;\r\n        }\r\n        // Ensure the card being added is actually unlocked (player owns at least one copy of this type)\r\n        if (!unlockedCollectionIds.includes(card.id)) {\r\n            showMessage(\"You don't own this card yet! Open booster packs to unlock more spells.\", \"error\");\r\n            return;\r\n        }\r\n\r\n        const cantripCountInDeck = activeDeckInstances.filter(c => c.type === 'Cantrip').length;\r\n        if (card.type !== 'Cantrip' && cantripCountInDeck === 0 && activeDeckInstances.length === 0) {\r\n             showMessage('Your deck must contain at least one Cantrip! Add a Cantrip first.', 'error');\r\n             return;\r\n        }\r\n\r\n        // Add a new instance of the card to the active deck\r\n        setActiveDeckInstances(prev => [...prev, {\r\n            ...card,\r\n            instance_id: uuidv4(), // Assign a unique ID for this specific copy in the active deck\r\n            current_uses: card.default_uses_per_rest\r\n        }]);\r\n        showMessage('Card added to your deck!', 'success');\r\n    }, [isAuthenticated, maxDeckSize, activeDeckInstances, unlockedCollectionIds, showMessage]);\r\n\r\n    // --- Deck Building Logic: Remove Card ---\r\n    const handleRemoveCardFromDeck = useCallback((instance_id) => {\r\n        const updatedDeck = activeDeckInstances.filter(card => card.instance_id !== instance_id);\r\n        const cantripCount = updatedDeck.filter(c => c.type === 'Cantrip').length;\r\n\r\n        if (cantripCount === 0 && updatedDeck.length > 0) {\r\n            showMessage('Your deck must contain at least one Cantrip! You cannot remove the last one.', 'error');\r\n            return;\r\n        }\r\n        setActiveDeckInstances(updatedDeck);\r\n        showMessage('Card removed from deck.', 'success');\r\n    }, [activeDeckInstances, showMessage]);\r\n\r\n    // --- Card Usage Logic: Mark Card as Used ---\r\n    const handleMarkCardUsed = useCallback(async (instance_id) => {\r\n        const cardToUse = activeDeckInstances.find(card => card.instance_id === instance_id);\r\n        if (!cardToUse) return;\r\n\r\n        if (cardToUse.current_uses > 0) {\r\n            setActiveDeckInstances(prev =>\r\n                prev.map(card =>\r\n                    card.instance_id === instance_id ? { ...card, current_uses: card.current_uses - 1 } : card\r\n                )\r\n            );\r\n\r\n            // Notify backend about the card usage for logging purposes.\r\n            try {\r\n                const response = await fetch(`${API_BASE_URL}/card_used`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        name: cardToUse.name, // Use 'name' to match backend's 'card_name' expectation\r\n                        type: cardToUse.type, // Use 'type' to match backend's 'card_type' expectation\r\n                        deck_card_id: cardToUse.instance_id\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n                console.log('Backend notification:', data.message);\r\n                console.log('Simulated System Log Entry from Backend:', data.log_entry);\r\n            } catch (err) {\r\n                showMessage('Failed to notify backend of card usage for logging: ' + err.message, 'error');\r\n                console.error('Error sending card used notification:', err);\r\n            }\r\n        } else {\r\n            showMessage(`\"${cardToUse.name}\" has no uses left! It needs a long rest.`, 'error');\r\n        }\r\n    }, [activeDeckInstances, showMessage]);\r\n\r\n    // --- Card Usage Logic: Reset Card Uses (Long Rest) ---\r\n    const handleResetCardUses = useCallback((instance_id) => {\r\n        setActiveDeckInstances(prev =>\r\n            prev.map(card =>\r\n                card.instance_id === instance_id ? { ...card, current_uses: card.default_uses_per_rest } : card\r\n            )\r\n        );\r\n        showMessage('Card uses reset!', 'success');\r\n    }, [showMessage]);\r\n\r\n    // Filter available cards based on what the player has unlocked\r\n    // And also count how many copies of each unique card ID the player owns\r\n    const filteredAvailableCardsWithCounts = allCards\r\n        .filter(card => unlockedCollectionIds.includes(card.id))\r\n        .map(card => {\r\n            const count = unlockedCollectionIds.filter(id => id === card.id).length;\r\n            return { ...card, owned_copies: count };\r\n        });\r\n\r\n\r\n    // --- Main Component Render ---\r\n    return (\r\n        <>\r\n            <style>{AppStyles}</style>\r\n            <div className=\"App\">\r\n                <h1 className=\"app-title\">Spell Trading Cards Manager</h1>\r\n\r\n                {/* Login/Auth Section */}\r\n                <div className=\"login-container\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Player ID\"\r\n                        value={playerId}\r\n                        onChange={(e) => setPlayerId(e.target.value)}\r\n                        disabled={loading}\r\n                    />\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        disabled={loading}\r\n                    />\r\n                    <button onClick={handleLoginAndLoadDeck} disabled={loading}>Log In</button>\r\n                    <button onClick={handleCreateAccount} disabled={loading}>Create Account</button>\r\n                    {isAuthenticated && <button onClick={handleSaveDeck} disabled={loading}>Save Deck</button>}\r\n                </div>\r\n\r\n                {/* Character Stats Input Panel */}\r\n                <div className=\"stats-container\">\r\n                    <label>Level: <input type=\"number\" value={characterLevel} onChange={(e) => setCharacterLevel(Math.max(1, parseInt(e.target.value) || 1))} min=\"1\" max=\"20\" /></label>\r\n                    <label>WIS Mod: <input type=\"number\" value={wisMod} onChange={(e) => setWisMod(parseInt(e.target.value) || 0)} /></label>\r\n                    <label>INT Mod: <input type=\"number\" value={intMod} onChange={(e) => setIntMod(parseInt(e.target.value) || 0)} /></label>\r\n                    <label>CHA Mod: <input type=\"number\" value={chaMod} onChange={(e) => setChaMod(parseInt(e.target.value) || 0)} /></label>\r\n                    <p>Max Deck Size: <span className=\"highlight\">{maxDeckSize}</span></p>\r\n                </div>\r\n\r\n                {/* Message Box */}\r\n                {message.text && <div className={`message-box ${message.type}`}>{message.text}</div>}\r\n\r\n                {/* Tab Navigation */}\r\n                <div className=\"tab-navigation\">\r\n                    <div \r\n                        className={`tab-item ${activeTab === 'available' ? 'active' : ''}`} \r\n                        onClick={() => setActiveTab('available')}\r\n                    >\r\n                        Available Spells ({unlockedCollectionIds.length})\r\n                    </div>\r\n                    <div \r\n                        className={`tab-item ${activeTab === 'deck' ? 'active' : ''}`} \r\n                        onClick={() => setActiveTab('deck')}\r\n                    >\r\n                        Your Deck ({activeDeckInstances.length}/{maxDeckSize})\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Main Content Area - Conditional Rendering based on activeTab */}\r\n                <div className=\"main-content\">\r\n                    {/* Available Cards Section */}\r\n                    {activeTab === 'available' && (\r\n                        <div className=\"card-collection-panel\">\r\n                            <h2 className=\"panel-title\">Available Spells</h2>\r\n                            {loading && <p className=\"empty-message\">Loading cards...</p>}\r\n                            {!isAuthenticated && !loading && (\r\n                                <div className=\"pre-login-message\">\r\n                                    <h3>Log in to see your available spells.</h3>\r\n                                </div>\r\n                            )}\r\n                            {isAuthenticated && !loading && filteredAvailableCardsWithCounts.length > 0 && (\r\n                                <div className=\"card-list\">\r\n                                    {filteredAvailableCardsWithCounts.map((card) => (\r\n                                        <div key={card.id} className=\"card-item available-card\" onClick={() => handleAddCardToDeck(card)}>\r\n                                            <img\r\n                                                src={`https://placehold.co/100x150/a8dadc/ffffff?text=${card.name.split('.')[0].replace('_', '%20')}`}\r\n                                                alt={card.name}\r\n                                                className=\"card-image\"\r\n                                                onError={(e) => { e.target.onerror = null; e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\"; }}\r\n                                            />\r\n                                            <h3 className=\"card-name\">{card.name} ({card.type})</h3>\r\n                                            <p className=\"card-description\">{card.description}</p>\r\n                                            <p className=\"card-meta\">Rarity: <span>{card.rarity}</span></p>\r\n                                            <p className=\"card-meta\">Owned Copies: <span>{card.owned_copies}</span></p>\r\n                                            <button\r\n                                                onClick={(e) => { e.stopPropagation(); handleAddCardToDeck(card); }} // Stop propagation to prevent parent onClick\r\n                                                disabled={activeDeckInstances.length >= maxDeckSize}\r\n                                                className=\"select-button\"\r\n                                            >\r\n                                                Add to Deck\r\n                                            </button>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n\r\n                            {isAuthenticated && !loading && (\r\n                                <div className=\"booster-pack-section\">\r\n                                    {filteredAvailableCardsWithCounts.length === 0 && (\r\n                                        <p className=\"empty-message\">You haven't unlocked any unique spells yet! Open a booster pack to get started.</p>\r\n                                    )}\r\n                                    <button \r\n                                        onClick={handleOpenBoosterPack} \r\n                                        disabled={loading}\r\n                                        className=\"booster-button\"\r\n                                    >\r\n                                        Open Booster Pack\r\n                                    </button>\r\n                                    {newlyAcquiredCards.length > 0 && (\r\n                                        <div className=\"new-cards-display\">\r\n                                            <h4>Newly Acquired Cards from {lastOpenedPackType}:</h4>\r\n                                            <ul>\r\n                                                {newlyAcquiredCards.map((card, index) => (\r\n                                                    <li key={card.id + \"-\" + index}>\r\n                                                        {card.name} ({card.type}, {card.rarity})\r\n                                                        {unlockedCollectionIds.includes(card.id) && <span> (Duplicate)</span>}\r\n                                                    </li>\r\n                                                ))}\r\n                                            </ul>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Built Deck Section */}\r\n                    {activeTab === 'deck' && (\r\n                        <div className=\"built-deck-panel\">\r\n                            <h2 className=\"panel-title\">Your Deck ({activeDeckInstances.length}/{maxDeckSize})</h2>\r\n                            <div className=\"deck-list\">\r\n                                {isAuthenticated ? (\r\n                                    activeDeckInstances.length === 0 ? (\r\n                                        <p className=\"empty-message\">Select cards from the \"Available Spells\" tab to build your deck!</p>\r\n                                    ) : (\r\n                                        activeDeckInstances.map((card) => (\r\n                                            <div key={card.instance_id} className=\"card-item deck-card\">\r\n                                                <img\r\n                                                    src={`https://placehold.co/100x150/a8dadc/ffffff?text=${card.name.split('.')[0].replace('_', '%20')}`}\r\n                                                    alt={card.name}\r\n                                                    className=\"card-image\"\r\n                                                    onError={(e) => { e.target.onerror = null; e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\"; }}\r\n                                                />\r\n                                                <h3 className=\"card-name\">{card.name} ({card.type})</h3>\r\n                                                <p className=\"card-description\">{card.description}</p>\r\n                                                <p className=\"card-meta\">Rarity: <span>{card.rarity}</span></p>\r\n                                                <p className=\"card-uses\">Uses Left: {card.current_uses}/{card.default_uses_per_rest}</p>\r\n                                                <div className=\"card-actions\">\r\n                                                    <button\r\n                                                        onClick={() => handleMarkCardUsed(card.instance_id)}\r\n                                                        disabled={card.current_uses <= 0}\r\n                                                        className=\"use-button\"\r\n                                                    >\r\n                                                        Use\r\n                                                    </button>\r\n                                                    <button\r\n                                                        onClick={() => handleResetCardUses(card.instance_id)}\r\n                                                        className=\"reset-button\"\r\n                                                    >\r\n                                                        Reset Uses\r\n                                                    </button>\r\n                                                    <button\r\n                                                        onClick={() => handleRemoveCardFromDeck(card.instance_id)}\r\n                                                        className=\"remove-button\"\r\n                                                    >\r\n                                                        Remove\r\n                                                    </button>\r\n                                                </div>\r\n                                            </div>\r\n                                        ))\r\n                                    )\r\n                                ) : (\r\n                                    <div className=\"pre-login-message\">\r\n                                        <h3>Please log in to load your character and spell deck.</h3>\r\n                                        <p>Once logged in, your deck and stats will appear here.</p>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}