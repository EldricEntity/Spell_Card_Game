{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aaron\\\\DND_Spell_Cards\\\\Spell_Card_Game\\\\DND_Spell_Cards_online\\\\frontend - Copy\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// dnd-spell-cards-app/frontend/src/App.js\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique keys for deck card instances\n\n// IMPORTANT: Update this to your VM's Public IP address (or domain name if configured)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://193.122.147.91:5000/api';\n\n// Inline CSS for self-contained component\nconst AppStyles = `\n    /* Import Google Fonts for a D&D feel */\n    @import url('https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&family=Merriweather:wght@400;700&display=swap');\n\n    body {\n        background-color: #3b2f2f; /* Dark brown background, like a closed grimoire */\n        font-family: 'Merriweather', serif; /* Readable serif for body text */\n        color: #5a4b4b; /* Darker, faded text */\n        margin: 0;\n        padding: 0;\n        line-height: 1.6;\n    }\n\n    .App {\n        display: flex;\n        flex-direction: column;\n        min-height: 100vh;\n        align-items: center;\n        padding: 1.5rem; /* Increased padding */\n        box-sizing: border-box;\n        /* --- NEW WOODEN FLOOR TEXTURE --- */\n        background-image: url('/images/wooden-floor.jpg'); \n        background-size: cover;\n        background-position: center; /* Center the background image */\n        background-attachment: fixed;\n        border: 10px solid #4a3e3c; /* Thick, dark border for the \"book\" effect */\n        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5); /* Deep shadow for depth */\n        margin: 1rem; /* Margin to show body background */\n        border-radius: 1rem; /* Slightly rounded edges for the book */\n    }\n\n    .app-title {\n        font-family: 'Cinzel', serif; /* Ornate font for title */\n        color: #8c6e4e; /* Gold/parchment color */\n        text-align: center;\n        margin-bottom: 2rem;\n        font-size: 3.2rem; /* Larger title */\n        font-weight: 700;\n        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6); /* Text shadow for depth */\n    }\n\n    .login-container, .stats-container {\n        background: #6a5d5a; /* Muted stone/dark wood color */\n        color: #f5f5dc; /* Off-white for readability */\n        padding: 1.8rem; /* More padding */\n        margin-bottom: 2rem;\n        border-radius: 0.8rem;\n        box-shadow: inset 0 2px 8px rgba(0, 0, 0, 0.4), 0 4px 15px rgba(0, 0, 0, 0.3); /* Inset shadow for carved look */\n        display: flex;\n        gap: 1.2rem;\n        align-items: center;\n        justify-content: center;\n        flex-wrap: wrap;\n        width: 100%;\n        max-width: 1000px; /* Slightly narrower */\n        border: 2px solid #4a3e3c; /* Matching dark border */\n    }\n\n    .login-container input {\n        padding: 0.8rem 1rem;\n        border-radius: 0.5rem;\n        border: 1px solid #8c6e4e; /* Goldish border */\n        background: #e9dcc9; /* Parchment background */\n        color: #3b2f2f; /* Dark text */\n        font-family: 'Merriweather', serif;\n        font-size: 1.1rem;\n        flex-grow: 1;\n        max-width: 200px;\n    }\n\n    .login-container button, .use-button, .reset-button, .remove-button, .select-button, .booster-button {\n        background-color: #8c6e4e; /* Gold/bronze button */\n        color: #f5f5dc; /* Off-white text */\n        padding: 0.8rem 1.5rem;\n        border: 2px solid #5a4b4b; /* Darker edge */\n        border-radius: 0.5rem;\n        cursor: pointer;\n        font-weight: bold;\n        transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;\n        white-space: nowrap;\n        font-family: 'Cinzel', serif; /* Thematic button font */\n        text-transform: uppercase;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n    }\n\n    .login-container button:hover, .select-button:hover:not(:disabled), .booster-button:hover:not(:disabled) {\n        background-color: #a38b6d; /* Lighter gold on hover */\n        transform: translateY(-3px); /* More pronounced lift */\n        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4);\n    }\n\n    .select-button:disabled, .use-button:disabled, .booster-button:disabled {\n        background-color: #5a4b4b; /* Muted disabled color */\n        color: #a0a0a0;\n        cursor: not-allowed;\n        transform: none;\n        box-shadow: none;\n    }\n\n    .stats-container {\n        background: #5a4b4b; /* Darker tone for stats */\n        color: #f5f5dc;\n        padding: 1.8rem;\n    }\n\n    .stats-container label {\n        display: flex;\n        align-items: center;\n        gap: 0.6rem;\n        font-weight: 700;\n        font-family: 'Cinzel', serif;\n    }\n\n    .stats-container input {\n        width: 5rem; /* Wider input */\n        padding: 0.4rem;\n        border-radius: 0.4rem;\n        border: 1px solid #8c6e4e;\n        background: #e9dcc9;\n        color: #3b2f2f;\n        text-align: center;\n        font-family: 'Merriweather', serif;\n    }\n\n    .stats-container p {\n        margin: 0;\n        padding: 0;\n        font-size: 1.1rem;\n        font-weight: 700;\n    }\n\n    .message-box {\n        position: fixed;\n        top: 2rem; /* Lowered position */\n        left: 50%;\n        transform: translateX(-50%);\n        padding: 0.9rem 1.8rem;\n        border-radius: 0.6rem;\n        font-weight: bold;\n        z-index: 1000;\n        animation: fadein 0.5s, fadeout 0.5s 4.5s; /* Longer display */\n        text-align: center;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);\n        font-family: 'Cinzel', serif;\n        text-transform: uppercase;\n    }\n\n    .message-box.success {\n        background-color: #488c5d; /* Darker green */\n        color: white;\n    }\n\n    .message-box.error {\n        background-color: #a33b3b; /* Darker red */\n        color: white;\n    }\n\n    .message-box.info {\n        background-color: #6a5d5a;\n        color: #f5f5dc;\n    }\n\n    @keyframes fadein {\n        from { opacity: 0; transform: translateX(-50%) translateY(-20px); }\n        to   { opacity: 1; transform: translateX(-50%) translateY(0); }\n    }\n\n    @keyframes fadeout {\n        from { opacity: 1; transform: translateX(-50%) translateY(0); }\n        to   { opacity: 0; transform: translateX(-50%) translateY(-20px); }\n    }\n\n    .tab-navigation {\n        display: flex;\n        justify-content: center;\n        width: 100%;\n        max-width: 1000px;\n        margin-bottom: 2rem;\n        background-color: #5a4b4b; /* Darker tab background */\n        border-radius: 0.8rem;\n        box-shadow: inset 0 2px 8px rgba(0, 0, 0, 0.4);\n        overflow: hidden;\n        border: 2px solid #4a3e3c;\n    }\n\n    .tab-item {\n        flex: 1;\n        text-align: center;\n        padding: 1.2rem 1.8rem; /* More generous padding */\n        cursor: pointer;\n        font-weight: bold;\n        color: #e9dcc9; /* Parchment text */\n        background-color: #5a4b4b;\n        transition: background-color 0.3s ease, color 0.3s ease;\n        border-bottom: 4px solid transparent; /* Thicker active indicator */\n        font-family: 'Cinzel', serif;\n        text-transform: uppercase;\n    }\n\n    .tab-item:hover:not(.active) {\n        background-color: #6a5d5a; /* Slightly lighter on hover */\n    }\n\n    .tab-item.active {\n        background-color: #8c6e4e; /* Gold active tab */\n        color: white;\n        border-bottom-color: #a38b6d; /* Lighter gold accent */\n    }\n\n    .main-content {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 2rem; /* Increased gap */\n        width: 100%;\n        max-width: 1000px;\n        flex: 1;\n    }\n\n    .card-collection-panel, .built-deck-panel {\n        background: #e9dcc9; /* Parchment background for panels */\n        border-radius: 0.8rem;\n        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);\n        padding: 2rem; /* More padding */\n        flex: 1;\n        min-width: 320px; /* Slightly larger min-width */\n        display: flex;\n        flex-direction: column;\n        border: 2px solid #8c6e4e; /* Gold border */\n    }\n\n    .panel-title {\n        font-family: 'Cinzel', serif;\n        text-align: center;\n        color: #3b2f2f; /* Dark text for title */\n        margin-top: 0;\n        margin-bottom: 2rem;\n        font-size: 2.2rem; /* Larger panel title */\n        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);\n    }\n\n    .card-list, .deck-list {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr)); /* Larger cards */\n        gap: 1.5rem; /* Increased gap */\n        flex-grow: 1;\n    }\n\n    .card-item {\n        background: #fdf6e6; /* Lighter parchment for individual cards */\n        border: 1px solid #d3c4a2; /* Faded parchment border */\n        border-radius: 0.6rem;\n        padding: 1.2rem;\n        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n        transition: transform 0.2s ease, box-shadow 0.2s ease;\n        display: flex;\n        flex-direction: column;\n        text-align: center;\n        font-family: 'Merriweather', serif;\n    }\n\n    .card-item:hover.available-card {\n        transform: translateY(-7px); /* More dramatic lift */\n        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.25);\n        cursor: pointer;\n    }\n\n    .card-item.deck-card {\n        background: #e9dcc9; /* Muted parchment for deck cards */\n        border: 1px solid #8c6e4e; /* Goldish border for deck cards */\n    }\n\n    .card-image {\n        max-width: 100%;\n        height: auto;\n        border-radius: 0.4rem;\n        margin-bottom: 1rem;\n        border: 1px solid #8c6e4e; /* Gold frame for image */\n    }\n\n    .card-name {\n        font-family: 'Cinzel', serif;\n        font-weight: 700;\n        font-size: 1.25rem;\n        color: #3b2f2f;\n        margin-bottom: 0.6rem;\n    }\n\n    .card-type {\n        font-style: italic;\n        color: #5a4b4b;\n        margin-bottom: 0.7rem;\n        font-size: 0.95rem;\n    }\n\n    .card-description {\n        font-size: 0.9rem;\n        color: #4a3e3c;\n        flex-grow: 1;\n        margin-bottom: 1rem;\n    }\n\n    .card-meta, .card-uses {\n        font-size: 0.85rem;\n        color: #5a4b4b;\n        margin-bottom: 0.6rem;\n    }\n    \n    .card-meta span {\n        font-weight: bold;\n        color: #3b2f2f;\n    }\n\n    .card-actions {\n        margin-top: 1rem;\n        display: flex;\n        flex-wrap: wrap;\n        gap: 0.6rem;\n        justify-content: center;\n    }\n\n    .use-button {\n        background-color: #4a6d8c; /* Muted blue for use */\n        color: white;\n    }\n    .use-button:hover:not(:disabled) {\n        background-color: #3a5c78;\n        transform: translateY(-2px);\n    }\n\n    .reset-button {\n        background-color: #5a8c4a; /* Muted green for reset */\n        color: white;\n    }\n    .reset-button:hover {\n        background-color: #4a783a;\n        transform: translateY(-2px);\n    }\n\n    .remove-button {\n        background-color: #8c4a4a; /* Muted red for remove */\n        color: white;\n    }\n    .remove-button:hover {\n        background-color: #783a3a;\n        transform: translateY(-2px);\n    }\n\n    .empty-message, .pre-login-message {\n        text-align: center;\n        padding: 2.5rem;\n        background: #d3c4a2; /* Lighter parchment */\n        border-radius: 0.8rem;\n        color: #5a4b4b;\n        font-style: italic;\n        margin: 1.5rem;\n        border: 1px solid #8c6e4e;\n        box-shadow: inset 0 1px 5px rgba(0, 0, 0, 0.2);\n    }\n\n    .error-message {\n        color: #a33b3b;\n        background-color: #fce2e2;\n        border: 1px solid #a33b3b;\n        padding: 0.8rem;\n        border-radius: 0.6rem;\n        text-align: center;\n        margin-top: 1.5rem;\n        font-weight: bold;\n        font-family: 'Merriweather', serif;\n    }\n\n    .highlight {\n        color: #4a6d8c; /* Muted blue highlight */\n        font-weight: bold;\n    }\n\n    .booster-pack-section {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        margin-top: 2rem;\n        padding-top: 2rem;\n        border-top: 1px dashed #8c6e4e; /* Dashed gold separator */\n        width: 100%;\n    }\n\n    .booster-pack-section button {\n        margin-top: 1.5rem;\n    }\n\n    .new-cards-display {\n        margin-top: 1.5rem;\n        padding: 1.5rem;\n        background: #d3c4a2;\n        border-radius: 0.6rem;\n        text-align: center;\n        width: 100%;\n        max-width: 450px;\n        border: 1px solid #8c6e4e;\n        box-shadow: inset 0 1px 5px rgba(0, 0, 0, 0.2);\n        font-family: 'Merriweather', serif;\n    }\n    .new-cards-display h4 {\n        font-family: 'Cinzel', serif;\n        color: #3b2f2f;\n        margin-bottom: 0.8rem;\n        font-size: 1.2rem;\n    }\n    .new-cards-display ul {\n        list-style-type: none;\n        padding: 0;\n        margin: 0;\n    }\n    .new-cards-display li {\n        margin-bottom: 0.3rem;\n        color: #4a3e3c;\n        font-size: 0.95rem;\n    }\n\n    /* Responsive Adjustments */\n    @media (max-width: 768px) {\n        .App {\n            padding: 1rem;\n            margin: 0.5rem;\n        }\n        .app-title {\n            font-size: 2.5rem;\n        }\n        .main-content {\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        .login-container, .stats-container, .tab-navigation, .booster-controls {\n            flex-direction: column;\n            align-items: stretch;\n            gap: 0.8rem;\n            padding: 1.2rem;\n        }\n        .login-container input {\n            max-width: 100%;\n        }\n        .tab-item {\n            border-bottom: none;\n            border-right: 4px solid transparent;\n            padding: 1rem;\n        }\n        .tab-item.active {\n            border-bottom-color: transparent;\n            border-right-color: #a38b6d;\n        }\n        .panel-title {\n            font-size: 1.8rem;\n        }\n        .card-list, .deck-list {\n            grid-template-columns: 1fr;\n            gap: 1.2rem;\n        }\n        .card-item {\n            padding: 1rem;\n        }\n    }\n\n    @media (max-width: 480px) {\n        .app-title {\n            font-size: 2rem;\n        }\n        .panel-title {\n            font-size: 1.5rem;\n        }\n        .login-container button, .use-button, .reset-button, .remove-button, .select-button, .booster-button {\n            width: 100%;\n            padding: 0.6rem 1rem;\n        }\n    }\n`;\nfunction App() {\n  _s();\n  // --- State Variables ---\n  const [allCards, setAllCards] = useState([]); // All cards fetched from the backend (master list)\n  const [characterLevel, setCharacterLevel] = useState(1);\n  const [wisMod, setWisMod] = useState(0);\n  const [intMod, setIntMod] = useState(0);\n  const [chaMod, setChaMod] = useState(0);\n  const [maxDeckSize, setMaxDeckSize] = useState(0);\n  const [activeDeckInstances, setActiveDeckInstances] = useState([]); // Cards currently in the player's ACTIVE deck (persistent instances)\n  const [unlockedCollectionIds, setUnlockedCollectionIds] = useState([]); // IDs of all UNIQUE card types the player HAS UNLOCKED (owned pool)\n  const [error, setError] = useState(''); // General error messages for UI\n\n  // New states for login/auth\n  const [playerId, setPlayerId] = useState('');\n  const [password, setPassword] = useState('');\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [message, setMessage] = useState({\n    text: '',\n    type: ''\n  });\n  const [loading, setLoading] = useState(true); // Loading state for initial data fetch of allCards\n\n  // New state for tab management\n  const [activeTab, setActiveTab] = useState('available'); // 'available' or 'deck'\n\n  // State for newly acquired cards from booster packs\n  const [newlyAcquiredCards, setNewlyAcquiredCards] = useState([]);\n  const [lastOpenedPackType, setLastOpenedPackType] = useState('');\n  const [prePackUnlockedIds, setPrePackUnlockedIds] = useState([]); // Store state before opening pack for duplicate check\n\n  // --- Helper function to display messages ---\n  const showMessage = useCallback((text, type) => {\n    setMessage({\n      text,\n      type\n    });\n    // Clear message after 5 seconds for info, 3 seconds for others\n    const duration = type === 'info' ? 5000 : 3000;\n    setTimeout(() => setMessage({\n      text: '',\n      type: ''\n    }), duration);\n  }, []);\n\n  // --- API Call: Create Account ---\n  const handleCreateAccount = async () => {\n    if (!playerId || !password) {\n      showMessage('Player ID and password are required to create an account.', 'error');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/deck/create`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          player_id: playerId,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to create account.');\n      }\n      showMessage('Account created successfully! You can now log in.', 'success');\n    } catch (err) {\n      console.error('Error creating account:', err);\n      showMessage(`Failed to create account: ${err.message}`, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // --- API Call: Login and Load Deck ---\n  const handleLoginAndLoadDeck = async () => {\n    if (!playerId || !password) {\n      showMessage('Player ID and password are required to log in.', 'error');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/deck/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          player_id: playerId,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Authentication failed.');\n      }\n\n      // Load data from backend upon successful login\n      setActiveDeckInstances(data.active_deck_instances || []); // Load active deck instances\n      setUnlockedCollectionIds(data.unlocked_collection_ids || []); // Load unlocked card IDs (now includes duplicates)\n      setCharacterLevel(data.character_level !== undefined ? data.character_level : 1);\n      setWisMod(data.wis_mod !== undefined ? data.wis_mod : 0);\n      setIntMod(data.int_mod !== undefined ? data.int_mod : 0);\n      setChaMod(data.cha_mod !== undefined ? data.cha_mod : 0);\n      setIsAuthenticated(true);\n      setActiveTab('deck'); // Automatically switch to the deck tab after login\n\n      showMessage('Login successful! Deck and unlocked cards loaded.', 'success');\n    } catch (err) {\n      setIsAuthenticated(false);\n      console.error('Error logging in:', err);\n      showMessage(`Failed to load deck: ${err.message}`, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // --- API Call: Save Deck ---\n  const handleSaveDeck = async () => {\n    if (!isAuthenticated) {\n      showMessage('You must be logged in to save your deck.', 'error');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/deck/save`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          player_id: playerId,\n          password: password,\n          // Send password for re-validation on backend\n          active_deck_instances: activeDeckInstances,\n          // Save active deck instances\n          unlocked_collection_ids: unlockedCollectionIds,\n          // Save unlocked card IDs (now includes duplicates)\n          character_level: characterLevel,\n          wis_mod: wisMod,\n          int_mod: intMod,\n          cha_mod: chaMod\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to save deck.');\n      }\n      showMessage('Deck and unlocked cards saved successfully!', 'success');\n    } catch (err) {\n      console.error('Error saving deck:', err);\n      showMessage(`Failed to save deck: ${err.message}`, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // --- Effect to Fetch All Cards on Component Mount ---\n  useEffect(() => {\n    const fetchAllCards = async () => {\n      setLoading(true);\n      try {\n        const cardsResponse = await fetch(`${API_BASE_URL}/cards`);\n        if (!cardsResponse.ok) {\n          throw new Error(`HTTP error fetching cards! status: ${cardsResponse.status}`);\n        }\n        const cardsData = await cardsResponse.json();\n        setAllCards(cardsData);\n      } catch (err) {\n        console.error('Error fetching initial data:', err);\n        showMessage('Failed to fetch initial data: ' + err.message, 'error');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAllCards();\n  }, [showMessage]); // Empty dependency array, this effect runs only once on mount\n\n  // --- Effect to Calculate Max Deck Size when Character Stats Change ---\n  useEffect(() => {\n    const calculateDeckSize = async () => {\n      setError(''); // Clear previous errors related to deck size\n      try {\n        const response = await fetch(`${API_BASE_URL}/calculate_deck_size`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            character_level: characterLevel,\n            wis_mod: wisMod,\n            int_mod: intMod,\n            cha_mod: chaMod\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setMaxDeckSize(data.max_deck_size);\n      } catch (err) {\n        setError('Failed to calculate deck size: ' + err.message);\n        console.error('Error calculating deck size:', err);\n      }\n    };\n    if (!isNaN(characterLevel) && !isNaN(wisMod) && !isNaN(intMod) && !isNaN(chaMod)) {\n      calculateDeckSize();\n    }\n  }, [characterLevel, wisMod, intMod, chaMod]);\n\n  // --- Booster Pack Logic: Open a new pack ---\n  const handleOpenBoosterPack = async () => {\n    if (!isAuthenticated) {\n      showMessage(\"You must be logged in to open booster packs.\", \"error\");\n      return;\n    }\n    setLoading(true); // Indicate loading while opening pack\n    setNewlyAcquiredCards([]); // Clear previous new cards display\n    setLastOpenedPackType('');\n    setPrePackUnlockedIds(unlockedCollectionIds); // Store current collection for duplicate check\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/deck/open_booster`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          player_id: playerId,\n          password: password\n        }) // Backend determines pack size\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to open booster pack.');\n      }\n      setLastOpenedPackType(data.pack_type);\n      if (data.new_cards && data.new_cards.length > 0) {\n        // Update the unlockedCollectionIds state with the new IDs (now including duplicates)\n        setUnlockedCollectionIds(data.updated_unlocked_collection_ids || []);\n        setNewlyAcquiredCards(data.new_cards); // Store new cards for display\n        showMessage(`You opened a ${data.pack_type} and acquired ${data.new_cards.length} cards!`, 'success');\n      } else {\n        showMessage(data.message || \"No new cards were found in the booster pack.\", 'info');\n      }\n    } catch (err) {\n      console.error('Error opening booster pack:', err);\n      showMessage(`Failed to open booster pack: ${err.message}`, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // --- Deck Building Logic: Add Card ---\n  const handleAddCardToDeck = useCallback(card => {\n    if (!isAuthenticated) {\n      showMessage(\"You must be logged in to build a deck.\", \"error\");\n      return;\n    }\n    if (activeDeckInstances.length >= maxDeckSize) {\n      showMessage('Deck is full! Remove cards to add new ones.', 'error');\n      return;\n    }\n\n    // --- FIX: Count available copies vs. copies in active deck ---\n    const ownedCopiesOfThisCard = unlockedCollectionIds.filter(id => id === card.id).length;\n    const copiesInActiveDeck = activeDeckInstances.filter(c => c.id === card.id).length;\n    if (copiesInActiveDeck >= ownedCopiesOfThisCard) {\n      showMessage(`You have already added all owned copies of ${card.name} to your deck. Open more booster packs to get more!`, 'error');\n      return;\n    }\n    const cantripCountInDeck = activeDeckInstances.filter(c => c.type === 'Cantrip').length;\n    if (card.type !== 'Cantrip' && cantripCountInDeck === 0 && activeDeckInstances.length === 0) {\n      showMessage('Your deck must contain at least one Cantrip! Add a Cantrip first.', 'error');\n      return;\n    }\n\n    // Add a new instance of the card to the active deck\n    setActiveDeckInstances(prev => [...prev, {\n      ...card,\n      instance_id: uuidv4(),\n      // Assign a unique ID for this specific copy in the active deck\n      current_uses: card.default_uses_per_rest\n    }]);\n    showMessage('Card added to your deck!', 'success');\n  }, [isAuthenticated, maxDeckSize, activeDeckInstances, unlockedCollectionIds, showMessage]);\n\n  // --- Deck Building Logic: Remove Card ---\n  const handleRemoveCardFromDeck = useCallback(instance_id => {\n    const updatedDeck = activeDeckInstances.filter(card => card.instance_id !== instance_id);\n    const cantripCount = updatedDeck.filter(c => c.type === 'Cantrip').length;\n    if (cantripCount === 0 && updatedDeck.length > 0) {\n      showMessage('Your deck must contain at least one Cantrip! You cannot remove the last one.', 'error');\n      return;\n    }\n    setActiveDeckInstances(updatedDeck);\n    showMessage('Card removed from deck.', 'success');\n  }, [activeDeckInstances, showMessage]);\n\n  // --- Card Usage Logic: Mark Card as Used ---\n  const handleMarkCardUsed = useCallback(async instance_id => {\n    const cardToUse = activeDeckInstances.find(card => card.instance_id === instance_id);\n    if (!cardToUse) return;\n    if (cardToUse.current_uses > 0) {\n      setActiveDeckInstances(prev => prev.map(card => card.instance_id === instance_id ? {\n        ...card,\n        current_uses: card.current_uses - 1\n      } : card));\n\n      // Notify backend about the card usage for logging purposes.\n      try {\n        const response = await fetch(`${API_BASE_URL}/card_used`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: cardToUse.name,\n            // Use 'name' to match backend's 'card_name' expectation\n            type: cardToUse.type,\n            // Use 'type' to match backend's 'card_type' expectation\n            deck_card_id: cardToUse.instance_id\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Backend notification:', data.message);\n        console.log('Simulated System Log Entry from Backend:', data.log_entry);\n      } catch (err) {\n        showMessage('Failed to notify backend of card usage for logging: ' + err.message, 'error');\n        console.error('Error sending card used notification:', err);\n      }\n    } else {\n      showMessage(`\"${cardToUse.name}\" has no uses left! It needs a long rest.`, 'error');\n    }\n  }, [activeDeckInstances, showMessage]);\n\n  // --- Card Usage Logic: Reset Card Uses (Long Rest) ---\n  const handleResetCardUses = useCallback(instance_id => {\n    setActiveDeckInstances(prev => prev.map(card => card.instance_id === instance_id ? {\n      ...card,\n      current_uses: card.default_uses_per_rest\n    } : card));\n    showMessage('Card uses reset!', 'success');\n  }, [showMessage]);\n\n  // Filter available cards based on what the player has unlocked\n  // And also count how many copies of each unique card ID the player owns\n  const filteredAvailableCardsWithCounts = allCards.filter(card => unlockedCollectionIds.includes(card.id)) // Only show cards of types user has unlocked\n  .reduce((acc, card) => {\n    // Group by card ID and count occurrences\n    if (!acc[card.id]) {\n      const count = unlockedCollectionIds.filter(id => id === card.id).length;\n      acc[card.id] = {\n        ...card,\n        owned_copies: count\n      };\n    }\n    return acc;\n  }, {});\n  const uniqueUnlockedCards = Object.values(filteredAvailableCardsWithCounts);\n\n  // --- Main Component Render ---\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: AppStyles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 839,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"app-title\",\n        children: \"Spell Trading Cards Manager\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 841,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Player ID\",\n          value: playerId,\n          onChange: e => setPlayerId(e.target.value),\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 845,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 852,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLoginAndLoadDeck,\n          disabled: loading,\n          children: \"Log In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 859,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCreateAccount,\n          disabled: loading,\n          children: \"Create Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 21\n        }, this), isAuthenticated && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSaveDeck,\n          disabled: loading,\n          children: \"Save Deck\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 861,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 844,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stats-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Level: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: characterLevel,\n            onChange: e => setCharacterLevel(Math.max(1, parseInt(e.target.value) || 1)),\n            min: \"1\",\n            max: \"20\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 866,\n            columnNumber: 35\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 866,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"WIS Mod: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: wisMod,\n            onChange: e => setWisMod(parseInt(e.target.value) || 0)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 867,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 867,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"INT Mod: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: intMod,\n            onChange: e => setIntMod(parseInt(e.target.value) || 0)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 868,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 868,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"CHA Mod: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: chaMod,\n            onChange: e => setChaMod(parseInt(e.target.value) || 0)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 869,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 869,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Max Deck Size: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"highlight\",\n            children: maxDeckSize\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 870,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 870,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 865,\n        columnNumber: 17\n      }, this), message.text && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message-box ${message.type}`,\n        children: message.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 874,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tab-navigation\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `tab-item ${activeTab === 'available' ? 'active' : ''}`,\n          onClick: () => setActiveTab('available'),\n          children: [\"Available Spells (\", uniqueUnlockedCards.length, \" Types / \", unlockedCollectionIds.length, \" Total Owned)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `tab-item ${activeTab === 'deck' ? 'active' : ''}`,\n          onClick: () => setActiveTab('deck'),\n          children: [\"Your Deck (\", activeDeckInstances.length, \"/\", maxDeckSize, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 884,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 877,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [activeTab === 'available' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-collection-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"panel-title\",\n            children: \"Available Spells\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 897,\n            columnNumber: 29\n          }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"empty-message\",\n            children: \"Loading cards...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 898,\n            columnNumber: 41\n          }, this), !isAuthenticated && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pre-login-message\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Log in to see your available spells.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 901,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 900,\n            columnNumber: 33\n          }, this), isAuthenticated && !loading && uniqueUnlockedCards.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-list\",\n            children: uniqueUnlockedCards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-item available-card\",\n              onClick: () => handleAddCardToDeck(card),\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: `https://placehold.co/100x150/a8dadc/ffffff?text=${card.name.split('.')[0].replace('_', '%20')}`,\n                alt: card.name,\n                className: \"card-image\",\n                onError: e => {\n                  e.target.onerror = null;\n                  e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\";\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 908,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"card-name\",\n                children: [card.name, \" (\", card.type, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 914,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-description\",\n                children: card.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 915,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-meta\",\n                children: [\"Rarity: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: card.rarity\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 916,\n                  columnNumber: 78\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 916,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-meta\",\n                children: [\"Owned Copies: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: card.owned_copies\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 917,\n                  columnNumber: 84\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 917,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: e => {\n                  e.stopPropagation();\n                  handleAddCardToDeck(card);\n                } // Stop propagation to prevent parent onClick\n                // Disable button if deck is full OR if all owned copies are already in the deck\n                ,\n                disabled: activeDeckInstances.length >= maxDeckSize || activeDeckInstances.filter(c => c.id === card.id).length >= card.owned_copies,\n                className: \"select-button\",\n                children: \"Add to Deck\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 918,\n                columnNumber: 45\n              }, this)]\n            }, card.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 907,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 905,\n            columnNumber: 33\n          }, this), isAuthenticated && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"booster-pack-section\",\n            children: [uniqueUnlockedCards.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"empty-message\",\n              children: \"You haven't unlocked any unique spell types yet! Open a booster pack to get started.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 935,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleOpenBoosterPack,\n              disabled: loading,\n              className: \"booster-button\",\n              children: \"Open Booster Pack\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 937,\n              columnNumber: 37\n            }, this), newlyAcquiredCards.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"new-cards-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: [\"Newly Acquired Cards from \", lastOpenedPackType, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 946,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: newlyAcquiredCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [\" \", card.name, \" (\", card.type, \", \", card.rarity, \")\", prePackUnlockedIds.includes(card.id) && /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \" (Duplicate)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 951,\n                    columnNumber: 98\n                  }, this)]\n                }, card.id + \"-new-\" + index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 949,\n                  columnNumber: 53\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 947,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 945,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 933,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 896,\n          columnNumber: 25\n        }, this), activeTab === 'deck' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"built-deck-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"panel-title\",\n            children: [\"Your Deck (\", activeDeckInstances.length, \"/\", maxDeckSize, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 965,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"deck-list\",\n            children: isAuthenticated ? activeDeckInstances.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"empty-message\",\n              children: \"Select cards from the \\\"Available Spells\\\" tab to build your deck!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 969,\n              columnNumber: 41\n            }, this) : activeDeckInstances.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-item deck-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: `https://placehold.co/100x150/a8dadc/ffffff?text=${card.name.split('.')[0].replace('_', '%20')}`,\n                alt: card.name,\n                className: \"card-image\",\n                onError: e => {\n                  e.target.onerror = null;\n                  e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\";\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 973,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"card-name\",\n                children: [card.name, \" (\", card.type, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 979,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-description\",\n                children: card.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 980,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-meta\",\n                children: [\"Rarity: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: card.rarity\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 981,\n                  columnNumber: 82\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 981,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-uses\",\n                children: [\"Uses Left: \", card.current_uses, \"/\", card.default_uses_per_rest]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 982,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-actions\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleMarkCardUsed(card.instance_id),\n                  disabled: card.current_uses <= 0,\n                  className: \"use-button\",\n                  children: \"Use\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 984,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleResetCardUses(card.instance_id),\n                  className: \"reset-button\",\n                  children: \"Reset Uses\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 991,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleRemoveCardFromDeck(card.instance_id),\n                  className: \"remove-button\",\n                  children: \"Remove\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 997,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 983,\n                columnNumber: 49\n              }, this)]\n            }, card.instance_id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 972,\n              columnNumber: 45\n            }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pre-login-message\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Please log in to load your character and spell deck.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1009,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Once logged in, your deck and stats will appear here.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1010,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1008,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 966,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 964,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 893,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 840,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"vn5WcucLSM27icFqrUI54obZIb8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","v4","uuidv4","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","AppStyles","App","_s","allCards","setAllCards","characterLevel","setCharacterLevel","wisMod","setWisMod","intMod","setIntMod","chaMod","setChaMod","maxDeckSize","setMaxDeckSize","activeDeckInstances","setActiveDeckInstances","unlockedCollectionIds","setUnlockedCollectionIds","error","setError","playerId","setPlayerId","password","setPassword","isAuthenticated","setIsAuthenticated","message","setMessage","text","type","loading","setLoading","activeTab","setActiveTab","newlyAcquiredCards","setNewlyAcquiredCards","lastOpenedPackType","setLastOpenedPackType","prePackUnlockedIds","setPrePackUnlockedIds","showMessage","duration","setTimeout","handleCreateAccount","response","fetch","method","headers","body","JSON","stringify","player_id","data","json","ok","Error","err","console","handleLoginAndLoadDeck","active_deck_instances","unlocked_collection_ids","character_level","undefined","wis_mod","int_mod","cha_mod","handleSaveDeck","fetchAllCards","cardsResponse","status","cardsData","calculateDeckSize","max_deck_size","isNaN","handleOpenBoosterPack","pack_type","new_cards","length","updated_unlocked_collection_ids","handleAddCardToDeck","card","ownedCopiesOfThisCard","filter","id","copiesInActiveDeck","c","name","cantripCountInDeck","prev","instance_id","current_uses","default_uses_per_rest","handleRemoveCardFromDeck","updatedDeck","cantripCount","handleMarkCardUsed","cardToUse","find","map","deck_card_id","log","log_entry","handleResetCardUses","filteredAvailableCardsWithCounts","includes","reduce","acc","count","owned_copies","uniqueUnlockedCards","Object","values","children","fileName","_jsxFileName","lineNumber","columnNumber","className","placeholder","value","onChange","e","target","disabled","onClick","Math","max","parseInt","min","src","split","replace","alt","onError","onerror","description","rarity","stopPropagation","index","_c","$RefreshReg$"],"sources":["C:/Users/aaron/DND_Spell_Cards/Spell_Card_Game/DND_Spell_Cards_online/frontend - Copy/src/App.js"],"sourcesContent":["// dnd-spell-cards-app/frontend/src/App.js\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique keys for deck card instances\r\n\r\n// IMPORTANT: Update this to your VM's Public IP address (or domain name if configured)\r\nconst API_BASE_URL = 'http://193.122.147.91:5000/api';\r\n\r\n// Inline CSS for self-contained component\r\nconst AppStyles = `\r\n    /* Import Google Fonts for a D&D feel */\r\n    @import url('https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&family=Merriweather:wght@400;700&display=swap');\r\n\r\n    body {\r\n        background-color: #3b2f2f; /* Dark brown background, like a closed grimoire */\r\n        font-family: 'Merriweather', serif; /* Readable serif for body text */\r\n        color: #5a4b4b; /* Darker, faded text */\r\n        margin: 0;\r\n        padding: 0;\r\n        line-height: 1.6;\r\n    }\r\n\r\n    .App {\r\n        display: flex;\r\n        flex-direction: column;\r\n        min-height: 100vh;\r\n        align-items: center;\r\n        padding: 1.5rem; /* Increased padding */\r\n        box-sizing: border-box;\r\n        /* --- NEW WOODEN FLOOR TEXTURE --- */\r\n        background-image: url('/images/wooden-floor.jpg'); \r\n        background-size: cover;\r\n        background-position: center; /* Center the background image */\r\n        background-attachment: fixed;\r\n        border: 10px solid #4a3e3c; /* Thick, dark border for the \"book\" effect */\r\n        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5); /* Deep shadow for depth */\r\n        margin: 1rem; /* Margin to show body background */\r\n        border-radius: 1rem; /* Slightly rounded edges for the book */\r\n    }\r\n\r\n    .app-title {\r\n        font-family: 'Cinzel', serif; /* Ornate font for title */\r\n        color: #8c6e4e; /* Gold/parchment color */\r\n        text-align: center;\r\n        margin-bottom: 2rem;\r\n        font-size: 3.2rem; /* Larger title */\r\n        font-weight: 700;\r\n        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6); /* Text shadow for depth */\r\n    }\r\n\r\n    .login-container, .stats-container {\r\n        background: #6a5d5a; /* Muted stone/dark wood color */\r\n        color: #f5f5dc; /* Off-white for readability */\r\n        padding: 1.8rem; /* More padding */\r\n        margin-bottom: 2rem;\r\n        border-radius: 0.8rem;\r\n        box-shadow: inset 0 2px 8px rgba(0, 0, 0, 0.4), 0 4px 15px rgba(0, 0, 0, 0.3); /* Inset shadow for carved look */\r\n        display: flex;\r\n        gap: 1.2rem;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-wrap: wrap;\r\n        width: 100%;\r\n        max-width: 1000px; /* Slightly narrower */\r\n        border: 2px solid #4a3e3c; /* Matching dark border */\r\n    }\r\n\r\n    .login-container input {\r\n        padding: 0.8rem 1rem;\r\n        border-radius: 0.5rem;\r\n        border: 1px solid #8c6e4e; /* Goldish border */\r\n        background: #e9dcc9; /* Parchment background */\r\n        color: #3b2f2f; /* Dark text */\r\n        font-family: 'Merriweather', serif;\r\n        font-size: 1.1rem;\r\n        flex-grow: 1;\r\n        max-width: 200px;\r\n    }\r\n\r\n    .login-container button, .use-button, .reset-button, .remove-button, .select-button, .booster-button {\r\n        background-color: #8c6e4e; /* Gold/bronze button */\r\n        color: #f5f5dc; /* Off-white text */\r\n        padding: 0.8rem 1.5rem;\r\n        border: 2px solid #5a4b4b; /* Darker edge */\r\n        border-radius: 0.5rem;\r\n        cursor: pointer;\r\n        font-weight: bold;\r\n        transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;\r\n        white-space: nowrap;\r\n        font-family: 'Cinzel', serif; /* Thematic button font */\r\n        text-transform: uppercase;\r\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\r\n    }\r\n\r\n    .login-container button:hover, .select-button:hover:not(:disabled), .booster-button:hover:not(:disabled) {\r\n        background-color: #a38b6d; /* Lighter gold on hover */\r\n        transform: translateY(-3px); /* More pronounced lift */\r\n        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4);\r\n    }\r\n\r\n    .select-button:disabled, .use-button:disabled, .booster-button:disabled {\r\n        background-color: #5a4b4b; /* Muted disabled color */\r\n        color: #a0a0a0;\r\n        cursor: not-allowed;\r\n        transform: none;\r\n        box-shadow: none;\r\n    }\r\n\r\n    .stats-container {\r\n        background: #5a4b4b; /* Darker tone for stats */\r\n        color: #f5f5dc;\r\n        padding: 1.8rem;\r\n    }\r\n\r\n    .stats-container label {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 0.6rem;\r\n        font-weight: 700;\r\n        font-family: 'Cinzel', serif;\r\n    }\r\n\r\n    .stats-container input {\r\n        width: 5rem; /* Wider input */\r\n        padding: 0.4rem;\r\n        border-radius: 0.4rem;\r\n        border: 1px solid #8c6e4e;\r\n        background: #e9dcc9;\r\n        color: #3b2f2f;\r\n        text-align: center;\r\n        font-family: 'Merriweather', serif;\r\n    }\r\n\r\n    .stats-container p {\r\n        margin: 0;\r\n        padding: 0;\r\n        font-size: 1.1rem;\r\n        font-weight: 700;\r\n    }\r\n\r\n    .message-box {\r\n        position: fixed;\r\n        top: 2rem; /* Lowered position */\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        padding: 0.9rem 1.8rem;\r\n        border-radius: 0.6rem;\r\n        font-weight: bold;\r\n        z-index: 1000;\r\n        animation: fadein 0.5s, fadeout 0.5s 4.5s; /* Longer display */\r\n        text-align: center;\r\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);\r\n        font-family: 'Cinzel', serif;\r\n        text-transform: uppercase;\r\n    }\r\n\r\n    .message-box.success {\r\n        background-color: #488c5d; /* Darker green */\r\n        color: white;\r\n    }\r\n\r\n    .message-box.error {\r\n        background-color: #a33b3b; /* Darker red */\r\n        color: white;\r\n    }\r\n\r\n    .message-box.info {\r\n        background-color: #6a5d5a;\r\n        color: #f5f5dc;\r\n    }\r\n\r\n    @keyframes fadein {\r\n        from { opacity: 0; transform: translateX(-50%) translateY(-20px); }\r\n        to   { opacity: 1; transform: translateX(-50%) translateY(0); }\r\n    }\r\n\r\n    @keyframes fadeout {\r\n        from { opacity: 1; transform: translateX(-50%) translateY(0); }\r\n        to   { opacity: 0; transform: translateX(-50%) translateY(-20px); }\r\n    }\r\n\r\n    .tab-navigation {\r\n        display: flex;\r\n        justify-content: center;\r\n        width: 100%;\r\n        max-width: 1000px;\r\n        margin-bottom: 2rem;\r\n        background-color: #5a4b4b; /* Darker tab background */\r\n        border-radius: 0.8rem;\r\n        box-shadow: inset 0 2px 8px rgba(0, 0, 0, 0.4);\r\n        overflow: hidden;\r\n        border: 2px solid #4a3e3c;\r\n    }\r\n\r\n    .tab-item {\r\n        flex: 1;\r\n        text-align: center;\r\n        padding: 1.2rem 1.8rem; /* More generous padding */\r\n        cursor: pointer;\r\n        font-weight: bold;\r\n        color: #e9dcc9; /* Parchment text */\r\n        background-color: #5a4b4b;\r\n        transition: background-color 0.3s ease, color 0.3s ease;\r\n        border-bottom: 4px solid transparent; /* Thicker active indicator */\r\n        font-family: 'Cinzel', serif;\r\n        text-transform: uppercase;\r\n    }\r\n\r\n    .tab-item:hover:not(.active) {\r\n        background-color: #6a5d5a; /* Slightly lighter on hover */\r\n    }\r\n\r\n    .tab-item.active {\r\n        background-color: #8c6e4e; /* Gold active tab */\r\n        color: white;\r\n        border-bottom-color: #a38b6d; /* Lighter gold accent */\r\n    }\r\n\r\n    .main-content {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        gap: 2rem; /* Increased gap */\r\n        width: 100%;\r\n        max-width: 1000px;\r\n        flex: 1;\r\n    }\r\n\r\n    .card-collection-panel, .built-deck-panel {\r\n        background: #e9dcc9; /* Parchment background for panels */\r\n        border-radius: 0.8rem;\r\n        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);\r\n        padding: 2rem; /* More padding */\r\n        flex: 1;\r\n        min-width: 320px; /* Slightly larger min-width */\r\n        display: flex;\r\n        flex-direction: column;\r\n        border: 2px solid #8c6e4e; /* Gold border */\r\n    }\r\n\r\n    .panel-title {\r\n        font-family: 'Cinzel', serif;\r\n        text-align: center;\r\n        color: #3b2f2f; /* Dark text for title */\r\n        margin-top: 0;\r\n        margin-bottom: 2rem;\r\n        font-size: 2.2rem; /* Larger panel title */\r\n        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);\r\n    }\r\n\r\n    .card-list, .deck-list {\r\n        display: grid;\r\n        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr)); /* Larger cards */\r\n        gap: 1.5rem; /* Increased gap */\r\n        flex-grow: 1;\r\n    }\r\n\r\n    .card-item {\r\n        background: #fdf6e6; /* Lighter parchment for individual cards */\r\n        border: 1px solid #d3c4a2; /* Faded parchment border */\r\n        border-radius: 0.6rem;\r\n        padding: 1.2rem;\r\n        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\r\n        transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n        display: flex;\r\n        flex-direction: column;\r\n        text-align: center;\r\n        font-family: 'Merriweather', serif;\r\n    }\r\n\r\n    .card-item:hover.available-card {\r\n        transform: translateY(-7px); /* More dramatic lift */\r\n        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.25);\r\n        cursor: pointer;\r\n    }\r\n\r\n    .card-item.deck-card {\r\n        background: #e9dcc9; /* Muted parchment for deck cards */\r\n        border: 1px solid #8c6e4e; /* Goldish border for deck cards */\r\n    }\r\n\r\n    .card-image {\r\n        max-width: 100%;\r\n        height: auto;\r\n        border-radius: 0.4rem;\r\n        margin-bottom: 1rem;\r\n        border: 1px solid #8c6e4e; /* Gold frame for image */\r\n    }\r\n\r\n    .card-name {\r\n        font-family: 'Cinzel', serif;\r\n        font-weight: 700;\r\n        font-size: 1.25rem;\r\n        color: #3b2f2f;\r\n        margin-bottom: 0.6rem;\r\n    }\r\n\r\n    .card-type {\r\n        font-style: italic;\r\n        color: #5a4b4b;\r\n        margin-bottom: 0.7rem;\r\n        font-size: 0.95rem;\r\n    }\r\n\r\n    .card-description {\r\n        font-size: 0.9rem;\r\n        color: #4a3e3c;\r\n        flex-grow: 1;\r\n        margin-bottom: 1rem;\r\n    }\r\n\r\n    .card-meta, .card-uses {\r\n        font-size: 0.85rem;\r\n        color: #5a4b4b;\r\n        margin-bottom: 0.6rem;\r\n    }\r\n    \r\n    .card-meta span {\r\n        font-weight: bold;\r\n        color: #3b2f2f;\r\n    }\r\n\r\n    .card-actions {\r\n        margin-top: 1rem;\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        gap: 0.6rem;\r\n        justify-content: center;\r\n    }\r\n\r\n    .use-button {\r\n        background-color: #4a6d8c; /* Muted blue for use */\r\n        color: white;\r\n    }\r\n    .use-button:hover:not(:disabled) {\r\n        background-color: #3a5c78;\r\n        transform: translateY(-2px);\r\n    }\r\n\r\n    .reset-button {\r\n        background-color: #5a8c4a; /* Muted green for reset */\r\n        color: white;\r\n    }\r\n    .reset-button:hover {\r\n        background-color: #4a783a;\r\n        transform: translateY(-2px);\r\n    }\r\n\r\n    .remove-button {\r\n        background-color: #8c4a4a; /* Muted red for remove */\r\n        color: white;\r\n    }\r\n    .remove-button:hover {\r\n        background-color: #783a3a;\r\n        transform: translateY(-2px);\r\n    }\r\n\r\n    .empty-message, .pre-login-message {\r\n        text-align: center;\r\n        padding: 2.5rem;\r\n        background: #d3c4a2; /* Lighter parchment */\r\n        border-radius: 0.8rem;\r\n        color: #5a4b4b;\r\n        font-style: italic;\r\n        margin: 1.5rem;\r\n        border: 1px solid #8c6e4e;\r\n        box-shadow: inset 0 1px 5px rgba(0, 0, 0, 0.2);\r\n    }\r\n\r\n    .error-message {\r\n        color: #a33b3b;\r\n        background-color: #fce2e2;\r\n        border: 1px solid #a33b3b;\r\n        padding: 0.8rem;\r\n        border-radius: 0.6rem;\r\n        text-align: center;\r\n        margin-top: 1.5rem;\r\n        font-weight: bold;\r\n        font-family: 'Merriweather', serif;\r\n    }\r\n\r\n    .highlight {\r\n        color: #4a6d8c; /* Muted blue highlight */\r\n        font-weight: bold;\r\n    }\r\n\r\n    .booster-pack-section {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        margin-top: 2rem;\r\n        padding-top: 2rem;\r\n        border-top: 1px dashed #8c6e4e; /* Dashed gold separator */\r\n        width: 100%;\r\n    }\r\n\r\n    .booster-pack-section button {\r\n        margin-top: 1.5rem;\r\n    }\r\n\r\n    .new-cards-display {\r\n        margin-top: 1.5rem;\r\n        padding: 1.5rem;\r\n        background: #d3c4a2;\r\n        border-radius: 0.6rem;\r\n        text-align: center;\r\n        width: 100%;\r\n        max-width: 450px;\r\n        border: 1px solid #8c6e4e;\r\n        box-shadow: inset 0 1px 5px rgba(0, 0, 0, 0.2);\r\n        font-family: 'Merriweather', serif;\r\n    }\r\n    .new-cards-display h4 {\r\n        font-family: 'Cinzel', serif;\r\n        color: #3b2f2f;\r\n        margin-bottom: 0.8rem;\r\n        font-size: 1.2rem;\r\n    }\r\n    .new-cards-display ul {\r\n        list-style-type: none;\r\n        padding: 0;\r\n        margin: 0;\r\n    }\r\n    .new-cards-display li {\r\n        margin-bottom: 0.3rem;\r\n        color: #4a3e3c;\r\n        font-size: 0.95rem;\r\n    }\r\n\r\n    /* Responsive Adjustments */\r\n    @media (max-width: 768px) {\r\n        .App {\r\n            padding: 1rem;\r\n            margin: 0.5rem;\r\n        }\r\n        .app-title {\r\n            font-size: 2.5rem;\r\n        }\r\n        .main-content {\r\n            flex-direction: column;\r\n            gap: 1.5rem;\r\n        }\r\n        .login-container, .stats-container, .tab-navigation, .booster-controls {\r\n            flex-direction: column;\r\n            align-items: stretch;\r\n            gap: 0.8rem;\r\n            padding: 1.2rem;\r\n        }\r\n        .login-container input {\r\n            max-width: 100%;\r\n        }\r\n        .tab-item {\r\n            border-bottom: none;\r\n            border-right: 4px solid transparent;\r\n            padding: 1rem;\r\n        }\r\n        .tab-item.active {\r\n            border-bottom-color: transparent;\r\n            border-right-color: #a38b6d;\r\n        }\r\n        .panel-title {\r\n            font-size: 1.8rem;\r\n        }\r\n        .card-list, .deck-list {\r\n            grid-template-columns: 1fr;\r\n            gap: 1.2rem;\r\n        }\r\n        .card-item {\r\n            padding: 1rem;\r\n        }\r\n    }\r\n\r\n    @media (max-width: 480px) {\r\n        .app-title {\r\n            font-size: 2rem;\r\n        }\r\n        .panel-title {\r\n            font-size: 1.5rem;\r\n        }\r\n        .login-container button, .use-button, .reset-button, .remove-button, .select-button, .booster-button {\r\n            width: 100%;\r\n            padding: 0.6rem 1rem;\r\n        }\r\n    }\r\n`;\r\n\r\nfunction App() {\r\n    // --- State Variables ---\r\n    const [allCards, setAllCards] = useState([]); // All cards fetched from the backend (master list)\r\n    const [characterLevel, setCharacterLevel] = useState(1);\r\n    const [wisMod, setWisMod] = useState(0);\r\n    const [intMod, setIntMod] = useState(0);\r\n    const [chaMod, setChaMod] = useState(0);\r\n    const [maxDeckSize, setMaxDeckSize] = useState(0);\r\n    const [activeDeckInstances, setActiveDeckInstances] = useState([]); // Cards currently in the player's ACTIVE deck (persistent instances)\r\n    const [unlockedCollectionIds, setUnlockedCollectionIds] = useState([]); // IDs of all UNIQUE card types the player HAS UNLOCKED (owned pool)\r\n    const [error, setError] = useState(''); // General error messages for UI\r\n\r\n    // New states for login/auth\r\n    const [playerId, setPlayerId] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [message, setMessage] = useState({ text: '', type: '' });\r\n    const [loading, setLoading] = useState(true); // Loading state for initial data fetch of allCards\r\n\r\n    // New state for tab management\r\n    const [activeTab, setActiveTab] = useState('available'); // 'available' or 'deck'\r\n\r\n    // State for newly acquired cards from booster packs\r\n    const [newlyAcquiredCards, setNewlyAcquiredCards] = useState([]);\r\n    const [lastOpenedPackType, setLastOpenedPackType] = useState('');\r\n    const [prePackUnlockedIds, setPrePackUnlockedIds] = useState([]); // Store state before opening pack for duplicate check\r\n\r\n\r\n    // --- Helper function to display messages ---\r\n    const showMessage = useCallback((text, type) => {\r\n        setMessage({ text, type });\r\n        // Clear message after 5 seconds for info, 3 seconds for others\r\n        const duration = type === 'info' ? 5000 : 3000;\r\n        setTimeout(() => setMessage({ text: '', type: '' }), duration);\r\n    }, []);\r\n\r\n    // --- API Call: Create Account ---\r\n    const handleCreateAccount = async () => {\r\n        if (!playerId || !password) {\r\n            showMessage('Player ID and password are required to create an account.', 'error');\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/deck/create`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ player_id: playerId, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Failed to create account.');\r\n            }\r\n            \r\n            showMessage('Account created successfully! You can now log in.', 'success');\r\n        } catch (err) {\r\n            console.error('Error creating account:', err);\r\n            showMessage(`Failed to create account: ${err.message}`, 'error');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // --- API Call: Login and Load Deck ---\r\n    const handleLoginAndLoadDeck = async () => {\r\n        if (!playerId || !password) {\r\n            showMessage('Player ID and password are required to log in.', 'error');\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/deck/login`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ player_id: playerId, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Authentication failed.');\r\n            }\r\n\r\n            // Load data from backend upon successful login\r\n            setActiveDeckInstances(data.active_deck_instances || []); // Load active deck instances\r\n            setUnlockedCollectionIds(data.unlocked_collection_ids || []); // Load unlocked card IDs (now includes duplicates)\r\n            setCharacterLevel(data.character_level !== undefined ? data.character_level : 1);\r\n            setWisMod(data.wis_mod !== undefined ? data.wis_mod : 0);\r\n            setIntMod(data.int_mod !== undefined ? data.int_mod : 0);\r\n            setChaMod(data.cha_mod !== undefined ? data.cha_mod : 0);\r\n            setIsAuthenticated(true);\r\n            setActiveTab('deck'); // Automatically switch to the deck tab after login\r\n\r\n            showMessage('Login successful! Deck and unlocked cards loaded.', 'success');\r\n        } catch (err) {\r\n            setIsAuthenticated(false);\r\n            console.error('Error logging in:', err);\r\n            showMessage(`Failed to load deck: ${err.message}`, 'error');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // --- API Call: Save Deck ---\r\n    const handleSaveDeck = async () => {\r\n        if (!isAuthenticated) {\r\n            showMessage('You must be logged in to save your deck.', 'error');\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/deck/save`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    player_id: playerId,\r\n                    password: password, // Send password for re-validation on backend\r\n                    active_deck_instances: activeDeckInstances, // Save active deck instances\r\n                    unlocked_collection_ids: unlockedCollectionIds, // Save unlocked card IDs (now includes duplicates)\r\n                    character_level: characterLevel,\r\n                    wis_mod: wisMod,\r\n                    int_mod: intMod,\r\n                    cha_mod: chaMod,\r\n                }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Failed to save deck.');\r\n            }\r\n\r\n            showMessage('Deck and unlocked cards saved successfully!', 'success');\r\n        } catch (err) {\r\n            console.error('Error saving deck:', err);\r\n            showMessage(`Failed to save deck: ${err.message}`, 'error');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // --- Effect to Fetch All Cards on Component Mount ---\r\n    useEffect(() => {\r\n        const fetchAllCards = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const cardsResponse = await fetch(`${API_BASE_URL}/cards`);\r\n                if (!cardsResponse.ok) {\r\n                    throw new Error(`HTTP error fetching cards! status: ${cardsResponse.status}`);\r\n                }\r\n                const cardsData = await cardsResponse.json();\r\n                setAllCards(cardsData);\r\n            } catch (err) {\r\n                console.error('Error fetching initial data:', err);\r\n                showMessage('Failed to fetch initial data: ' + err.message, 'error');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchAllCards();\r\n    }, [showMessage]); // Empty dependency array, this effect runs only once on mount\r\n\r\n    // --- Effect to Calculate Max Deck Size when Character Stats Change ---\r\n    useEffect(() => {\r\n        const calculateDeckSize = async () => {\r\n            setError(''); // Clear previous errors related to deck size\r\n            try {\r\n                const response = await fetch(`${API_BASE_URL}/calculate_deck_size`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        character_level: characterLevel,\r\n                        wis_mod: wisMod,\r\n                        int_mod: intMod,\r\n                        cha_mod: chaMod,\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n                setMaxDeckSize(data.max_deck_size);\r\n            } catch (err) {\r\n                setError('Failed to calculate deck size: ' + err.message);\r\n                console.error('Error calculating deck size:', err);\r\n            }\r\n        };\r\n\r\n        if (!isNaN(characterLevel) && !isNaN(wisMod) && !isNaN(intMod) && !isNaN(chaMod)) {\r\n            calculateDeckSize();\r\n        }\r\n    }, [characterLevel, wisMod, intMod, chaMod]);\r\n\r\n    // --- Booster Pack Logic: Open a new pack ---\r\n    const handleOpenBoosterPack = async () => {\r\n        if (!isAuthenticated) {\r\n            showMessage(\"You must be logged in to open booster packs.\", \"error\");\r\n            return;\r\n        }\r\n        setLoading(true); // Indicate loading while opening pack\r\n        setNewlyAcquiredCards([]); // Clear previous new cards display\r\n        setLastOpenedPackType('');\r\n        setPrePackUnlockedIds(unlockedCollectionIds); // Store current collection for duplicate check\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/deck/open_booster`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ player_id: playerId, password: password }), // Backend determines pack size\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Failed to open booster pack.');\r\n            }\r\n\r\n            setLastOpenedPackType(data.pack_type);\r\n\r\n            if (data.new_cards && data.new_cards.length > 0) {\r\n                // Update the unlockedCollectionIds state with the new IDs (now including duplicates)\r\n                setUnlockedCollectionIds(data.updated_unlocked_collection_ids || []);\r\n                setNewlyAcquiredCards(data.new_cards); // Store new cards for display\r\n                showMessage(`You opened a ${data.pack_type} and acquired ${data.new_cards.length} cards!`, 'success');\r\n            } else {\r\n                showMessage(data.message || \"No new cards were found in the booster pack.\", 'info');\r\n            }\r\n        } catch (err) {\r\n            console.error('Error opening booster pack:', err);\r\n            showMessage(`Failed to open booster pack: ${err.message}`, 'error');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n\r\n    // --- Deck Building Logic: Add Card ---\r\n    const handleAddCardToDeck = useCallback((card) => {\r\n        if (!isAuthenticated) {\r\n            showMessage(\"You must be logged in to build a deck.\", \"error\");\r\n            return;\r\n        }\r\n        if (activeDeckInstances.length >= maxDeckSize) {\r\n            showMessage('Deck is full! Remove cards to add new ones.', 'error');\r\n            return;\r\n        }\r\n        \r\n        // --- FIX: Count available copies vs. copies in active deck ---\r\n        const ownedCopiesOfThisCard = unlockedCollectionIds.filter(id => id === card.id).length;\r\n        const copiesInActiveDeck = activeDeckInstances.filter(c => c.id === card.id).length;\r\n\r\n        if (copiesInActiveDeck >= ownedCopiesOfThisCard) {\r\n            showMessage(`You have already added all owned copies of ${card.name} to your deck. Open more booster packs to get more!`, 'error');\r\n            return;\r\n        }\r\n\r\n        const cantripCountInDeck = activeDeckInstances.filter(c => c.type === 'Cantrip').length;\r\n        if (card.type !== 'Cantrip' && cantripCountInDeck === 0 && activeDeckInstances.length === 0) {\r\n             showMessage('Your deck must contain at least one Cantrip! Add a Cantrip first.', 'error');\r\n             return;\r\n        }\r\n\r\n        // Add a new instance of the card to the active deck\r\n        setActiveDeckInstances(prev => [...prev, {\r\n            ...card,\r\n            instance_id: uuidv4(), // Assign a unique ID for this specific copy in the active deck\r\n            current_uses: card.default_uses_per_rest\r\n        }]);\r\n        showMessage('Card added to your deck!', 'success');\r\n    }, [isAuthenticated, maxDeckSize, activeDeckInstances, unlockedCollectionIds, showMessage]);\r\n\r\n    // --- Deck Building Logic: Remove Card ---\r\n    const handleRemoveCardFromDeck = useCallback((instance_id) => {\r\n        const updatedDeck = activeDeckInstances.filter(card => card.instance_id !== instance_id);\r\n        const cantripCount = updatedDeck.filter(c => c.type === 'Cantrip').length;\r\n\r\n        if (cantripCount === 0 && updatedDeck.length > 0) {\r\n            showMessage('Your deck must contain at least one Cantrip! You cannot remove the last one.', 'error');\r\n            return;\r\n        }\r\n        setActiveDeckInstances(updatedDeck);\r\n        showMessage('Card removed from deck.', 'success');\r\n    }, [activeDeckInstances, showMessage]);\r\n\r\n    // --- Card Usage Logic: Mark Card as Used ---\r\n    const handleMarkCardUsed = useCallback(async (instance_id) => {\r\n        const cardToUse = activeDeckInstances.find(card => card.instance_id === instance_id);\r\n        if (!cardToUse) return;\r\n\r\n        if (cardToUse.current_uses > 0) {\r\n            setActiveDeckInstances(prev =>\r\n                prev.map(card =>\r\n                    card.instance_id === instance_id ? { ...card, current_uses: card.current_uses - 1 } : card\r\n                )\r\n            );\r\n\r\n            // Notify backend about the card usage for logging purposes.\r\n            try {\r\n                const response = await fetch(`${API_BASE_URL}/card_used`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        name: cardToUse.name, // Use 'name' to match backend's 'card_name' expectation\r\n                        type: cardToUse.type, // Use 'type' to match backend's 'card_type' expectation\r\n                        deck_card_id: cardToUse.instance_id\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n                console.log('Backend notification:', data.message);\r\n                console.log('Simulated System Log Entry from Backend:', data.log_entry);\r\n            } catch (err) {\r\n                showMessage('Failed to notify backend of card usage for logging: ' + err.message, 'error');\r\n                console.error('Error sending card used notification:', err);\r\n            }\r\n        } else {\r\n            showMessage(`\"${cardToUse.name}\" has no uses left! It needs a long rest.`, 'error');\r\n        }\r\n    }, [activeDeckInstances, showMessage]);\r\n\r\n    // --- Card Usage Logic: Reset Card Uses (Long Rest) ---\r\n    const handleResetCardUses = useCallback((instance_id) => {\r\n        setActiveDeckInstances(prev =>\r\n            prev.map(card =>\r\n                card.instance_id === instance_id ? { ...card, current_uses: card.default_uses_per_rest } : card\r\n            )\r\n        );\r\n        showMessage('Card uses reset!', 'success');\r\n    }, [showMessage]);\r\n\r\n    // Filter available cards based on what the player has unlocked\r\n    // And also count how many copies of each unique card ID the player owns\r\n    const filteredAvailableCardsWithCounts = allCards\r\n        .filter(card => unlockedCollectionIds.includes(card.id)) // Only show cards of types user has unlocked\r\n        .reduce((acc, card) => {\r\n            // Group by card ID and count occurrences\r\n            if (!acc[card.id]) {\r\n                const count = unlockedCollectionIds.filter(id => id === card.id).length;\r\n                acc[card.id] = { ...card, owned_copies: count };\r\n            }\r\n            return acc;\r\n        }, {});\r\n    \r\n    const uniqueUnlockedCards = Object.values(filteredAvailableCardsWithCounts);\r\n\r\n\r\n    // --- Main Component Render ---\r\n    return (\r\n        <>\r\n            <style>{AppStyles}</style>\r\n            <div className=\"App\">\r\n                <h1 className=\"app-title\">Spell Trading Cards Manager</h1>\r\n\r\n                {/* Login/Auth Section */}\r\n                <div className=\"login-container\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Player ID\"\r\n                        value={playerId}\r\n                        onChange={(e) => setPlayerId(e.target.value)}\r\n                        disabled={loading}\r\n                    />\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        disabled={loading}\r\n                    />\r\n                    <button onClick={handleLoginAndLoadDeck} disabled={loading}>Log In</button>\r\n                    <button onClick={handleCreateAccount} disabled={loading}>Create Account</button>\r\n                    {isAuthenticated && <button onClick={handleSaveDeck} disabled={loading}>Save Deck</button>}\r\n                </div>\r\n\r\n                {/* Character Stats Input Panel */}\r\n                <div className=\"stats-container\">\r\n                    <label>Level: <input type=\"number\" value={characterLevel} onChange={(e) => setCharacterLevel(Math.max(1, parseInt(e.target.value) || 1))} min=\"1\" max=\"20\" /></label>\r\n                    <label>WIS Mod: <input type=\"number\" value={wisMod} onChange={(e) => setWisMod(parseInt(e.target.value) || 0)} /></label>\r\n                    <label>INT Mod: <input type=\"number\" value={intMod} onChange={(e) => setIntMod(parseInt(e.target.value) || 0)} /></label>\r\n                    <label>CHA Mod: <input type=\"number\" value={chaMod} onChange={(e) => setChaMod(parseInt(e.target.value) || 0)} /></label>\r\n                    <p>Max Deck Size: <span className=\"highlight\">{maxDeckSize}</span></p>\r\n                </div>\r\n\r\n                {/* Message Box */}\r\n                {message.text && <div className={`message-box ${message.type}`}>{message.text}</div>}\r\n\r\n                {/* Tab Navigation */}\r\n                <div className=\"tab-navigation\">\r\n                    <div \r\n                        className={`tab-item ${activeTab === 'available' ? 'active' : ''}`} \r\n                        onClick={() => setActiveTab('available')}\r\n                    >\r\n                        Available Spells ({uniqueUnlockedCards.length} Types / {unlockedCollectionIds.length} Total Owned)\r\n                    </div>\r\n                    <div \r\n                        className={`tab-item ${activeTab === 'deck' ? 'active' : ''}`} \r\n                        onClick={() => setActiveTab('deck')}\r\n                    >\r\n                        Your Deck ({activeDeckInstances.length}/{maxDeckSize})\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Main Content Area - Conditional Rendering based on activeTab */}\r\n                <div className=\"main-content\">\r\n                    {/* Available Cards Section */}\r\n                    {activeTab === 'available' && (\r\n                        <div className=\"card-collection-panel\">\r\n                            <h2 className=\"panel-title\">Available Spells</h2>\r\n                            {loading && <p className=\"empty-message\">Loading cards...</p>}\r\n                            {!isAuthenticated && !loading && (\r\n                                <div className=\"pre-login-message\">\r\n                                    <h3>Log in to see your available spells.</h3>\r\n                                </div>\r\n                            )}\r\n                            {isAuthenticated && !loading && uniqueUnlockedCards.length > 0 && (\r\n                                <div className=\"card-list\">\r\n                                    {uniqueUnlockedCards.map((card) => (\r\n                                        <div key={card.id} className=\"card-item available-card\" onClick={() => handleAddCardToDeck(card)}>\r\n                                            <img\r\n                                                src={`https://placehold.co/100x150/a8dadc/ffffff?text=${card.name.split('.')[0].replace('_', '%20')}`}\r\n                                                alt={card.name}\r\n                                                className=\"card-image\"\r\n                                                onError={(e) => { e.target.onerror = null; e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\"; }}\r\n                                            />\r\n                                            <h3 className=\"card-name\">{card.name} ({card.type})</h3>\r\n                                            <p className=\"card-description\">{card.description}</p>\r\n                                            <p className=\"card-meta\">Rarity: <span>{card.rarity}</span></p>\r\n                                            <p className=\"card-meta\">Owned Copies: <span>{card.owned_copies}</span></p>\r\n                                            <button\r\n                                                onClick={(e) => { e.stopPropagation(); handleAddCardToDeck(card); }} // Stop propagation to prevent parent onClick\r\n                                                // Disable button if deck is full OR if all owned copies are already in the deck\r\n                                                disabled={activeDeckInstances.length >= maxDeckSize || \r\n                                                            activeDeckInstances.filter(c => c.id === card.id).length >= card.owned_copies}\r\n                                                className=\"select-button\"\r\n                                            >\r\n                                                Add to Deck\r\n                                            </button>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n\r\n                            {isAuthenticated && !loading && (\r\n                                <div className=\"booster-pack-section\">\r\n                                    {uniqueUnlockedCards.length === 0 && (\r\n                                        <p className=\"empty-message\">You haven't unlocked any unique spell types yet! Open a booster pack to get started.</p>\r\n                                    )}\r\n                                    <button \r\n                                        onClick={handleOpenBoosterPack} \r\n                                        disabled={loading}\r\n                                        className=\"booster-button\"\r\n                                    >\r\n                                        Open Booster Pack\r\n                                    </button>\r\n                                    {newlyAcquiredCards.length > 0 && (\r\n                                        <div className=\"new-cards-display\">\r\n                                            <h4>Newly Acquired Cards from {lastOpenedPackType}:</h4>\r\n                                            <ul>\r\n                                                {newlyAcquiredCards.map((card, index) => (\r\n                                                    <li key={card.id + \"-new-\" + index}> {/* Use unique key for each new card */}\r\n                                                        {card.name} ({card.type}, {card.rarity})\r\n                                                        {prePackUnlockedIds.includes(card.id) && <span> (Duplicate)</span>}\r\n                                                    </li>\r\n                                                ))}\r\n                                            </ul>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Built Deck Section */}\r\n                    {activeTab === 'deck' && (\r\n                        <div className=\"built-deck-panel\">\r\n                            <h2 className=\"panel-title\">Your Deck ({activeDeckInstances.length}/{maxDeckSize})</h2>\r\n                            <div className=\"deck-list\">\r\n                                {isAuthenticated ? (\r\n                                    activeDeckInstances.length === 0 ? (\r\n                                        <p className=\"empty-message\">Select cards from the \"Available Spells\" tab to build your deck!</p>\r\n                                    ) : (\r\n                                        activeDeckInstances.map((card) => (\r\n                                            <div key={card.instance_id} className=\"card-item deck-card\">\r\n                                                <img\r\n                                                    src={`https://placehold.co/100x150/a8dadc/ffffff?text=${card.name.split('.')[0].replace('_', '%20')}`}\r\n                                                    alt={card.name}\r\n                                                    className=\"card-image\"\r\n                                                    onError={(e) => { e.target.onerror = null; e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\"; }}\r\n                                                />\r\n                                                <h3 className=\"card-name\">{card.name} ({card.type})</h3>\r\n                                                <p className=\"card-description\">{card.description}</p>\r\n                                                <p className=\"card-meta\">Rarity: <span>{card.rarity}</span></p>\r\n                                                <p className=\"card-uses\">Uses Left: {card.current_uses}/{card.default_uses_per_rest}</p>\r\n                                                <div className=\"card-actions\">\r\n                                                    <button\r\n                                                        onClick={() => handleMarkCardUsed(card.instance_id)}\r\n                                                        disabled={card.current_uses <= 0}\r\n                                                        className=\"use-button\"\r\n                                                    >\r\n                                                        Use\r\n                                                    </button>\r\n                                                    <button\r\n                                                        onClick={() => handleResetCardUses(card.instance_id)}\r\n                                                        className=\"reset-button\"\r\n                                                    >\r\n                                                        Reset Uses\r\n                                                    </button>\r\n                                                    <button\r\n                                                        onClick={() => handleRemoveCardFromDeck(card.instance_id)}\r\n                                                        className=\"remove-button\"\r\n                                                    >\r\n                                                        Remove\r\n                                                    </button>\r\n                                                </div>\r\n                                            </div>\r\n                                        ))\r\n                                    )\r\n                                ) : (\r\n                                    <div className=\"pre-login-message\">\r\n                                        <h3>Please log in to load your character and spell deck.</h3>\r\n                                        <p>Once logged in, your deck and stats will appear here.</p>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}