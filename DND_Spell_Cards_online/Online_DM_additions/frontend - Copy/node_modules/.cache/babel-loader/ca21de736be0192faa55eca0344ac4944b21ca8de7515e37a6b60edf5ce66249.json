{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aaron\\\\DND_Spell_Cards\\\\Spell_Card_Game\\\\DND_Spell_Cards_online\\\\frontend - Copy\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// dnd-spell-cards-app/frontend/src/App.js\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique keys for deck card instances\n\n// IMPORTANT: Update this to your VM's Public IP address (or domain name if configured)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://193.122.147.91:5000/api';\n\n// Inline CSS for self-contained component\nconst AppStyles = `\n    body {\n        background-color: #f0e6d2;\n        font-family: 'Inter', sans-serif;\n        color: #333;\n        margin: 0;\n        padding: 0;\n        line-height: 1.6;\n    }\n\n    .App {\n        display: flex;\n        flex-direction: column;\n        min-height: 100vh;\n        align-items: center;\n        padding: 1rem;\n        box-sizing: border-box;\n    }\n\n    .app-title {\n        color: #2d3748;\n        text-align: center;\n        margin-bottom: 1.5rem;\n        font-size: 2.5rem;\n        font-weight: 700;\n    }\n\n    .login-container, .stats-container {\n        background: #4a5568; /* Dark gray for a solid background */\n        color: #e2e8f0; /* Light gray text */\n        padding: 1.5rem;\n        margin-bottom: 1.5rem;\n        border-radius: 0.75rem;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n        display: flex;\n        gap: 1rem;\n        align-items: center;\n        justify-content: center;\n        flex-wrap: wrap;\n        width: 100%;\n        max-width: 1200px;\n    }\n\n    .login-container input {\n        padding: 0.6rem 0.8rem;\n        border-radius: 0.5rem;\n        border: 1px solid #a0aec0;\n        background: #e2e8f0;\n        color: #2d3748;\n        font-size: 1rem;\n        flex-grow: 1;\n        max-width: 180px;\n    }\n\n    .login-container button, .use-button, .reset-button, .remove-button, .select-button {\n        background-color: #63b3ed; /* Blue button */\n        color: white;\n        padding: 0.75rem 1.25rem;\n        border: none;\n        border-radius: 0.5rem;\n        cursor: pointer;\n        font-weight: bold;\n        transition: background-color 0.3s ease, transform 0.2s ease;\n        white-space: nowrap;\n    }\n\n    .login-container button:hover, .select-button:hover:not(:disabled) {\n        background-color: #4299e1; /* Darker blue on hover */\n        transform: translateY(-2px);\n    }\n\n    .select-button:disabled, .use-button:disabled {\n        background-color: #cbd5e0;\n        cursor: not-allowed;\n        transform: none;\n    }\n\n    .stats-container {\n        background: #2d3748;\n        color: #e2e8f0;\n    }\n\n    .stats-container label {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n        font-weight: 500;\n    }\n\n    .stats-container input {\n        width: 4rem;\n        padding: 0.25rem;\n        border-radius: 0.5rem;\n        border: none;\n        background: #e2e8f0;\n        color: #2d3748;\n        text-align: center;\n    }\n\n    .stats-container p {\n        margin: 0;\n        padding: 0;\n        font-size: 1rem;\n    }\n\n    .message-box {\n        position: fixed;\n        top: 1rem;\n        left: 50%;\n        transform: translateX(-50%);\n        padding: 0.75rem 1.5rem;\n        border-radius: 0.5rem;\n        font-weight: bold;\n        z-index: 1000; /* High z-index to appear above everything */\n        animation: fadein 0.5s, fadeout 0.5s 2.5s;\n        text-align: center;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n    }\n\n    .message-box.success {\n        background-color: #48bb78; /* Green success color */\n        color: white;\n    }\n\n    .message-box.error {\n        background-color: #f56565; /* Red error color */\n        color: white;\n    }\n\n    @keyframes fadein {\n        from { opacity: 0; }\n        to   { opacity: 1; }\n    }\n\n    @keyframes fadeout {\n        from { opacity: 1; }\n        to   { opacity: 0; }\n    }\n\n    .main-content {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 1.5rem;\n        width: 100%;\n        max-width: 1200px;\n        flex: 1; /* Allows content to take up remaining space */\n    }\n\n    .card-collection-panel, .built-deck-panel {\n        background: #fdfaf5;\n        border-radius: 0.75rem;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n        padding: 1.5rem;\n        flex: 1;\n        min-width: 300px;\n        display: flex;\n        flex-direction: column;\n    }\n\n    .panel-title {\n        text-align: center;\n        color: #2c5282;\n        margin-top: 0;\n        margin-bottom: 1.5rem;\n        font-size: 1.8rem;\n    }\n\n    .card-list, .deck-list {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n        gap: 1rem;\n        flex-grow: 1;\n    }\n\n    .card-item {\n        background: #fff;\n        border: 1px solid #e2e8f0;\n        border-radius: 0.75rem;\n        padding: 1rem;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);\n        transition: transform 0.2s ease, box-shadow 0.2s ease;\n        display: flex;\n        flex-direction: column;\n        text-align: center;\n    }\n\n    .card-item:hover.available-card {\n        transform: translateY(-5px);\n        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);\n        cursor: pointer;\n    }\n\n    .card-item.deck-card {\n        background: #edf2f7; /* Lighter background for deck cards */\n    }\n\n    .card-image {\n        max-width: 100%;\n        height: auto;\n        border-radius: 0.5rem;\n        margin-bottom: 0.75rem;\n    }\n\n    .card-name {\n        font-weight: bold;\n        font-size: 1.1rem;\n        color: #2c5282;\n        margin-bottom: 0.4rem;\n    }\n\n    .card-type {\n        font-style: italic;\n        color: #718096;\n        margin-bottom: 0.5rem;\n    }\n\n    .card-description {\n        font-size: 0.85rem;\n        color: #4a5568;\n        flex-grow: 1; /* Allows description to take up available space */\n        margin-bottom: 0.75rem;\n    }\n\n    .card-meta, .card-uses {\n        font-size: 0.8rem;\n        color: #666;\n        margin-bottom: 0.5rem;\n    }\n\n    .card-actions {\n        margin-top: 0.75rem;\n        display: flex;\n        flex-wrap: wrap;\n        gap: 0.5rem;\n        justify-content: center;\n    }\n\n    .use-button {\n        background-color: #3182ce; /* Blue use button */\n        color: white;\n    }\n    .use-button:hover:not(:disabled) {\n        background-color: #2b6cb0;\n        transform: translateY(-1px);\n    }\n\n    .reset-button {\n        background-color: #68d391; /* Green reset button */\n        color: white;\n    }\n    .reset-button:hover {\n        background-color: #48bb78;\n        transform: translateY(-1px);\n    }\n\n    .remove-button {\n        background-color: #fc8181; /* Red remove button */\n        color: white;\n    }\n    .remove-button:hover {\n        background-color: #e53e3e;\n        transform: translateY(-1px);\n    }\n\n    .empty-message, .pre-login-message {\n        text-align: center;\n        padding: 2rem;\n        background: #e9e9e9;\n        border-radius: 0.75rem;\n        color: #555;\n        font-style: italic;\n        margin: 1rem;\n    }\n\n    .error-message {\n        color: #e53e3e;\n        background-color: #fed7d7;\n        border: 1px solid #fc8181;\n        padding: 0.75rem;\n        border-radius: 0.5rem;\n        text-align: center;\n        margin-top: 1rem;\n        font-weight: bold;\n    }\n\n    .highlight {\n        color: #3182ce;\n        font-weight: bold;\n    }\n\n    /* Responsive Adjustments */\n    @media (max-width: 768px) {\n        .main-content {\n            flex-direction: column;\n        }\n        .login-container, .stats-container {\n            flex-direction: column;\n            align-items: stretch;\n        }\n        .login-container input {\n            max-width: 100%;\n        }\n    }\n\n    @media (max-width: 480px) {\n        .app-title {\n            font-size: 2rem;\n        }\n        .panel-title {\n            font-size: 1.5rem;\n        }\n        .login-container button, .use-button, .reset-button, .remove-button, .select-button {\n            width: 100%; /* Full width buttons on very small screens */\n            padding: 0.6rem 1rem;\n        }\n        .card-list, .deck-list {\n            grid-template-columns: 1fr; /* Single column layout for cards */\n        }\n    }\n`;\nfunction App() {\n  _s();\n  // --- State Variables ---\n  const [allCards, setAllCards] = useState([]); // All cards fetched from the backend (master list)\n  const [characterLevel, setCharacterLevel] = useState(1);\n  const [wisMod, setWisMod] = useState(0);\n  const [intMod, setIntMod] = useState(0);\n  const [chaMod, setChaMod] = useState(0);\n  const [maxDeckSize, setMaxDeckSize] = useState(0);\n  const [selectedCards, setSelectedCards] = useState([]); // Cards currently in the player's deck (persistent)\n  const [error, setError] = useState(''); // General error messages for UI\n\n  // New states for login/auth\n  const [playerId, setPlayerId] = useState('');\n  const [password, setPassword] = useState('');\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [message, setMessage] = useState({\n    text: '',\n    type: ''\n  });\n  const [loading, setLoading] = useState(true); // Loading state for initial data fetch of allCards\n\n  // --- Helper function to display messages ---\n  const showMessage = useCallback((text, type) => {\n    setMessage({\n      text,\n      type\n    });\n    setTimeout(() => setMessage({\n      text: '',\n      type: ''\n    }), 3000);\n  }, []);\n\n  // --- API Call: Create Account ---\n  const handleCreateAccount = async () => {\n    if (!playerId || !password) {\n      showMessage('Player ID and password are required to create an account.', 'error');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/deck/create`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          player_id: playerId,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to create account.');\n      }\n      showMessage('Account created successfully! You can now log in.', 'success');\n    } catch (err) {\n      console.error('Error creating account:', err);\n      showMessage(`Failed to create account: ${err.message}`, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // --- API Call: Login and Load Deck ---\n  const handleLoginAndLoadDeck = async () => {\n    if (!playerId || !password) {\n      showMessage('Player ID and password are required to log in.', 'error');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/deck/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          player_id: playerId,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Authentication failed.');\n      }\n\n      // Load data from backend upon successful login\n      setSelectedCards(data.cards || []);\n      setCharacterLevel(data.character_level !== undefined ? data.character_level : 1);\n      setWisMod(data.wis_mod !== undefined ? data.wis_mod : 0);\n      setIntMod(data.int_mod !== undefined ? data.int_mod : 0);\n      setChaMod(data.cha_mod !== undefined ? data.cha_mod : 0);\n      setIsAuthenticated(true);\n      showMessage('Login successful! Deck loaded.', 'success');\n    } catch (err) {\n      setIsAuthenticated(false);\n      console.error('Error logging in:', err);\n      showMessage(`Failed to load deck: ${err.message}`, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // --- API Call: Save Deck ---\n  const handleSaveDeck = async () => {\n    if (!isAuthenticated) {\n      showMessage('You must be logged in to save your deck.', 'error');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/deck/save`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          player_id: playerId,\n          password: password,\n          // Send password for re-validation on backend\n          cards: selectedCards,\n          character_level: characterLevel,\n          wis_mod: wisMod,\n          int_mod: intMod,\n          cha_mod: chaMod\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to save deck.');\n      }\n      showMessage('Deck and stats saved successfully!', 'success');\n    } catch (err) {\n      console.error('Error saving deck:', err);\n      showMessage(`Failed to save deck: ${err.message}`, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // --- Effect to Fetch All Cards on Component Mount ---\n  useEffect(() => {\n    const fetchAllCards = async () => {\n      setLoading(true);\n      try {\n        const cardsResponse = await fetch(`${API_BASE_URL}/cards`);\n        if (!cardsResponse.ok) {\n          throw new Error(`HTTP error fetching cards! status: ${cardsResponse.status}`);\n        }\n        const cardsData = await cardsResponse.json();\n        setAllCards(cardsData);\n      } catch (err) {\n        console.error('Error fetching initial data:', err);\n        showMessage('Failed to fetch initial data: ' + err.message, 'error');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAllCards();\n  }, [showMessage]); // Empty dependency array, this effect runs only once on mount\n\n  // --- Effect to Calculate Max Deck Size when Character Stats Change ---\n  useEffect(() => {\n    const calculateDeckSize = async () => {\n      setError(''); // Clear previous errors related to deck size\n      try {\n        const response = await fetch(`${API_BASE_URL}/calculate_deck_size`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            character_level: characterLevel,\n            wis_mod: wisMod,\n            int_mod: intMod,\n            cha_mod: chaMod\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setMaxDeckSize(data.max_deck_size);\n      } catch (err) {\n        setError('Failed to calculate deck size: ' + err.message);\n        console.error('Error calculating deck size:', err);\n      }\n    };\n    if (!isNaN(characterLevel) && !isNaN(wisMod) && !isNaN(intMod) && !isNaN(chaMod)) {\n      calculateDeckSize();\n    }\n  }, [characterLevel, wisMod, intMod, chaMod]);\n\n  // --- Deck Building Logic: Add Card ---\n  const handleAddCardToDeck = useCallback(card => {\n    if (!isAuthenticated) {\n      showMessage(\"You must be logged in to build a deck.\", \"error\");\n      return;\n    }\n    if (selectedCards.length >= maxDeckSize) {\n      showMessage('Deck is full! Remove cards to add new ones.', 'error');\n      return;\n    }\n    const cantripCountInDeck = selectedCards.filter(c => c.type === 'Cantrip').length;\n    if (card.type !== 'Cantrip' && cantripCountInDeck === 0 && selectedCards.length === 0) {\n      showMessage('Your deck must contain at least one Cantrip! Add a Cantrip first.', 'error');\n      return;\n    }\n    setSelectedCards(prev => [...prev, {\n      ...card,\n      instance_id: uuidv4(),\n      current_uses: card.default_uses_per_rest\n    }]);\n    showMessage('Card added to your deck!', 'success');\n  }, [isAuthenticated, maxDeckSize, selectedCards, showMessage]);\n\n  // --- Deck Building Logic: Remove Card ---\n  const handleRemoveCardFromDeck = useCallback(instance_id => {\n    const updatedDeck = selectedCards.filter(card => card.instance_id !== instance_id);\n    const cantripCount = updatedDeck.filter(c => c.type === 'Cantrip').length;\n    if (cantripCount === 0 && updatedDeck.length > 0) {\n      showMessage('Your deck must contain at least one Cantrip! You cannot remove the last one.', 'error');\n      return;\n    }\n    setSelectedCards(updatedDeck);\n    showMessage('Card removed from deck.', 'success');\n  }, [selectedCards, showMessage]);\n\n  // --- Card Usage Logic: Mark Card as Used ---\n  const handleMarkCardUsed = useCallback(async instance_id => {\n    const cardToUse = selectedCards.find(card => card.instance_id === instance_id);\n    if (!cardToUse) return;\n    if (cardToUse.current_uses > 0) {\n      setSelectedCards(prev => prev.map(card => card.instance_id === instance_id ? {\n        ...card,\n        current_uses: card.current_uses - 1\n      } : card));\n\n      // Notify backend about the card usage for logging purposes.\n      try {\n        const response = await fetch(`${API_BASE_URL}/card_used`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: cardToUse.name,\n            // Use 'name' to match backend's 'card_name' expectation\n            type: cardToUse.type,\n            // Use 'type' to match backend's 'card_type' expectation\n            deck_card_id: cardToUse.instance_id\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Backend notification:', data.message);\n        console.log('Simulated System Log Entry from Backend:', data.log_entry);\n      } catch (err) {\n        showMessage('Failed to notify backend of card usage for logging: ' + err.message, 'error');\n        console.error('Error sending card used notification:', err);\n      }\n    } else {\n      showMessage(`\"${cardToUse.name}\" has no uses left! It needs a long rest.`, 'error');\n    }\n  }, [selectedCards, showMessage]);\n\n  // --- Card Usage Logic: Reset Card Uses (Long Rest) ---\n  const handleResetCardUses = useCallback(instance_id => {\n    setSelectedCards(prev => prev.map(card => card.instance_id === instance_id ? {\n      ...card,\n      current_uses: card.default_uses_per_rest\n    } : card));\n    showMessage('Card uses reset!', 'success');\n  }, [showMessage]);\n\n  // --- Main Component Render ---\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: AppStyles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"app-title\",\n        children: \"Spell Trading Cards Manager\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Player ID\",\n          value: playerId,\n          onChange: e => setPlayerId(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLoginAndLoadDeck,\n          children: \"Log In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCreateAccount,\n          children: \"Create Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 21\n        }, this), isAuthenticated && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSaveDeck,\n          children: \"Save Deck\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stats-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Level: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: characterLevel,\n            onChange: e => setCharacterLevel(Math.max(1, parseInt(e.target.value) || 1)),\n            min: \"1\",\n            max: \"20\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 35\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"WIS Mod: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: wisMod,\n            onChange: e => setWisMod(parseInt(e.target.value) || 0)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"INT Mod: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: intMod,\n            onChange: e => setIntMod(parseInt(e.target.value) || 0)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"CHA Mod: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: chaMod,\n            onChange: e => setChaMod(parseInt(e.target.value) || 0)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 628,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Max Deck Size: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"highlight\",\n            children: maxDeckSize\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 17\n      }, this), message.text && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message-box ${message.type}`,\n        children: message.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-collection-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"panel-title\",\n            children: \"Available Spells\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 25\n          }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"empty-message\",\n            children: \"Loading cards...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 29\n          }, this) : allCards.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-list\",\n            children: allCards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-item available-card\",\n              onClick: () => handleAddCardToDeck(card),\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: `https://placehold.co/100x150/a8dadc/ffffff?text=${card.name.split('.')[0].replace('_', '%20')}`,\n                alt: card.name,\n                className: \"card-image\",\n                onError: e => {\n                  e.target.onerror = null;\n                  e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\";\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 645,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"card-name\",\n                children: [card.name, \" (\", card.type, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 651,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-description\",\n                children: card.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 652,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-meta\",\n                children: [\"Rarity: \", card.rarity]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 653,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: e => {\n                  e.stopPropagation();\n                  handleAddCardToDeck(card);\n                } // Stop propagation to prevent parent onClick\n                ,\n                disabled: !isAuthenticated || selectedCards.length >= maxDeckSize,\n                className: \"select-button\",\n                children: \"Add to Deck\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 654,\n                columnNumber: 41\n              }, this)]\n            }, card.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 644,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 642,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"empty-message\",\n            children: \"No cards available. Please check the backend data source.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"built-deck-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"panel-title\",\n            children: [\"Your Deck (\", selectedCards.length, \"/\", maxDeckSize, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"deck-list\",\n            children: isAuthenticated ? selectedCards.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"empty-message\",\n              children: \"Select cards from the left to build your deck!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 675,\n              columnNumber: 37\n            }, this) : selectedCards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-item deck-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: `https://placehold.co/100x150/a8dadc/ffffff?text=${card.name.split('.')[0].replace('_', '%20')}`,\n                alt: card.name,\n                className: \"card-image\",\n                onError: e => {\n                  e.target.onerror = null;\n                  e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\";\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 679,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"card-name\",\n                children: [card.name, \" (\", card.type, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 685,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-description\",\n                children: card.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 686,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-uses\",\n                children: [\"Uses Left: \", card.current_uses, \"/\", card.default_uses_per_rest]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 687,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-actions\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleMarkCardUsed(card.instance_id),\n                  disabled: card.current_uses <= 0,\n                  className: \"use-button\",\n                  children: \"Use\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 689,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleResetCardUses(card.instance_id),\n                  className: \"reset-button\",\n                  children: \"Reset Uses\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 696,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleRemoveCardFromDeck(card.instance_id),\n                  className: \"remove-button\",\n                  children: \"Remove\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 702,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 688,\n                columnNumber: 45\n              }, this)]\n            }, card.instance_id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 678,\n              columnNumber: 41\n            }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pre-login-message\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Please log in to load your character and spell deck.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 714,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Once logged in, your deck and stats will appear here.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 715,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 713,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"322OOzYdeOKZ6HT4rnb0kQwZ45w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","v4","uuidv4","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","AppStyles","App","_s","allCards","setAllCards","characterLevel","setCharacterLevel","wisMod","setWisMod","intMod","setIntMod","chaMod","setChaMod","maxDeckSize","setMaxDeckSize","selectedCards","setSelectedCards","error","setError","playerId","setPlayerId","password","setPassword","isAuthenticated","setIsAuthenticated","message","setMessage","text","type","loading","setLoading","showMessage","setTimeout","handleCreateAccount","response","fetch","method","headers","body","JSON","stringify","player_id","data","json","ok","Error","err","console","handleLoginAndLoadDeck","cards","character_level","undefined","wis_mod","int_mod","cha_mod","handleSaveDeck","fetchAllCards","cardsResponse","status","cardsData","calculateDeckSize","max_deck_size","isNaN","handleAddCardToDeck","card","length","cantripCountInDeck","filter","c","prev","instance_id","current_uses","default_uses_per_rest","handleRemoveCardFromDeck","updatedDeck","cantripCount","handleMarkCardUsed","cardToUse","find","map","name","deck_card_id","log","log_entry","handleResetCardUses","children","fileName","_jsxFileName","lineNumber","columnNumber","className","placeholder","value","onChange","e","target","onClick","Math","max","parseInt","min","src","split","replace","alt","onError","onerror","description","rarity","stopPropagation","disabled","id","_c","$RefreshReg$"],"sources":["C:/Users/aaron/DND_Spell_Cards/Spell_Card_Game/DND_Spell_Cards_online/frontend - Copy/src/App.js"],"sourcesContent":["// dnd-spell-cards-app/frontend/src/App.js\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique keys for deck card instances\r\n\r\n// IMPORTANT: Update this to your VM's Public IP address (or domain name if configured)\r\nconst API_BASE_URL = 'http://193.122.147.91:5000/api';\r\n\r\n// Inline CSS for self-contained component\r\nconst AppStyles = `\r\n    body {\r\n        background-color: #f0e6d2;\r\n        font-family: 'Inter', sans-serif;\r\n        color: #333;\r\n        margin: 0;\r\n        padding: 0;\r\n        line-height: 1.6;\r\n    }\r\n\r\n    .App {\r\n        display: flex;\r\n        flex-direction: column;\r\n        min-height: 100vh;\r\n        align-items: center;\r\n        padding: 1rem;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    .app-title {\r\n        color: #2d3748;\r\n        text-align: center;\r\n        margin-bottom: 1.5rem;\r\n        font-size: 2.5rem;\r\n        font-weight: 700;\r\n    }\r\n\r\n    .login-container, .stats-container {\r\n        background: #4a5568; /* Dark gray for a solid background */\r\n        color: #e2e8f0; /* Light gray text */\r\n        padding: 1.5rem;\r\n        margin-bottom: 1.5rem;\r\n        border-radius: 0.75rem;\r\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\r\n        display: flex;\r\n        gap: 1rem;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-wrap: wrap;\r\n        width: 100%;\r\n        max-width: 1200px;\r\n    }\r\n\r\n    .login-container input {\r\n        padding: 0.6rem 0.8rem;\r\n        border-radius: 0.5rem;\r\n        border: 1px solid #a0aec0;\r\n        background: #e2e8f0;\r\n        color: #2d3748;\r\n        font-size: 1rem;\r\n        flex-grow: 1;\r\n        max-width: 180px;\r\n    }\r\n\r\n    .login-container button, .use-button, .reset-button, .remove-button, .select-button {\r\n        background-color: #63b3ed; /* Blue button */\r\n        color: white;\r\n        padding: 0.75rem 1.25rem;\r\n        border: none;\r\n        border-radius: 0.5rem;\r\n        cursor: pointer;\r\n        font-weight: bold;\r\n        transition: background-color 0.3s ease, transform 0.2s ease;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    .login-container button:hover, .select-button:hover:not(:disabled) {\r\n        background-color: #4299e1; /* Darker blue on hover */\r\n        transform: translateY(-2px);\r\n    }\r\n\r\n    .select-button:disabled, .use-button:disabled {\r\n        background-color: #cbd5e0;\r\n        cursor: not-allowed;\r\n        transform: none;\r\n    }\r\n\r\n    .stats-container {\r\n        background: #2d3748;\r\n        color: #e2e8f0;\r\n    }\r\n\r\n    .stats-container label {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 0.5rem;\r\n        font-weight: 500;\r\n    }\r\n\r\n    .stats-container input {\r\n        width: 4rem;\r\n        padding: 0.25rem;\r\n        border-radius: 0.5rem;\r\n        border: none;\r\n        background: #e2e8f0;\r\n        color: #2d3748;\r\n        text-align: center;\r\n    }\r\n\r\n    .stats-container p {\r\n        margin: 0;\r\n        padding: 0;\r\n        font-size: 1rem;\r\n    }\r\n\r\n    .message-box {\r\n        position: fixed;\r\n        top: 1rem;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        padding: 0.75rem 1.5rem;\r\n        border-radius: 0.5rem;\r\n        font-weight: bold;\r\n        z-index: 1000; /* High z-index to appear above everything */\r\n        animation: fadein 0.5s, fadeout 0.5s 2.5s;\r\n        text-align: center;\r\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n    }\r\n\r\n    .message-box.success {\r\n        background-color: #48bb78; /* Green success color */\r\n        color: white;\r\n    }\r\n\r\n    .message-box.error {\r\n        background-color: #f56565; /* Red error color */\r\n        color: white;\r\n    }\r\n\r\n    @keyframes fadein {\r\n        from { opacity: 0; }\r\n        to   { opacity: 1; }\r\n    }\r\n\r\n    @keyframes fadeout {\r\n        from { opacity: 1; }\r\n        to   { opacity: 0; }\r\n    }\r\n\r\n    .main-content {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        gap: 1.5rem;\r\n        width: 100%;\r\n        max-width: 1200px;\r\n        flex: 1; /* Allows content to take up remaining space */\r\n    }\r\n\r\n    .card-collection-panel, .built-deck-panel {\r\n        background: #fdfaf5;\r\n        border-radius: 0.75rem;\r\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n        padding: 1.5rem;\r\n        flex: 1;\r\n        min-width: 300px;\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .panel-title {\r\n        text-align: center;\r\n        color: #2c5282;\r\n        margin-top: 0;\r\n        margin-bottom: 1.5rem;\r\n        font-size: 1.8rem;\r\n    }\r\n\r\n    .card-list, .deck-list {\r\n        display: grid;\r\n        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n        gap: 1rem;\r\n        flex-grow: 1;\r\n    }\r\n\r\n    .card-item {\r\n        background: #fff;\r\n        border: 1px solid #e2e8f0;\r\n        border-radius: 0.75rem;\r\n        padding: 1rem;\r\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);\r\n        transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n        display: flex;\r\n        flex-direction: column;\r\n        text-align: center;\r\n    }\r\n\r\n    .card-item:hover.available-card {\r\n        transform: translateY(-5px);\r\n        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);\r\n        cursor: pointer;\r\n    }\r\n\r\n    .card-item.deck-card {\r\n        background: #edf2f7; /* Lighter background for deck cards */\r\n    }\r\n\r\n    .card-image {\r\n        max-width: 100%;\r\n        height: auto;\r\n        border-radius: 0.5rem;\r\n        margin-bottom: 0.75rem;\r\n    }\r\n\r\n    .card-name {\r\n        font-weight: bold;\r\n        font-size: 1.1rem;\r\n        color: #2c5282;\r\n        margin-bottom: 0.4rem;\r\n    }\r\n\r\n    .card-type {\r\n        font-style: italic;\r\n        color: #718096;\r\n        margin-bottom: 0.5rem;\r\n    }\r\n\r\n    .card-description {\r\n        font-size: 0.85rem;\r\n        color: #4a5568;\r\n        flex-grow: 1; /* Allows description to take up available space */\r\n        margin-bottom: 0.75rem;\r\n    }\r\n\r\n    .card-meta, .card-uses {\r\n        font-size: 0.8rem;\r\n        color: #666;\r\n        margin-bottom: 0.5rem;\r\n    }\r\n\r\n    .card-actions {\r\n        margin-top: 0.75rem;\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        gap: 0.5rem;\r\n        justify-content: center;\r\n    }\r\n\r\n    .use-button {\r\n        background-color: #3182ce; /* Blue use button */\r\n        color: white;\r\n    }\r\n    .use-button:hover:not(:disabled) {\r\n        background-color: #2b6cb0;\r\n        transform: translateY(-1px);\r\n    }\r\n\r\n    .reset-button {\r\n        background-color: #68d391; /* Green reset button */\r\n        color: white;\r\n    }\r\n    .reset-button:hover {\r\n        background-color: #48bb78;\r\n        transform: translateY(-1px);\r\n    }\r\n\r\n    .remove-button {\r\n        background-color: #fc8181; /* Red remove button */\r\n        color: white;\r\n    }\r\n    .remove-button:hover {\r\n        background-color: #e53e3e;\r\n        transform: translateY(-1px);\r\n    }\r\n\r\n    .empty-message, .pre-login-message {\r\n        text-align: center;\r\n        padding: 2rem;\r\n        background: #e9e9e9;\r\n        border-radius: 0.75rem;\r\n        color: #555;\r\n        font-style: italic;\r\n        margin: 1rem;\r\n    }\r\n\r\n    .error-message {\r\n        color: #e53e3e;\r\n        background-color: #fed7d7;\r\n        border: 1px solid #fc8181;\r\n        padding: 0.75rem;\r\n        border-radius: 0.5rem;\r\n        text-align: center;\r\n        margin-top: 1rem;\r\n        font-weight: bold;\r\n    }\r\n\r\n    .highlight {\r\n        color: #3182ce;\r\n        font-weight: bold;\r\n    }\r\n\r\n    /* Responsive Adjustments */\r\n    @media (max-width: 768px) {\r\n        .main-content {\r\n            flex-direction: column;\r\n        }\r\n        .login-container, .stats-container {\r\n            flex-direction: column;\r\n            align-items: stretch;\r\n        }\r\n        .login-container input {\r\n            max-width: 100%;\r\n        }\r\n    }\r\n\r\n    @media (max-width: 480px) {\r\n        .app-title {\r\n            font-size: 2rem;\r\n        }\r\n        .panel-title {\r\n            font-size: 1.5rem;\r\n        }\r\n        .login-container button, .use-button, .reset-button, .remove-button, .select-button {\r\n            width: 100%; /* Full width buttons on very small screens */\r\n            padding: 0.6rem 1rem;\r\n        }\r\n        .card-list, .deck-list {\r\n            grid-template-columns: 1fr; /* Single column layout for cards */\r\n        }\r\n    }\r\n`;\r\n\r\nfunction App() {\r\n    // --- State Variables ---\r\n    const [allCards, setAllCards] = useState([]); // All cards fetched from the backend (master list)\r\n    const [characterLevel, setCharacterLevel] = useState(1);\r\n    const [wisMod, setWisMod] = useState(0);\r\n    const [intMod, setIntMod] = useState(0);\r\n    const [chaMod, setChaMod] = useState(0);\r\n    const [maxDeckSize, setMaxDeckSize] = useState(0);\r\n    const [selectedCards, setSelectedCards] = useState([]); // Cards currently in the player's deck (persistent)\r\n    const [error, setError] = useState(''); // General error messages for UI\r\n\r\n    // New states for login/auth\r\n    const [playerId, setPlayerId] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [message, setMessage] = useState({ text: '', type: '' });\r\n    const [loading, setLoading] = useState(true); // Loading state for initial data fetch of allCards\r\n\r\n    // --- Helper function to display messages ---\r\n    const showMessage = useCallback((text, type) => {\r\n        setMessage({ text, type });\r\n        setTimeout(() => setMessage({ text: '', type: '' }), 3000);\r\n    }, []);\r\n\r\n    // --- API Call: Create Account ---\r\n    const handleCreateAccount = async () => {\r\n        if (!playerId || !password) {\r\n            showMessage('Player ID and password are required to create an account.', 'error');\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/deck/create`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ player_id: playerId, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Failed to create account.');\r\n            }\r\n            \r\n            showMessage('Account created successfully! You can now log in.', 'success');\r\n        } catch (err) {\r\n            console.error('Error creating account:', err);\r\n            showMessage(`Failed to create account: ${err.message}`, 'error');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // --- API Call: Login and Load Deck ---\r\n    const handleLoginAndLoadDeck = async () => {\r\n        if (!playerId || !password) {\r\n            showMessage('Player ID and password are required to log in.', 'error');\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/deck/login`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ player_id: playerId, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Authentication failed.');\r\n            }\r\n\r\n            // Load data from backend upon successful login\r\n            setSelectedCards(data.cards || []);\r\n            setCharacterLevel(data.character_level !== undefined ? data.character_level : 1);\r\n            setWisMod(data.wis_mod !== undefined ? data.wis_mod : 0);\r\n            setIntMod(data.int_mod !== undefined ? data.int_mod : 0);\r\n            setChaMod(data.cha_mod !== undefined ? data.cha_mod : 0);\r\n            setIsAuthenticated(true);\r\n\r\n            showMessage('Login successful! Deck loaded.', 'success');\r\n        } catch (err) {\r\n            setIsAuthenticated(false);\r\n            console.error('Error logging in:', err);\r\n            showMessage(`Failed to load deck: ${err.message}`, 'error');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // --- API Call: Save Deck ---\r\n    const handleSaveDeck = async () => {\r\n        if (!isAuthenticated) {\r\n            showMessage('You must be logged in to save your deck.', 'error');\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/deck/save`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    player_id: playerId,\r\n                    password: password, // Send password for re-validation on backend\r\n                    cards: selectedCards,\r\n                    character_level: characterLevel,\r\n                    wis_mod: wisMod,\r\n                    int_mod: intMod,\r\n                    cha_mod: chaMod,\r\n                }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Failed to save deck.');\r\n            }\r\n\r\n            showMessage('Deck and stats saved successfully!', 'success');\r\n        } catch (err) {\r\n            console.error('Error saving deck:', err);\r\n            showMessage(`Failed to save deck: ${err.message}`, 'error');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // --- Effect to Fetch All Cards on Component Mount ---\r\n    useEffect(() => {\r\n        const fetchAllCards = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const cardsResponse = await fetch(`${API_BASE_URL}/cards`);\r\n                if (!cardsResponse.ok) {\r\n                    throw new Error(`HTTP error fetching cards! status: ${cardsResponse.status}`);\r\n                }\r\n                const cardsData = await cardsResponse.json();\r\n                setAllCards(cardsData);\r\n            } catch (err) {\r\n                console.error('Error fetching initial data:', err);\r\n                showMessage('Failed to fetch initial data: ' + err.message, 'error');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchAllCards();\r\n    }, [showMessage]); // Empty dependency array, this effect runs only once on mount\r\n\r\n    // --- Effect to Calculate Max Deck Size when Character Stats Change ---\r\n    useEffect(() => {\r\n        const calculateDeckSize = async () => {\r\n            setError(''); // Clear previous errors related to deck size\r\n            try {\r\n                const response = await fetch(`${API_BASE_URL}/calculate_deck_size`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        character_level: characterLevel,\r\n                        wis_mod: wisMod,\r\n                        int_mod: intMod,\r\n                        cha_mod: chaMod,\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n                setMaxDeckSize(data.max_deck_size);\r\n            } catch (err) {\r\n                setError('Failed to calculate deck size: ' + err.message);\r\n                console.error('Error calculating deck size:', err);\r\n            }\r\n        };\r\n\r\n        if (!isNaN(characterLevel) && !isNaN(wisMod) && !isNaN(intMod) && !isNaN(chaMod)) {\r\n            calculateDeckSize();\r\n        }\r\n    }, [characterLevel, wisMod, intMod, chaMod]);\r\n\r\n    // --- Deck Building Logic: Add Card ---\r\n    const handleAddCardToDeck = useCallback((card) => {\r\n        if (!isAuthenticated) {\r\n            showMessage(\"You must be logged in to build a deck.\", \"error\");\r\n            return;\r\n        }\r\n        if (selectedCards.length >= maxDeckSize) {\r\n            showMessage('Deck is full! Remove cards to add new ones.', 'error');\r\n            return;\r\n        }\r\n\r\n        const cantripCountInDeck = selectedCards.filter(c => c.type === 'Cantrip').length;\r\n        if (card.type !== 'Cantrip' && cantripCountInDeck === 0 && selectedCards.length === 0) {\r\n             showMessage('Your deck must contain at least one Cantrip! Add a Cantrip first.', 'error');\r\n             return;\r\n        }\r\n\r\n        setSelectedCards(prev => [...prev, {\r\n            ...card,\r\n            instance_id: uuidv4(),\r\n            current_uses: card.default_uses_per_rest\r\n        }]);\r\n        showMessage('Card added to your deck!', 'success');\r\n    }, [isAuthenticated, maxDeckSize, selectedCards, showMessage]);\r\n\r\n    // --- Deck Building Logic: Remove Card ---\r\n    const handleRemoveCardFromDeck = useCallback((instance_id) => {\r\n        const updatedDeck = selectedCards.filter(card => card.instance_id !== instance_id);\r\n        const cantripCount = updatedDeck.filter(c => c.type === 'Cantrip').length;\r\n\r\n        if (cantripCount === 0 && updatedDeck.length > 0) {\r\n            showMessage('Your deck must contain at least one Cantrip! You cannot remove the last one.', 'error');\r\n            return;\r\n        }\r\n        setSelectedCards(updatedDeck);\r\n        showMessage('Card removed from deck.', 'success');\r\n    }, [selectedCards, showMessage]);\r\n\r\n    // --- Card Usage Logic: Mark Card as Used ---\r\n    const handleMarkCardUsed = useCallback(async (instance_id) => {\r\n        const cardToUse = selectedCards.find(card => card.instance_id === instance_id);\r\n        if (!cardToUse) return;\r\n\r\n        if (cardToUse.current_uses > 0) {\r\n            setSelectedCards(prev =>\r\n                prev.map(card =>\r\n                    card.instance_id === instance_id ? { ...card, current_uses: card.current_uses - 1 } : card\r\n                )\r\n            );\r\n\r\n            // Notify backend about the card usage for logging purposes.\r\n            try {\r\n                const response = await fetch(`${API_BASE_URL}/card_used`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        name: cardToUse.name, // Use 'name' to match backend's 'card_name' expectation\r\n                        type: cardToUse.type, // Use 'type' to match backend's 'card_type' expectation\r\n                        deck_card_id: cardToUse.instance_id\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n                console.log('Backend notification:', data.message);\r\n                console.log('Simulated System Log Entry from Backend:', data.log_entry);\r\n            } catch (err) {\r\n                showMessage('Failed to notify backend of card usage for logging: ' + err.message, 'error');\r\n                console.error('Error sending card used notification:', err);\r\n            }\r\n        } else {\r\n            showMessage(`\"${cardToUse.name}\" has no uses left! It needs a long rest.`, 'error');\r\n        }\r\n    }, [selectedCards, showMessage]);\r\n\r\n    // --- Card Usage Logic: Reset Card Uses (Long Rest) ---\r\n    const handleResetCardUses = useCallback((instance_id) => {\r\n        setSelectedCards(prev =>\r\n            prev.map(card =>\r\n                card.instance_id === instance_id ? { ...card, current_uses: card.default_uses_per_rest } : card\r\n            )\r\n        );\r\n        showMessage('Card uses reset!', 'success');\r\n    }, [showMessage]);\r\n\r\n    // --- Main Component Render ---\r\n    return (\r\n        <>\r\n            <style>{AppStyles}</style>\r\n            <div className=\"App\">\r\n                <h1 className=\"app-title\">Spell Trading Cards Manager</h1>\r\n\r\n                {/* Login/Auth Section */}\r\n                <div className=\"login-container\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Player ID\"\r\n                        value={playerId}\r\n                        onChange={(e) => setPlayerId(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    />\r\n                    <button onClick={handleLoginAndLoadDeck}>Log In</button>\r\n                    <button onClick={handleCreateAccount}>Create Account</button>\r\n                    {isAuthenticated && <button onClick={handleSaveDeck}>Save Deck</button>}\r\n                </div>\r\n\r\n                {/* Character Stats Input Panel */}\r\n                <div className=\"stats-container\">\r\n                    <label>Level: <input type=\"number\" value={characterLevel} onChange={(e) => setCharacterLevel(Math.max(1, parseInt(e.target.value) || 1))} min=\"1\" max=\"20\" /></label>\r\n                    <label>WIS Mod: <input type=\"number\" value={wisMod} onChange={(e) => setWisMod(parseInt(e.target.value) || 0)} /></label>\r\n                    <label>INT Mod: <input type=\"number\" value={intMod} onChange={(e) => setIntMod(parseInt(e.target.value) || 0)} /></label>\r\n                    <label>CHA Mod: <input type=\"number\" value={chaMod} onChange={(e) => setChaMod(parseInt(e.target.value) || 0)} /></label>\r\n                    <p>Max Deck Size: <span className=\"highlight\">{maxDeckSize}</span></p>\r\n                </div>\r\n\r\n                {/* Message Box */}\r\n                {message.text && <div className={`message-box ${message.type}`}>{message.text}</div>}\r\n\r\n                <div className=\"main-content\">\r\n                    {/* Available Cards Section */}\r\n                    <div className=\"card-collection-panel\">\r\n                        <h2 className=\"panel-title\">Available Spells</h2>\r\n                        {loading ? (\r\n                            <p className=\"empty-message\">Loading cards...</p>\r\n                        ) : allCards.length > 0 ? (\r\n                            <div className=\"card-list\">\r\n                                {allCards.map((card) => (\r\n                                    <div key={card.id} className=\"card-item available-card\" onClick={() => handleAddCardToDeck(card)}>\r\n                                        <img\r\n                                            src={`https://placehold.co/100x150/a8dadc/ffffff?text=${card.name.split('.')[0].replace('_', '%20')}`}\r\n                                            alt={card.name}\r\n                                            className=\"card-image\"\r\n                                            onError={(e) => { e.target.onerror = null; e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\"; }}\r\n                                        />\r\n                                        <h3 className=\"card-name\">{card.name} ({card.type})</h3>\r\n                                        <p className=\"card-description\">{card.description}</p>\r\n                                        <p className=\"card-meta\">Rarity: {card.rarity}</p>\r\n                                        <button\r\n                                            onClick={(e) => { e.stopPropagation(); handleAddCardToDeck(card); }} // Stop propagation to prevent parent onClick\r\n                                            disabled={!isAuthenticated || selectedCards.length >= maxDeckSize}\r\n                                            className=\"select-button\"\r\n                                        >\r\n                                            Add to Deck\r\n                                        </button>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        ) : (\r\n                            <p className=\"empty-message\">No cards available. Please check the backend data source.</p>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Built Deck Section */}\r\n                    <div className=\"built-deck-panel\">\r\n                        <h2 className=\"panel-title\">Your Deck ({selectedCards.length}/{maxDeckSize})</h2>\r\n                        <div className=\"deck-list\">\r\n                            {isAuthenticated ? (\r\n                                selectedCards.length === 0 ? (\r\n                                    <p className=\"empty-message\">Select cards from the left to build your deck!</p>\r\n                                ) : (\r\n                                    selectedCards.map((card) => (\r\n                                        <div key={card.instance_id} className=\"card-item deck-card\">\r\n                                            <img\r\n                                                src={`https://placehold.co/100x150/a8dadc/ffffff?text=${card.name.split('.')[0].replace('_', '%20')}`}\r\n                                                alt={card.name}\r\n                                                className=\"card-image\"\r\n                                                onError={(e) => { e.target.onerror = null; e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\"; }}\r\n                                            />\r\n                                            <h3 className=\"card-name\">{card.name} ({card.type})</h3>\r\n                                            <p className=\"card-description\">{card.description}</p>\r\n                                            <p className=\"card-uses\">Uses Left: {card.current_uses}/{card.default_uses_per_rest}</p>\r\n                                            <div className=\"card-actions\">\r\n                                                <button\r\n                                                    onClick={() => handleMarkCardUsed(card.instance_id)}\r\n                                                    disabled={card.current_uses <= 0}\r\n                                                    className=\"use-button\"\r\n                                                >\r\n                                                    Use\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => handleResetCardUses(card.instance_id)}\r\n                                                    className=\"reset-button\"\r\n                                                >\r\n                                                    Reset Uses\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => handleRemoveCardFromDeck(card.instance_id)}\r\n                                                    className=\"remove-button\"\r\n                                                >\r\n                                                    Remove\r\n                                                </button>\r\n                                            </div>\r\n                                        </div>\r\n                                    ))\r\n                                )\r\n                            ) : (\r\n                                <div className=\"pre-login-message\">\r\n                                    <h3>Please log in to load your character and spell deck.</h3>\r\n                                    <p>Once logged in, your deck and stats will appear here.</p>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}