{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aaron\\\\DND_Spell_Cards\\\\Spell_Card_Game\\\\dnd_spell_cards_app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// dnd-spell-cards-app/frontend/src/App.js\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css'; // Make sure this line is present for styling\n\n// Define the base URL for your Python backend\n// IMPORTANT: Ensure this matches the port your Flask app is running on (default is 5000)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000/api';\nfunction App() {\n  _s();\n  const [cards, setCards] = useState([]); // State to hold your fetched cards\n  const [loading, setLoading] = useState(true); // State to indicate data loading\n  const [error, setError] = useState(null); // State to handle any fetch errors\n\n  // New state variables for character stats\n  const [characterLevel, setCharacterLevel] = useState(1);\n  const [wisMod, setWisMod] = useState(0);\n  const [intMod, setIntMod] = useState(0);\n  const [chaMod, setChaMod] = useState(0);\n  const [maxDeckSize, setMaxDeckSize] = useState(0); // State for calculated deck size\n\n  // useEffect hook to fetch data when the component mounts\n  useEffect(() => {\n    async function fetchCards() {\n      try {\n        // Make a GET request to your Flask backend's /api/cards endpoint\n        const response = await fetch(`${API_BASE_URL}/cards`);\n\n        // Check if the network request was successful\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        // Parse the JSON response\n        const data = await response.json();\n        setCards(data); // Update the state with the fetched cards\n      } catch (err) {\n        setError(err.message); // Set an error message if something goes wrong\n        console.error(\"Failed to fetch cards:\", err);\n      } finally {\n        setLoading(false); // End loading regardless of success or failure\n      }\n    }\n    fetchCards(); // Call the async function\n  }, []); // The empty dependency array means this effect runs once after the initial render\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: \"Loading cards...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"D&D Spell Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-list\",\n      children: cards.length > 0 ? cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `https://placehold.co/100x150/a8dadc/ffffff?text=${card.name.replace(' ', '%20')}`,\n          alt: card.name,\n          className: \"card-image\",\n          onError: e => {\n            e.target.onerror = null;\n            e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\";\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"card-name\",\n          children: card.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-type\",\n          children: [\"Type: \", card.type]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"rarity\",\n          children: [\"Rarity: \", card.rarity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this)]\n      }, card.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No cards available. Check your backend!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vVsLllxl1bXi4tLl4M4Eso+f+Y4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","cards","setCards","loading","setLoading","error","setError","characterLevel","setCharacterLevel","wisMod","setWisMod","intMod","setIntMod","chaMod","setChaMod","maxDeckSize","setMaxDeckSize","fetchCards","response","fetch","ok","Error","status","data","json","err","message","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","card","src","name","replace","alt","onError","e","target","onerror","type","rarity","id","_c","$RefreshReg$"],"sources":["C:/Users/aaron/DND_Spell_Cards/Spell_Card_Game/dnd_spell_cards_app/frontend/src/App.js"],"sourcesContent":["// dnd-spell-cards-app/frontend/src/App.js\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css'; // Make sure this line is present for styling\n\n// Define the base URL for your Python backend\n// IMPORTANT: Ensure this matches the port your Flask app is running on (default is 5000)\nconst API_BASE_URL = 'http://127.0.0.1:5000/api';\n\nfunction App() {\n  const [cards, setCards] = useState([]); // State to hold your fetched cards\n  const [loading, setLoading] = useState(true); // State to indicate data loading\n  const [error, setError] = useState(null); // State to handle any fetch errors\n\n  // New state variables for character stats\n  const [characterLevel, setCharacterLevel] = useState(1);\n  const [wisMod, setWisMod] = useState(0);\n  const [intMod, setIntMod] = useState(0);\n  const [chaMod, setChaMod] = useState(0);\n  const [maxDeckSize, setMaxDeckSize] = useState(0); // State for calculated deck size\n\n  // useEffect hook to fetch data when the component mounts\n  useEffect(() => {\n    async function fetchCards() {\n      try {\n        // Make a GET request to your Flask backend's /api/cards endpoint\n        const response = await fetch(`${API_BASE_URL}/cards`);\n\n        // Check if the network request was successful\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        // Parse the JSON response\n        const data = await response.json();\n        setCards(data); // Update the state with the fetched cards\n      } catch (err) {\n        setError(err.message); // Set an error message if something goes wrong\n        console.error(\"Failed to fetch cards:\", err);\n      } finally {\n        setLoading(false); // End loading regardless of success or failure\n      }\n    }\n\n    fetchCards(); // Call the async function\n  }, []); // The empty dependency array means this effect runs once after the initial render\n\n  if (loading) {\n    return <div className=\"app-container\">Loading cards...</div>;\n  }\n\n  if (error) {\n    return <div className=\"app-container\">Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"app-container\">\n      <h1 className=\"app-title\">D&D Spell Cards</h1>\n      <div className=\"card-list\">\n        {cards.length > 0 ? (\n          cards.map(card => (\n            <div key={card.id} className=\"card-item\">\n              {/* Using a placeholder image for now. You'll replace this with your actual PNGs */}\n              <img\n                src={`https://placehold.co/100x150/a8dadc/ffffff?text=${card.name.replace(' ', '%20')}`}\n                alt={card.name}\n                className=\"card-image\"\n                onError={(e) => { e.target.onerror = null; e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\"; }}\n              />\n              <h3 className=\"card-name\">{card.name}</h3>\n              <p className=\"card-type\">Type: {card.type}</p>\n              <p className=\"rarity\">Rarity: {card.rarity}</p>\n            </div>\n          ))\n        ) : (\n          <p>No cards available. Check your backend!</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW,CAAC,CAAC;;AAEpB;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1C;EACA,MAAM,CAACa,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAACe,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACiB,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACmB,MAAM,EAAEC,SAAS,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEnD;EACAC,SAAS,CAAC,MAAM;IACd,eAAesB,UAAUA,CAAA,EAAG;MAC1B,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGrB,YAAY,QAAQ,CAAC;;QAErD;QACA,IAAI,CAACoB,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;QAC3D;;QAEA;QACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClCtB,QAAQ,CAACqB,IAAI,CAAC,CAAC,CAAC;MAClB,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZnB,QAAQ,CAACmB,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC;QACvBC,OAAO,CAACtB,KAAK,CAAC,wBAAwB,EAAEoB,GAAG,CAAC;MAC9C,CAAC,SAAS;QACRrB,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF;IAEAa,UAAU,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,IAAId,OAAO,EAAE;IACX,oBAAON,OAAA;MAAK+B,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9D;EAEA,IAAI5B,KAAK,EAAE;IACT,oBAAOR,OAAA;MAAK+B,SAAS,EAAC,eAAe;MAAAC,QAAA,GAAC,SAAO,EAACxB,KAAK;IAAA;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAC5D;EAEA,oBACEpC,OAAA;IAAK+B,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BhC,OAAA;MAAI+B,SAAS,EAAC,WAAW;MAAAC,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9CpC,OAAA;MAAK+B,SAAS,EAAC,WAAW;MAAAC,QAAA,EACvB5B,KAAK,CAACiC,MAAM,GAAG,CAAC,GACfjC,KAAK,CAACkC,GAAG,CAACC,IAAI,iBACZvC,OAAA;QAAmB+B,SAAS,EAAC,WAAW;QAAAC,QAAA,gBAEtChC,OAAA;UACEwC,GAAG,EAAE,mDAAmDD,IAAI,CAACE,IAAI,CAACC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,EAAG;UACxFC,GAAG,EAAEJ,IAAI,CAACE,IAAK;UACfV,SAAS,EAAC,YAAY;UACtBa,OAAO,EAAGC,CAAC,IAAK;YAAEA,CAAC,CAACC,MAAM,CAACC,OAAO,GAAG,IAAI;YAAEF,CAAC,CAACC,MAAM,CAACN,GAAG,GAAG,+DAA+D;UAAE;QAAE;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9H,CAAC,eACFpC,OAAA;UAAI+B,SAAS,EAAC,WAAW;UAAAC,QAAA,EAAEO,IAAI,CAACE;QAAI;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC1CpC,OAAA;UAAG+B,SAAS,EAAC,WAAW;UAAAC,QAAA,GAAC,QAAM,EAACO,IAAI,CAACS,IAAI;QAAA;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9CpC,OAAA;UAAG+B,SAAS,EAAC,QAAQ;UAAAC,QAAA,GAAC,UAAQ,EAACO,IAAI,CAACU,MAAM;QAAA;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAVvCG,IAAI,CAACW,EAAE;QAAAjB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWZ,CACN,CAAC,gBAEFpC,OAAA;QAAAgC,QAAA,EAAG;MAAuC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAC9C;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACjC,EAAA,CAvEQD,GAAG;AAAAiD,EAAA,GAAHjD,GAAG;AAyEZ,eAAeA,GAAG;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}