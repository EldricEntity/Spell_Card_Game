{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aaron\\\\DND_Spell_Cards\\\\Spell_Card_Game\\\\DND_Spell_Cards_online\\\\frontend - Copy\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// dnd-spell-cards-app/frontend/src/App.js\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique keys for deck card instances\n\n// IMPORTANT: Re-enter your VM's Public IP address here.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://193.122.147.91:5000/api';\nfunction App() {\n  _s();\n  // --- State Variables ---\n  const [allCards, setAllCards] = useState([]);\n  const [characterLevel, setCharacterLevel] = useState(1);\n  const [wisMod, setWisMod] = useState(0);\n  const [intMod, setIntMod] = useState(0);\n  const [chaMod, setChaMod] = useState(0);\n  const [maxDeckSize, setMaxDeckSize] = useState(0);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // New states for login/auth\n  const [playerId, setPlayerId] = useState('');\n  const [password, setPassword] = useState('');\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [message, setMessage] = useState({\n    text: '',\n    type: ''\n  });\n\n  // --- Helper function to display messages ---\n  const showMessage = (text, type) => {\n    setMessage({\n      text,\n      type\n    });\n    setTimeout(() => setMessage({\n      text: '',\n      type: ''\n    }), 3000);\n  };\n\n  // --- API Call: Login and Load Deck ---\n  const handleLoginAndLoadDeck = async () => {\n    if (!playerId || !password) {\n      showMessage('Player ID and password are required to log in.', 'error');\n      return;\n    }\n    setLoading(true);\n    console.log(`[Frontend] Attempting to login and load deck for player: ${playerId}`);\n    try {\n      const response = await fetch(`${API_BASE_URL}/deck/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          player_id: playerId,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Authentication failed.');\n      }\n      setSelectedCards(data.cards || []);\n      setCharacterLevel(data.character_level !== undefined ? data.character_level : 1);\n      setWisMod(data.wis_mod !== undefined ? data.wis_mod : 0);\n      setIntMod(data.int_mod !== undefined ? data.int_mod : 0);\n      setChaMod(data.cha_mod !== undefined ? data.cha_mod : 0);\n      setIsAuthenticated(true);\n      showMessage('Login successful! Deck loaded.', 'success');\n      console.log('[Frontend] Login successful. Deck data received.');\n    } catch (err) {\n      setIsAuthenticated(false);\n      console.error('[Frontend] Error logging in:', err);\n      showMessage(`Failed to load deck: ${err.message}`, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // --- API Call: Save Deck ---\n  const handleSaveDeck = async () => {\n    if (!isAuthenticated) {\n      showMessage('You must be logged in to save your deck.', 'error');\n      return;\n    }\n    setLoading(true);\n    console.log(`[Frontend] Attempting to save deck for player: ${playerId}`);\n    try {\n      const response = await fetch(`${API_BASE_URL}/deck/save`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          player_id: playerId,\n          password: password,\n          cards: selectedCards,\n          character_level: characterLevel,\n          wis_mod: wisMod,\n          int_mod: intMod,\n          cha_mod: chaMod\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to save deck.');\n      }\n      showMessage('Deck and stats saved successfully!', 'success');\n      console.log('[Frontend] Deck saved successfully.');\n    } catch (err) {\n      console.error('[Frontend] Error saving deck:', err);\n      showMessage(`Failed to save deck: ${err.message}`, 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // --- EFFECT: Fetch All Cards ONLY after successful authentication ---\n  useEffect(() => {\n    const fetchAllCards = async () => {\n      setLoading(true);\n      console.log('[Frontend] Authenticated. Fetching all available cards...');\n      try {\n        const cardsResponse = await fetch(`${API_BASE_URL}/cards`);\n        if (!cardsResponse.ok) {\n          throw new Error(`HTTP error fetching cards! status: ${cardsResponse.status}`);\n        }\n        const cardsData = await cardsResponse.json();\n        setAllCards(cardsData);\n        console.log('[Frontend] Cards fetched successfully.');\n      } catch (err) {\n        console.error('[Frontend] Error fetching initial data:', err);\n        showMessage('Failed to fetch initial data: ' + err.message, 'error');\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (isAuthenticated) {\n      fetchAllCards();\n    }\n  }, [isAuthenticated]); // This effect now depends on the isAuthenticated state\n\n  // --- Effect to Calculate Max Deck Size when Character Stats Change ---\n  useEffect(() => {\n    const calculateDeckSize = async () => {\n      console.log('[Frontend] Calculating max deck size...');\n      try {\n        const response = await fetch(`${API_BASE_URL}/calculate_deck_size`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            character_level: characterLevel,\n            wis_mod: wisMod,\n            int_mod: intMod,\n            cha_mod: chaMod\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setMaxDeckSize(data.max_deck_size);\n        console.log(`[Frontend] Max deck size calculated: ${data.max_deck_size}`);\n      } catch (err) {\n        console.error('[Frontend] Error calculating deck size:', err);\n        showMessage('Failed to calculate deck size: ' + err.message, 'error');\n      }\n    };\n    if (isAuthenticated && !isNaN(characterLevel) && !isNaN(wisMod) && !isNaN(intMod) && !isNaN(chaMod)) {\n      calculateDeckSize();\n    }\n  }, [isAuthenticated, characterLevel, wisMod, intMod, chaMod]);\n\n  // --- Deck Building Logic: Add Card ---\n  const handleAddCardToDeck = card => {\n    if (selectedCards.length >= maxDeckSize) {\n      showMessage('Deck is full! Remove cards to add new ones.', 'error');\n      return;\n    }\n    const cantripCountInDeck = selectedCards.filter(c => c.type === 'Cantrip').length;\n    if (card.type !== 'Cantrip' && cantripCountInDeck === 0 && selectedCards.length === 0) {\n      showMessage('Your deck must contain at least one Cantrip! Add a Cantrip first.', 'error');\n      return;\n    }\n    setSelectedCards(prev => [...prev, {\n      ...card,\n      instance_id: uuidv4(),\n      current_uses: card.default_uses_per_rest\n    }]);\n    showMessage('Card added to your deck!', 'success');\n  };\n\n  // --- Deck Building Logic: Remove Card ---\n  const handleRemoveCardFromDeck = instance_id => {\n    const updatedDeck = selectedCards.filter(card => card.instance_id !== instance_id);\n    const cantripCount = updatedDeck.filter(c => c.type === 'Cantrip').length;\n    if (cantripCount === 0 && updatedDeck.length > 0) {\n      showMessage('Your deck must contain at least one Cantrip! You cannot remove the last one.', 'error');\n      return;\n    }\n    setSelectedCards(updatedDeck);\n    showMessage('Card removed from deck.', 'success');\n  };\n\n  // --- Card Usage Logic: Mark Card as Used ---\n  const handleMarkCardUsed = async instance_id => {\n    const cardToUse = selectedCards.find(card => card.instance_id === instance_id);\n    if (!cardToUse) return;\n    if (cardToUse.current_uses > 0) {\n      setSelectedCards(prev => prev.map(card => card.instance_id === instance_id ? {\n        ...card,\n        current_uses: card.current_uses - 1\n      } : card));\n\n      // Notify backend about the card usage for logging purposes.\n      try {\n        console.log(`[Frontend] Notifying backend of card usage: ${cardToUse.name}`);\n        const response = await fetch(`${API_BASE_URL}/card_used`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            card_name: cardToUse.name,\n            card_type: cardToUse.type,\n            deck_card_id: cardToUse.instance_id\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('[Backend] System Log Entry:', data.log_entry);\n      } catch (err) {\n        console.error('[Frontend] Error sending card used notification:', err);\n      }\n    } else {\n      showMessage(`\"${cardToUse.name}\" has no uses left! It needs a long rest.`, 'error');\n    }\n  };\n\n  // --- Card Usage Logic: Reset Card Uses (Long Rest) ---\n  const handleResetCardUses = instance_id => {\n    setSelectedCards(prev => prev.map(card => card.instance_id === instance_id ? {\n      ...card,\n      current_uses: card.default_uses_per_rest\n    } : card));\n    showMessage('Card uses reset!', 'success');\n  };\n\n  // --- Main Component Render ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Player ID\",\n        value: playerId,\n        onChange: e => setPlayerId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLoginAndLoadDeck,\n        children: \"Load Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveDeck,\n        children: \"Save Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this), message.text && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message-box ${message.type}`,\n      children: message.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 30\n    }, this), isAuthenticated ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Available Spells\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 25\n        }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading cards...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"all-cards-container\",\n          children: allCards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-item\",\n            onClick: () => handleAddCardToDeck(card),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-name\",\n              children: card.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-type\",\n              children: card.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-description\",\n              children: card.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 41\n            }, this)]\n          }, card.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your Deck\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Level: \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: characterLevel,\n              onChange: e => setCharacterLevel(parseInt(e.target.value) || 1),\n              min: \"1\",\n              max: \"20\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 43\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"WIS Mod: \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: wisMod,\n              onChange: e => setWisMod(parseInt(e.target.value) || 0),\n              min: \"0\",\n              max: \"6\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"INT Mod: \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: intMod,\n              onChange: e => setIntMod(parseInt(e.target.value) || 0),\n              min: \"0\",\n              max: \"6\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"CHA Mod: \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: chaMod,\n              onChange: e => setChaMod(parseInt(e.target.value) || 0),\n              min: \"0\",\n              max: \"6\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Max Deck Size: \", maxDeckSize]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"deck-container\",\n          children: selectedCards.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Click on an available spell to add it to your deck.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 33\n          }, this) : selectedCards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-item deck-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-name\",\n              children: card.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-type\",\n              children: card.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-description\",\n              children: card.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleMarkCardUsed(card.instance_id),\n                disabled: card.current_uses <= 0,\n                className: \"use-button\",\n                children: [\"Use (\", card.current_uses, \"/\", card.default_uses_per_rest, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleResetCardUses(card.instance_id),\n                className: \"reset-button\",\n                children: \"Reset Uses\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleRemoveCardFromDeck(card.instance_id),\n                className: \"remove-button\",\n                children: \"Remove\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 41\n            }, this)]\n          }, card.instance_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pre-login-message\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Please log in to load your character and spell deck.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"xgoqLEMG1VvM/LvTAe8pCPE1mvg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","v4","uuidv4","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","allCards","setAllCards","characterLevel","setCharacterLevel","wisMod","setWisMod","intMod","setIntMod","chaMod","setChaMod","maxDeckSize","setMaxDeckSize","selectedCards","setSelectedCards","loading","setLoading","playerId","setPlayerId","password","setPassword","isAuthenticated","setIsAuthenticated","message","setMessage","text","type","showMessage","setTimeout","handleLoginAndLoadDeck","console","log","response","fetch","method","headers","body","JSON","stringify","player_id","data","json","ok","Error","error","cards","character_level","undefined","wis_mod","int_mod","cha_mod","err","handleSaveDeck","fetchAllCards","cardsResponse","status","cardsData","calculateDeckSize","max_deck_size","isNaN","handleAddCardToDeck","card","length","cantripCountInDeck","filter","c","prev","instance_id","current_uses","default_uses_per_rest","handleRemoveCardFromDeck","updatedDeck","cantripCount","handleMarkCardUsed","cardToUse","find","map","name","card_name","card_type","deck_card_id","log_entry","handleResetCardUses","className","children","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","description","id","parseInt","min","max","disabled","_c","$RefreshReg$"],"sources":["C:/Users/aaron/DND_Spell_Cards/Spell_Card_Game/DND_Spell_Cards_online/frontend - Copy/src/App.js"],"sourcesContent":["// dnd-spell-cards-app/frontend/src/App.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique keys for deck card instances\r\n\r\n// IMPORTANT: Re-enter your VM's Public IP address here.\r\nconst API_BASE_URL = 'http://193.122.147.91:5000/api';\r\n\r\nfunction App() {\r\n    // --- State Variables ---\r\n    const [allCards, setAllCards] = useState([]);\r\n    const [characterLevel, setCharacterLevel] = useState(1);\r\n    const [wisMod, setWisMod] = useState(0);\r\n    const [intMod, setIntMod] = useState(0);\r\n    const [chaMod, setChaMod] = useState(0);\r\n    const [maxDeckSize, setMaxDeckSize] = useState(0);\r\n    const [selectedCards, setSelectedCards] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // New states for login/auth\r\n    const [playerId, setPlayerId] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [message, setMessage] = useState({ text: '', type: '' });\r\n\r\n    // --- Helper function to display messages ---\r\n    const showMessage = (text, type) => {\r\n        setMessage({ text, type });\r\n        setTimeout(() => setMessage({ text: '', type: '' }), 3000);\r\n    };\r\n\r\n    // --- API Call: Login and Load Deck ---\r\n    const handleLoginAndLoadDeck = async () => {\r\n        if (!playerId || !password) {\r\n            showMessage('Player ID and password are required to log in.', 'error');\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        console.log(`[Frontend] Attempting to login and load deck for player: ${playerId}`);\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/deck/login`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ player_id: playerId, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Authentication failed.');\r\n            }\r\n\r\n            setSelectedCards(data.cards || []);\r\n            setCharacterLevel(data.character_level !== undefined ? data.character_level : 1);\r\n            setWisMod(data.wis_mod !== undefined ? data.wis_mod : 0);\r\n            setIntMod(data.int_mod !== undefined ? data.int_mod : 0);\r\n            setChaMod(data.cha_mod !== undefined ? data.cha_mod : 0);\r\n            setIsAuthenticated(true);\r\n\r\n            showMessage('Login successful! Deck loaded.', 'success');\r\n            console.log('[Frontend] Login successful. Deck data received.');\r\n        } catch (err) {\r\n            setIsAuthenticated(false);\r\n            console.error('[Frontend] Error logging in:', err);\r\n            showMessage(`Failed to load deck: ${err.message}`, 'error');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // --- API Call: Save Deck ---\r\n    const handleSaveDeck = async () => {\r\n        if (!isAuthenticated) {\r\n            showMessage('You must be logged in to save your deck.', 'error');\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        console.log(`[Frontend] Attempting to save deck for player: ${playerId}`);\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/deck/save`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    player_id: playerId,\r\n                    password: password,\r\n                    cards: selectedCards,\r\n                    character_level: characterLevel,\r\n                    wis_mod: wisMod,\r\n                    int_mod: intMod,\r\n                    cha_mod: chaMod,\r\n                }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Failed to save deck.');\r\n            }\r\n\r\n            showMessage('Deck and stats saved successfully!', 'success');\r\n            console.log('[Frontend] Deck saved successfully.');\r\n        } catch (err) {\r\n            console.error('[Frontend] Error saving deck:', err);\r\n            showMessage(`Failed to save deck: ${err.message}`, 'error');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // --- EFFECT: Fetch All Cards ONLY after successful authentication ---\r\n    useEffect(() => {\r\n        const fetchAllCards = async () => {\r\n            setLoading(true);\r\n            console.log('[Frontend] Authenticated. Fetching all available cards...');\r\n            try {\r\n                const cardsResponse = await fetch(`${API_BASE_URL}/cards`);\r\n                if (!cardsResponse.ok) {\r\n                    throw new Error(`HTTP error fetching cards! status: ${cardsResponse.status}`);\r\n                }\r\n                const cardsData = await cardsResponse.json();\r\n                setAllCards(cardsData);\r\n                console.log('[Frontend] Cards fetched successfully.');\r\n            } catch (err) {\r\n                console.error('[Frontend] Error fetching initial data:', err);\r\n                showMessage('Failed to fetch initial data: ' + err.message, 'error');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        if (isAuthenticated) {\r\n            fetchAllCards();\r\n        }\r\n    }, [isAuthenticated]); // This effect now depends on the isAuthenticated state\r\n\r\n    // --- Effect to Calculate Max Deck Size when Character Stats Change ---\r\n    useEffect(() => {\r\n        const calculateDeckSize = async () => {\r\n            console.log('[Frontend] Calculating max deck size...');\r\n            try {\r\n                const response = await fetch(`${API_BASE_URL}/calculate_deck_size`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        character_level: characterLevel,\r\n                        wis_mod: wisMod,\r\n                        int_mod: intMod,\r\n                        cha_mod: chaMod,\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n                setMaxDeckSize(data.max_deck_size);\r\n                console.log(`[Frontend] Max deck size calculated: ${data.max_deck_size}`);\r\n            } catch (err) {\r\n                console.error('[Frontend] Error calculating deck size:', err);\r\n                showMessage('Failed to calculate deck size: ' + err.message, 'error');\r\n            }\r\n        };\r\n\r\n        if (isAuthenticated && !isNaN(characterLevel) && !isNaN(wisMod) && !isNaN(intMod) && !isNaN(chaMod)) {\r\n            calculateDeckSize();\r\n        }\r\n    }, [isAuthenticated, characterLevel, wisMod, intMod, chaMod]);\r\n\r\n    // --- Deck Building Logic: Add Card ---\r\n    const handleAddCardToDeck = (card) => {\r\n        if (selectedCards.length >= maxDeckSize) {\r\n            showMessage('Deck is full! Remove cards to add new ones.', 'error');\r\n            return;\r\n        }\r\n\r\n        const cantripCountInDeck = selectedCards.filter(c => c.type === 'Cantrip').length;\r\n        if (card.type !== 'Cantrip' && cantripCountInDeck === 0 && selectedCards.length === 0) {\r\n            showMessage('Your deck must contain at least one Cantrip! Add a Cantrip first.', 'error');\r\n            return;\r\n        }\r\n\r\n        setSelectedCards(prev => [...prev, {\r\n            ...card,\r\n            instance_id: uuidv4(),\r\n            current_uses: card.default_uses_per_rest\r\n        }]);\r\n        showMessage('Card added to your deck!', 'success');\r\n    };\r\n\r\n    // --- Deck Building Logic: Remove Card ---\r\n    const handleRemoveCardFromDeck = (instance_id) => {\r\n        const updatedDeck = selectedCards.filter(card => card.instance_id !== instance_id);\r\n        const cantripCount = updatedDeck.filter(c => c.type === 'Cantrip').length;\r\n\r\n        if (cantripCount === 0 && updatedDeck.length > 0) {\r\n            showMessage('Your deck must contain at least one Cantrip! You cannot remove the last one.', 'error');\r\n            return;\r\n        }\r\n        setSelectedCards(updatedDeck);\r\n        showMessage('Card removed from deck.', 'success');\r\n    };\r\n\r\n    // --- Card Usage Logic: Mark Card as Used ---\r\n    const handleMarkCardUsed = async (instance_id) => {\r\n        const cardToUse = selectedCards.find(card => card.instance_id === instance_id);\r\n        if (!cardToUse) return;\r\n\r\n        if (cardToUse.current_uses > 0) {\r\n            setSelectedCards(prev =>\r\n                prev.map(card =>\r\n                    card.instance_id === instance_id ? { ...card, current_uses: card.current_uses - 1 } : card\r\n                )\r\n            );\r\n\r\n            // Notify backend about the card usage for logging purposes.\r\n            try {\r\n                console.log(`[Frontend] Notifying backend of card usage: ${cardToUse.name}`);\r\n                const response = await fetch(`${API_BASE_URL}/card_used`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        card_name: cardToUse.name,\r\n                        card_type: cardToUse.type,\r\n                        deck_card_id: cardToUse.instance_id\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n                console.log('[Backend] System Log Entry:', data.log_entry);\r\n            } catch (err) {\r\n                console.error('[Frontend] Error sending card used notification:', err);\r\n            }\r\n        } else {\r\n            showMessage(`\"${cardToUse.name}\" has no uses left! It needs a long rest.`, 'error');\r\n        }\r\n    };\r\n\r\n    // --- Card Usage Logic: Reset Card Uses (Long Rest) ---\r\n    const handleResetCardUses = (instance_id) => {\r\n        setSelectedCards(prev =>\r\n            prev.map(card =>\r\n                card.instance_id === instance_id ? { ...card, current_uses: card.default_uses_per_rest } : card\r\n            )\r\n        );\r\n        showMessage('Card uses reset!', 'success');\r\n    };\r\n\r\n    // --- Main Component Render ---\r\n    return (\r\n        <div className=\"App\">\r\n            {/* Login Section */}\r\n            <div className=\"login-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Player ID\"\r\n                    value={playerId}\r\n                    onChange={(e) => setPlayerId(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n                <button onClick={handleLoginAndLoadDeck}>Load Deck</button>\r\n                <button onClick={handleSaveDeck}>Save Deck</button>\r\n            </div>\r\n\r\n            {/* Message Box */}\r\n            {message.text && <div className={`message-box ${message.type}`}>{message.text}</div>}\r\n\r\n            {/* The main application is conditionally rendered */}\r\n            {isAuthenticated ? (\r\n                <div className=\"app-container\">\r\n                    <div className=\"left-column\">\r\n                        <h2>Available Spells</h2>\r\n                        {loading ? (\r\n                            <p>Loading cards...</p>\r\n                        ) : (\r\n                            <div className=\"all-cards-container\">\r\n                                {allCards.map((card) => (\r\n                                    <div key={card.id} className=\"card-item\" onClick={() => handleAddCardToDeck(card)}>\r\n                                        <div className=\"card-name\">{card.name}</div>\r\n                                        <div className=\"card-type\">{card.type}</div>\r\n                                        <div className=\"card-description\">{card.description}</div>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className=\"right-column\">\r\n                        <h2>Your Deck</h2>\r\n                        <div className=\"stats-container\">\r\n                            <label>Level: <input type=\"number\" value={characterLevel} onChange={e => setCharacterLevel(parseInt(e.target.value) || 1)} min=\"1\" max=\"20\" /></label>\r\n                            <label>WIS Mod: <input type=\"number\" value={wisMod} onChange={e => setWisMod(parseInt(e.target.value) || 0)} min=\"0\" max=\"6\" /></label>\r\n                            <label>INT Mod: <input type=\"number\" value={intMod} onChange={e => setIntMod(parseInt(e.target.value) || 0)} min=\"0\" max=\"6\" /></label>\r\n                            <label>CHA Mod: <input type=\"number\" value={chaMod} onChange={e => setChaMod(parseInt(e.target.value) || 0)} min=\"0\" max=\"6\" /></label>\r\n                            <p>Max Deck Size: {maxDeckSize}</p>\r\n                        </div>\r\n\r\n                        <div className=\"deck-container\">\r\n                            {selectedCards.length === 0 ? (\r\n                                <p>Click on an available spell to add it to your deck.</p>\r\n                            ) : (\r\n                                selectedCards.map((card) => (\r\n                                    <div key={card.instance_id} className=\"card-item deck-card\">\r\n                                        <div className=\"card-name\">{card.name}</div>\r\n                                        <div className=\"card-type\">{card.type}</div>\r\n                                        <div className=\"card-description\">{card.description}</div>\r\n                                        <div className=\"card-actions\">\r\n                                            <button\r\n                                                onClick={() => handleMarkCardUsed(card.instance_id)}\r\n                                                disabled={card.current_uses <= 0}\r\n                                                className=\"use-button\"\r\n                                            >\r\n                                                Use ({card.current_uses}/{card.default_uses_per_rest})\r\n                                            </button>\r\n                                            <button\r\n                                                onClick={() => handleResetCardUses(card.instance_id)}\r\n                                                className=\"reset-button\"\r\n                                            >\r\n                                                Reset Uses\r\n                                            </button>\r\n                                            <button\r\n                                                onClick={() => handleRemoveCardFromDeck(card.instance_id)}\r\n                                                className=\"remove-button\"\r\n                                            >\r\n                                                Remove\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                ))\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <div className=\"pre-login-message\">\r\n                    <h3>Please log in to load your character and spell deck.</h3>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}