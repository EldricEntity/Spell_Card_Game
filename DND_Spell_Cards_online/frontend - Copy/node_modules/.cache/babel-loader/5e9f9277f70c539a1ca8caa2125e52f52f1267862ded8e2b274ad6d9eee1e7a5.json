{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aaron\\\\DND_Spell_Cards\\\\Spell_Card_Game\\\\dnd_spell_cards_app\\\\frontend - Copy\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// dnd-spell-cards-app/frontend/src/App.js\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react'; // Added useRef\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique keys for deck card instances\n\n// IMPORTANT: Update this to your VM's Public IP address (or domain name if configured)\n// When running locally against your local Flask, it's 'http://127.0.0.1:5000/api'.\n// When running React locally against Flask on VM, it's 'http://YOUR_VM_PUBLIC_IP:5000/api'.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://193.122.147.91:5000/api';\nfunction App() {\n  _s();\n  // --- State Variables ---\n  const [allCards, setAllCards] = useState([]); // All cards fetched from the backend (master list)\n  const [characterLevel, setCharacterLevel] = useState(1);\n  const [wisMod, setWisMod] = useState(0);\n  const [intMod, setIntMod] = useState(0);\n  const [chaMod, setChaMod] = useState(0);\n  const [maxDeckSize, setMaxDeckSize] = useState(0);\n  const [selectedCards, setSelectedCards] = useState([]); // Cards currently in the player's deck (persistent)\n  const [error, setError] = useState(''); // General error messages for UI\n  const [loading, setLoading] = useState(true); // Loading state for initial data fetch\n\n  // Ref to prevent initial useEffect for saving deck from firing\n  const isInitialMount = useRef(true);\n\n  // --- Helper function to save the current deck state to the backend ---\n  const saveDeckToBackend = useCallback(async (currentDeck, currentLevel, currentWisMod, currentIntMod, currentChaMod) => {\n    console.log(\"DEBUG: saveDeckToBackend called with currentDeck:\", currentDeck);\n    console.log(\"DEBUG: Sending character stats to backend:\", {\n      currentLevel,\n      currentWisMod,\n      currentIntMod,\n      currentChaMod\n    });\n    try {\n      const response = await fetch(`${API_BASE_URL}/deck`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          cards: currentDeck,\n          character_level: currentLevel,\n          wis_mod: currentWisMod,\n          int_mod: currentIntMod,\n          cha_mod: currentChaMod\n        }) // Send the entire deck array AND character stats\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Deck and stats saved to backend:', data.message);\n    } catch (err) {\n      setError('Failed to save deck and stats: ' + err.message);\n      console.error('Error saving deck and stats to backend:', err);\n    }\n  }, []);\n  // --- Effect to Save Deck and Stats to Backend whenever relevant state changes ---\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n      return;\n    }\n    console.log(\"DEBUG: useEffect triggered for state change. Current selectedCards:\", selectedCards, \"Level:\", characterLevel);\n    saveDeckToBackend(selectedCards, characterLevel, wisMod, intMod, chaMod);\n  }, [selectedCards, characterLevel, wisMod, intMod, chaMod, saveDeckToBackend]);\n\n  // Dependencies are now passed as arguments, so only add `setError` if it changes\n\n  // No dependencies, as it operates on the passed `currentDeck`\n\n  // --- Effect to Fetch All Cards AND Player Deck from Backend on Component Mount ---\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        // Fetch master list of all cards\n        const cardsResponse = await fetch(`${API_BASE_URL}/cards`);\n        if (!cardsResponse.ok) {\n          throw new Error(`HTTP error fetching cards! status: ${cardsResponse.status}`);\n        }\n        const cardsData = await cardsResponse.json();\n        setAllCards(cardsData);\n\n        // Fetch player's saved deck\n        const deckResponse = await fetch(`${API_BASE_URL}/deck`);\n        if (!deckResponse.ok) {\n          throw new Error(`HTTP error fetching deck! status: ${deckResponse.status}`);\n        }\n        const deckData = await deckResponse.json();\n        setSelectedCards(deckData); // Load the saved deck\n      } catch (err) {\n        setError('Failed to fetch initial data: ' + err.message);\n        console.error('Error fetching initial data:', err);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchData();\n  }, [saveDeckToBackend]); // Include saveDeckToBackend as a dependency for linting, though it won't re-run fetch\n\n  // --- Effect to Calculate Max Deck Size when Character Stats Change ---\n  useEffect(() => {\n    const calculateDeckSize = async () => {\n      setError(''); // Clear previous errors related to deck size\n      try {\n        const response = await fetch(`${API_BASE_URL}/calculate_deck_size`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            character_level: characterLevel,\n            wis_mod: wisMod,\n            int_mod: intMod,\n            cha_mod: chaMod\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setMaxDeckSize(data.max_deck_size);\n      } catch (err) {\n        setError('Failed to calculate deck size: ' + err.message);\n        console.error('Error calculating deck size:', err);\n      }\n    };\n    if (!isNaN(characterLevel) && !isNaN(wisMod) && !isNaN(intMod) && !isNaN(chaMod)) {\n      calculateDeckSize();\n    }\n  }, [characterLevel, wisMod, intMod, chaMod]);\n\n  // --- Effect to Save Deck to Backend whenever `selectedCards` changes ---\n  useEffect(() => {\n    // Prevent saving on the initial render when the deck is just loaded from backend\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n      return;\n    }\n    saveDeckToBackend(selectedCards);\n  }, [selectedCards, saveDeckToBackend]);\n\n  // --- Deck Building Logic: Add Card ---\n  const handleAddCardToDeck = card => {\n    if (selectedCards.length >= maxDeckSize) {\n      setError('Deck is full! Remove cards to add new ones.');\n      return;\n    }\n    const cantripCountInDeck = selectedCards.filter(c => c.type === 'Cantrip').length;\n    if (card.type !== 'Cantrip' && cantripCountInDeck === 0 && selectedCards.length === 0) {\n      setError('Your deck must contain at least one Cantrip! Add a Cantrip first.');\n      return;\n    }\n    setSelectedCards(prev => [...prev, {\n      ...card,\n      instance_id: uuidv4(),\n      current_uses: card.default_uses_per_rest\n    }]);\n    setError('');\n  };\n\n  // --- Deck Building Logic: Remove Card ---\n  const handleRemoveCardFromDeck = instance_id => {\n    const updatedDeck = selectedCards.filter(card => card.instance_id !== instance_id);\n    const cantripCount = updatedDeck.filter(c => c.type === 'Cantrip').length;\n    if (cantripCount === 0 && updatedDeck.length > 0) {\n      setError('Your deck must contain at least one Cantrip! You cannot remove the last one.');\n      return;\n    }\n    setSelectedCards(updatedDeck);\n    setError('');\n  };\n\n  // --- Card Usage Logic: Mark Card as Used ---\n  const handleMarkCardUsed = async instance_id => {\n    const cardToUse = selectedCards.find(card => card.instance_id === instance_id);\n    if (!cardToUse) return;\n    if (cardToUse.current_uses > 0) {\n      setSelectedCards(prev => prev.map(card => card.instance_id === instance_id ? {\n        ...card,\n        current_uses: card.current_uses - 1\n      } : card));\n\n      // Notify backend about the card usage for logging purposes.\n      try {\n        const response = await fetch(`${API_BASE_URL}/card_used`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            card_name: cardToUse.name,\n            card_type: cardToUse.type,\n            deck_card_id: cardToUse.instance_id\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Backend notification:', data.message);\n        console.log('Simulated System Log Entry from Backend:', data.log_entry);\n      } catch (err) {\n        setError('Failed to notify backend of card usage for logging: ' + err.message);\n        console.error('Error sending card used notification:', err);\n      }\n    } else {\n      setError(`\"${cardToUse.name}\" has no uses left! It needs a long rest.`);\n    }\n  };\n\n  // --- Card Usage Logic: Reset Card Uses (Long Rest) ---\n  const handleResetCardUses = instance_id => {\n    setSelectedCards(prev => prev.map(card => card.instance_id === instance_id ? {\n      ...card,\n      current_uses: card.default_uses_per_rest\n    } : card));\n    setError('');\n  };\n\n  // --- Conditional Rendering for Loading/Error States ---\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: \"Loading cards...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 16\n    }, this);\n  }\n  if (error && !loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 16\n    }, this);\n  }\n\n  // --- Main Component Render ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"Spell Trading Cards Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-stats-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"panel-title\",\n        children: \"Character Stats\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"charLevel\",\n          children: \"Level:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"charLevel\",\n          type: \"number\",\n          value: characterLevel,\n          onChange: e => setCharacterLevel(Math.max(1, parseInt(e.target.value) || 1)),\n          min: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"wisMod\",\n          children: \"WIS Mod:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"wisMod\",\n          type: \"number\",\n          value: wisMod,\n          onChange: e => setWisMod(parseInt(e.target.value) || 0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"intMod\",\n          children: \"INT Mod:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"intMod\",\n          type: \"number\",\n          value: intMod,\n          onChange: e => setIntMod(parseInt(e.target.value) || 0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"chaMod\",\n          children: \"CHA Mod:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"chaMod\",\n          type: \"number\",\n          value: chaMod,\n          onChange: e => setChaMod(parseInt(e.target.value) || 0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"deck-summary\",\n        children: [\"Max Deck Size: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"highlight\",\n          children: maxDeckSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 36\n        }, this), \" | Current Deck: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"highlight\",\n          children: selectedCards.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 101\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-collection-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"panel-title\",\n          children: \"Available Spells\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-list\",\n          children: allCards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-item available-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `https://placehold.co/100x150/a8dadc/ffffff?text=${card.name.split('.')[0].replace('_', '%20')}`,\n              alt: card.name,\n              className: \"card-image\",\n              onError: e => {\n                e.target.onerror = null;\n                e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\";\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"card-name\",\n              children: [card.name, \" (\", card.type, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-description\",\n              children: card.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-meta\",\n              children: [\"Rarity: \", card.rarity]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleAddCardToDeck(card),\n              disabled: selectedCards.length >= maxDeckSize,\n              className: \"select-button\",\n              children: \"Add to Deck\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 33\n            }, this)]\n          }, card.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"built-deck-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"panel-title\",\n          children: [\"Your Deck (\", selectedCards.length, \"/\", maxDeckSize, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"deck-list\",\n          children: selectedCards.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"empty-message\",\n            children: \"Select cards from the left to build your deck!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 29\n          }, this) : selectedCards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-item deck-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `https://placehold.co/100x150/a8dadc/ffffff?text=${card.name.split('.')[0].replace('_', '%20')}`,\n              alt: card.name,\n              className: \"card-image\",\n              onError: e => {\n                e.target.onerror = null;\n                e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\";\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"card-name\",\n              children: [card.name, \" (\", card.type, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-description\",\n              children: card.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-uses\",\n              children: [\"Uses Left: \", card.current_uses, \"/\", card.default_uses_per_rest]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleMarkCardUsed(card.instance_id),\n                disabled: card.current_uses <= 0,\n                className: \"use-button\",\n                children: \"Use\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleResetCardUses(card.instance_id),\n                className: \"reset-button\",\n                children: \"Reset Uses\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleRemoveCardFromDeck(card.instance_id),\n                className: \"remove-button\",\n                children: \"Remove\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 37\n            }, this)]\n          }, card.instance_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"IfabXKc7zifp3M2SZnqXpwzQZ18=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","v4","uuidv4","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","allCards","setAllCards","characterLevel","setCharacterLevel","wisMod","setWisMod","intMod","setIntMod","chaMod","setChaMod","maxDeckSize","setMaxDeckSize","selectedCards","setSelectedCards","error","setError","loading","setLoading","isInitialMount","saveDeckToBackend","currentDeck","currentLevel","currentWisMod","currentIntMod","currentChaMod","console","log","response","fetch","method","headers","body","JSON","stringify","cards","character_level","wis_mod","int_mod","cha_mod","ok","Error","status","data","json","message","err","current","fetchData","cardsResponse","cardsData","deckResponse","deckData","calculateDeckSize","max_deck_size","isNaN","handleAddCardToDeck","card","length","cantripCountInDeck","filter","c","type","prev","instance_id","current_uses","default_uses_per_rest","handleRemoveCardFromDeck","updatedDeck","cantripCount","handleMarkCardUsed","cardToUse","find","map","card_name","name","card_type","deck_card_id","log_entry","handleResetCardUses","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","value","onChange","e","Math","max","parseInt","target","min","src","split","replace","alt","onError","onerror","description","rarity","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/aaron/DND_Spell_Cards/Spell_Card_Game/dnd_spell_cards_app/frontend - Copy/src/App.js"],"sourcesContent":["// dnd-spell-cards-app/frontend/src/App.js\r\n\r\nimport React, { useState, useEffect, useCallback, useRef } from 'react'; // Added useRef\r\nimport './App.css';\r\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique keys for deck card instances\r\n\r\n// IMPORTANT: Update this to your VM's Public IP address (or domain name if configured)\r\n// When running locally against your local Flask, it's 'http://127.0.0.1:5000/api'.\r\n// When running React locally against Flask on VM, it's 'http://YOUR_VM_PUBLIC_IP:5000/api'.\r\nconst API_BASE_URL = 'http://193.122.147.91:5000/api'; \r\n\r\n\r\nfunction App() {\r\n    // --- State Variables ---\r\n    const [allCards, setAllCards] = useState([]); // All cards fetched from the backend (master list)\r\n    const [characterLevel, setCharacterLevel] = useState(1);\r\n    const [wisMod, setWisMod] = useState(0);\r\n    const [intMod, setIntMod] = useState(0);\r\n    const [chaMod, setChaMod] = useState(0);\r\n    const [maxDeckSize, setMaxDeckSize] = useState(0);\r\n    const [selectedCards, setSelectedCards] = useState([]); // Cards currently in the player's deck (persistent)\r\n    const [error, setError] = useState(''); // General error messages for UI\r\n    const [loading, setLoading] = useState(true); // Loading state for initial data fetch\r\n\r\n    // Ref to prevent initial useEffect for saving deck from firing\r\n    const isInitialMount = useRef(true);\r\n\r\n    // --- Helper function to save the current deck state to the backend ---\r\n     const saveDeckToBackend = useCallback(async (currentDeck, currentLevel, currentWisMod, currentIntMod, currentChaMod) => {\r\n        console.log(\"DEBUG: saveDeckToBackend called with currentDeck:\", currentDeck);\r\n        console.log(\"DEBUG: Sending character stats to backend:\", { currentLevel, currentWisMod, currentIntMod, currentChaMod });\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/deck`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    cards: currentDeck,\r\n                    character_level: currentLevel,\r\n                    wis_mod: currentWisMod,\r\n                    int_mod: currentIntMod,\r\n                    cha_mod: currentChaMod,\r\n                }), // Send the entire deck array AND character stats\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            console.log('Deck and stats saved to backend:', data.message);\r\n        } catch (err) {\r\n            setError('Failed to save deck and stats: ' + err.message);\r\n            console.error('Error saving deck and stats to backend:', err);\r\n        }\r\n    }, []); \r\n    // --- Effect to Save Deck and Stats to Backend whenever relevant state changes ---\r\n    useEffect(() => {\r\n        if (isInitialMount.current) {\r\n            isInitialMount.current = false;\r\n            return;\r\n        }\r\n        console.log(\"DEBUG: useEffect triggered for state change. Current selectedCards:\", selectedCards, \"Level:\", characterLevel);\r\n        saveDeckToBackend(selectedCards, characterLevel, wisMod, intMod, chaMod);\r\n    }, [selectedCards, characterLevel, wisMod, intMod, chaMod, saveDeckToBackend]);\r\n\r\n\r\n    // Dependencies are now passed as arguments, so only add `setError` if it changes\r\n\r\n    // No dependencies, as it operates on the passed `currentDeck`\r\n\r\n    // --- Effect to Fetch All Cards AND Player Deck from Backend on Component Mount ---\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                // Fetch master list of all cards\r\n                const cardsResponse = await fetch(`${API_BASE_URL}/cards`);\r\n                if (!cardsResponse.ok) {\r\n                    throw new Error(`HTTP error fetching cards! status: ${cardsResponse.status}`);\r\n                }\r\n                const cardsData = await cardsResponse.json();\r\n                setAllCards(cardsData);\r\n\r\n                // Fetch player's saved deck\r\n                const deckResponse = await fetch(`${API_BASE_URL}/deck`);\r\n                if (!deckResponse.ok) {\r\n                    throw new Error(`HTTP error fetching deck! status: ${deckResponse.status}`);\r\n                }\r\n                const deckData = await deckResponse.json();\r\n                setSelectedCards(deckData); // Load the saved deck\r\n\r\n            } catch (err) {\r\n                setError('Failed to fetch initial data: ' + err.message);\r\n                console.error('Error fetching initial data:', err);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n        fetchData();\r\n    }, [saveDeckToBackend]); // Include saveDeckToBackend as a dependency for linting, though it won't re-run fetch\r\n\r\n    // --- Effect to Calculate Max Deck Size when Character Stats Change ---\r\n    useEffect(() => {\r\n        const calculateDeckSize = async () => {\r\n            setError(''); // Clear previous errors related to deck size\r\n            try {\r\n                const response = await fetch(`${API_BASE_URL}/calculate_deck_size`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        character_level: characterLevel,\r\n                        wis_mod: wisMod,\r\n                        int_mod: intMod,\r\n                        cha_mod: chaMod,\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n                setMaxDeckSize(data.max_deck_size);\r\n            } catch (err) {\r\n                setError('Failed to calculate deck size: ' + err.message);\r\n                console.error('Error calculating deck size:', err);\r\n            }\r\n        };\r\n\r\n        if (!isNaN(characterLevel) && !isNaN(wisMod) && !isNaN(intMod) && !isNaN(chaMod)) {\r\n            calculateDeckSize();\r\n        }\r\n    }, [characterLevel, wisMod, intMod, chaMod]);\r\n\r\n    // --- Effect to Save Deck to Backend whenever `selectedCards` changes ---\r\n    useEffect(() => {\r\n        // Prevent saving on the initial render when the deck is just loaded from backend\r\n        if (isInitialMount.current) {\r\n            isInitialMount.current = false;\r\n            return;\r\n        }\r\n        saveDeckToBackend(selectedCards);\r\n    }, [selectedCards, saveDeckToBackend]);\r\n\r\n\r\n    // --- Deck Building Logic: Add Card ---\r\n    const handleAddCardToDeck = (card) => {\r\n        if (selectedCards.length >= maxDeckSize) {\r\n            setError('Deck is full! Remove cards to add new ones.');\r\n            return;\r\n        }\r\n\r\n        const cantripCountInDeck = selectedCards.filter(c => c.type === 'Cantrip').length;\r\n        if (card.type !== 'Cantrip' && cantripCountInDeck === 0 && selectedCards.length === 0) {\r\n             setError('Your deck must contain at least one Cantrip! Add a Cantrip first.');\r\n             return;\r\n        }\r\n\r\n        setSelectedCards(prev => [...prev, {\r\n            ...card,\r\n            instance_id: uuidv4(),\r\n            current_uses: card.default_uses_per_rest\r\n        }]);\r\n        setError('');\r\n    };\r\n\r\n    // --- Deck Building Logic: Remove Card ---\r\n    const handleRemoveCardFromDeck = (instance_id) => {\r\n        const updatedDeck = selectedCards.filter(card => card.instance_id !== instance_id);\r\n        const cantripCount = updatedDeck.filter(c => c.type === 'Cantrip').length;\r\n\r\n        if (cantripCount === 0 && updatedDeck.length > 0) {\r\n            setError('Your deck must contain at least one Cantrip! You cannot remove the last one.');\r\n            return;\r\n        }\r\n        setSelectedCards(updatedDeck);\r\n        setError('');\r\n    };\r\n\r\n    // --- Card Usage Logic: Mark Card as Used ---\r\n    const handleMarkCardUsed = async (instance_id) => {\r\n        const cardToUse = selectedCards.find(card => card.instance_id === instance_id);\r\n        if (!cardToUse) return;\r\n\r\n        if (cardToUse.current_uses > 0) {\r\n            setSelectedCards(prev =>\r\n                prev.map(card =>\r\n                    card.instance_id === instance_id ? { ...card, current_uses: card.current_uses - 1 } : card\r\n                )\r\n            );\r\n\r\n            // Notify backend about the card usage for logging purposes.\r\n            try {\r\n                const response = await fetch(`${API_BASE_URL}/card_used`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        card_name: cardToUse.name,\r\n                        card_type: cardToUse.type,\r\n                        deck_card_id: cardToUse.instance_id\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n                console.log('Backend notification:', data.message);\r\n                console.log('Simulated System Log Entry from Backend:', data.log_entry);\r\n            } catch (err) {\r\n                setError('Failed to notify backend of card usage for logging: ' + err.message);\r\n                console.error('Error sending card used notification:', err);\r\n            }\r\n        } else {\r\n            setError(`\"${cardToUse.name}\" has no uses left! It needs a long rest.`);\r\n        }\r\n    };\r\n\r\n    // --- Card Usage Logic: Reset Card Uses (Long Rest) ---\r\n    const handleResetCardUses = (instance_id) => {\r\n        setSelectedCards(prev =>\r\n            prev.map(card =>\r\n                card.instance_id === instance_id ? { ...card, current_uses: card.default_uses_per_rest } : card\r\n            )\r\n        );\r\n        setError('');\r\n    };\r\n\r\n    // --- Conditional Rendering for Loading/Error States ---\r\n    if (loading) {\r\n        return <div className=\"app-container\">Loading cards...</div>;\r\n    }\r\n\r\n    if (error && !loading) {\r\n        return <div className=\"error-message\">{error}</div>;\r\n    }\r\n\r\n    // --- Main Component Render ---\r\n    return (\r\n        <div className=\"app-container\">\r\n            <h1 className=\"app-title\">Spell Trading Cards Manager</h1>\r\n\r\n            {/* Character Stats Input Panel */}\r\n            <div className=\"character-stats-panel\">\r\n                <h2 className=\"panel-title\">Character Stats</h2>\r\n                <div className=\"input-group\">\r\n                    <label htmlFor=\"charLevel\">Level:</label>\r\n                    <input\r\n                        id=\"charLevel\"\r\n                        type=\"number\"\r\n                        value={characterLevel}\r\n                        onChange={(e) => setCharacterLevel(Math.max(1, parseInt(e.target.value) || 1))}\r\n                        min=\"1\"\r\n                    />\r\n                </div>\r\n                <div className=\"input-group\">\r\n                    <label htmlFor=\"wisMod\">WIS Mod:</label>\r\n                    <input\r\n                        id=\"wisMod\"\r\n                        type=\"number\"\r\n                        value={wisMod}\r\n                        onChange={(e) => setWisMod(parseInt(e.target.value) || 0)}\r\n                    />\r\n                </div>\r\n                <div className=\"input-group\">\r\n                    <label htmlFor=\"intMod\">INT Mod:</label>\r\n                    <input\r\n                        id=\"intMod\"\r\n                        type=\"number\"\r\n                        value={intMod}\r\n                        onChange={(e) => setIntMod(parseInt(e.target.value) || 0)}\r\n                    />\r\n                </div>\r\n                <div className=\"input-group\">\r\n                    <label htmlFor=\"chaMod\">CHA Mod:</label>\r\n                    <input\r\n                        id=\"chaMod\"\r\n                        type=\"number\"\r\n                        value={chaMod}\r\n                        onChange={(e) => setChaMod(parseInt(e.target.value) || 0)}\r\n                    />\r\n                </div>\r\n                <div className=\"deck-summary\">\r\n                    Max Deck Size: <span className=\"highlight\">{maxDeckSize}</span> | Current Deck: <span className=\"highlight\">{selectedCards.length}</span>\r\n                </div>\r\n                {error && <div className=\"error-message\">{error}</div>}\r\n            </div>\r\n\r\n            <div className=\"main-content\">\r\n                {/* Available Cards Section */}\r\n                <div className=\"card-collection-panel\">\r\n                    <h2 className=\"panel-title\">Available Spells</h2>\r\n                    <div className=\"card-list\">\r\n                        {allCards.map((card) => (\r\n                            <div key={card.id} className=\"card-item available-card\">\r\n                                <img\r\n                                    src={`https://placehold.co/100x150/a8dadc/ffffff?text=${card.name.split('.')[0].replace('_', '%20')}`}\r\n                                    alt={card.name}\r\n                                    className=\"card-image\"\r\n                                    onError={(e) => { e.target.onerror = null; e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\"; }}\r\n                                />\r\n                                <h3 className=\"card-name\">{card.name} ({card.type})</h3>\r\n                                <p className=\"card-description\">{card.description}</p>\r\n                                <p className=\"card-meta\">Rarity: {card.rarity}</p>\r\n                                <button\r\n                                    onClick={() => handleAddCardToDeck(card)}\r\n                                    disabled={selectedCards.length >= maxDeckSize}\r\n                                    className=\"select-button\"\r\n                                >\r\n                                    Add to Deck\r\n                                </button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Built Deck Section */}\r\n                <div className=\"built-deck-panel\">\r\n                    <h2 className=\"panel-title\">Your Deck ({selectedCards.length}/{maxDeckSize})</h2>\r\n                    <div className=\"deck-list\">\r\n                        {selectedCards.length === 0 ? (\r\n                            <p className=\"empty-message\">Select cards from the left to build your deck!</p>\r\n                        ) : (\r\n                            selectedCards.map((card) => (\r\n                                <div key={card.instance_id} className=\"card-item deck-card\">\r\n                                    <img\r\n                                        src={`https://placehold.co/100x150/a8dadc/ffffff?text=${card.name.split('.')[0].replace('_', '%20')}`}\r\n                                        alt={card.name}\r\n                                        className=\"card-image\"\r\n                                        onError={(e) => { e.target.onerror = null; e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\"; }}\r\n                                    />\r\n                                    <h3 className=\"card-name\">{card.name} ({card.type})</h3>\r\n                                    <p className=\"card-description\">{card.description}</p>\r\n                                    <p className=\"card-uses\">Uses Left: {card.current_uses}/{card.default_uses_per_rest}</p>\r\n                                    <div className=\"card-actions\">\r\n                                        <button\r\n                                            onClick={() => handleMarkCardUsed(card.instance_id)}\r\n                                            disabled={card.current_uses <= 0}\r\n                                            className=\"use-button\"\r\n                                        >\r\n                                            Use\r\n                                        </button>\r\n                                        <button\r\n                                            onClick={() => handleResetCardUses(card.instance_id)}\r\n                                            className=\"reset-button\"\r\n                                        >\r\n                                            Reset Uses\r\n                                        </button>\r\n                                        <button\r\n                                            onClick={() => handleRemoveCardFromDeck(card.instance_id)}\r\n                                            className=\"remove-button\"\r\n                                        >\r\n                                            Remove\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}