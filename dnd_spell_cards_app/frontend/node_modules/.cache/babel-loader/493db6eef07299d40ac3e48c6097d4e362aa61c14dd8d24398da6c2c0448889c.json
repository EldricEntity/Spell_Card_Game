{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\smith\\\\OneDrive\\\\Documents\\\\New folder\\\\Spell_Card_Game\\\\dnd_spell_cards_app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// dnd-spell-cards-app/frontend/src/App.js\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique keys for deck card instances\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000/api'; // Ensure this matches your Flask port\n\nfunction App() {\n  _s();\n  // --- State Variables ---\n  const [allCards, setAllCards] = useState([]); // All cards fetched from the backend\n  const [characterLevel, setCharacterLevel] = useState(1);\n  const [wisMod, setWisMod] = useState(0);\n  const [intMod, setIntMod] = useState(0);\n  const [chaMod, setChaMod] = useState(0);\n  const [maxDeckSize, setMaxDeckSize] = useState(0);\n  const [selectedCards, setSelectedCards] = useState([]); // Cards currently in the player's deck\n  const [error, setError] = useState(''); // General error messages for UI\n  const [loading, setLoading] = useState(true); // Loading state for initial data fetch\n\n  // --- Effect to Fetch All Cards from Backend on Component Mount ---\n  const fetchAllCards = useCallback(async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/cards`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      // Store the raw cards from the backend\n      setAllCards(data);\n      setLoading(false);\n    } catch (err) {\n      setError('Failed to fetch cards: ' + err.message);\n      setLoading(false);\n      console.error('Error fetching cards:', err);\n    }\n  }, []);\n  useEffect(() => {\n    fetchAllCards();\n  }, [fetchAllCards]);\n\n  // --- Effect to Calculate Max Deck Size when Character Stats Change ---\n  useEffect(() => {\n    const calculateDeckSize = async () => {\n      setError(''); // Clear previous errors related to deck size\n      try {\n        const response = await fetch(`${API_BASE_URL}/calculate_deck_size`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            character_level: characterLevel,\n            wis_mod: wisMod,\n            int_mod: intMod,\n            cha_mod: chaMod\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setMaxDeckSize(data.max_deck_size);\n      } catch (err) {\n        setError('Failed to calculate deck size: ' + err.message);\n        console.error('Error calculating deck size:', err);\n      }\n    };\n\n    // Ensure all character stats are valid numbers before making the API call\n    if (!isNaN(characterLevel) && !isNaN(wisMod) && !isNaN(intMod) && !isNaN(chaMod)) {\n      calculateDeckSize();\n    }\n  }, [characterLevel, wisMod, intMod, chaMod]); // Dependencies: recalculate if any of these change\n\n  // --- Deck Building Logic: Add Card ---\n  const handleAddCardToDeck = card => {\n    // 1. Check if the deck is already full\n    if (selectedCards.length >= maxDeckSize) {\n      setError('Deck is full! Remove cards to add new ones.');\n      return;\n    }\n\n    // 2. Enforce the rule: deck must contain at least one Cantrip.\n    // If the deck is currently empty AND the card being added is NOT a Cantrip, prevent addition.\n    const cantripCountInDeck = selectedCards.filter(c => c.type === 'Cantrip').length;\n    if (card.type !== 'Cantrip' && cantripCountInDeck === 0 && selectedCards.length === 0) {\n      setError('Your deck must contain at least one Cantrip! Add a Cantrip first.');\n      return;\n    }\n\n    // Add the card to the deck. Assign a unique instance_id for tracking uses,\n    // and initialize current_uses from its default_uses_per_rest.\n    setSelectedCards(prev => [...prev, {\n      ...card,\n      instance_id: uuidv4(),\n      // Unique ID for this specific card instance in the deck\n      current_uses: card.default_uses_per_rest // Initialize current uses based on default\n    }]);\n    setError(''); // Clear any previous error message\n  };\n\n  // --- Deck Building Logic: Remove Card ---\n  const handleRemoveCardFromDeck = instance_id => {\n    const updatedDeck = selectedCards.filter(card => card.instance_id !== instance_id);\n    const cantripCount = updatedDeck.filter(c => c.type === 'Cantrip').length;\n\n    // Prevent removing the last cantrip if there are still other cards in the deck\n    if (cantripCount === 0 && updatedDeck.length > 0) {\n      setError('Your deck must contain at least one Cantrip! You cannot remove the last one.');\n      return;\n    }\n    setSelectedCards(updatedDeck);\n    setError(''); // Clear any previous error message\n  };\n\n  // --- Card Usage Logic: Mark Card as Used ---\n  const handleMarkCardUsed = async instance_id => {\n    const cardToUse = selectedCards.find(card => card.instance_id === instance_id);\n    if (!cardToUse) return; // Should not happen if UI is correct\n\n    if (cardToUse.current_uses > 0) {\n      // Optimistically update frontend state\n      setSelectedCards(prev => prev.map(card => card.instance_id === instance_id ? {\n        ...card,\n        current_uses: card.current_uses - 1\n      } : card));\n\n      // Notify backend about the card usage for logging purposes.\n      // This is where you demonstrate the client-server communication and backend logging.\n      try {\n        const response = await fetch(`${API_BASE_URL}/card_used`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            card_name: cardToUse.name,\n            card_type: cardToUse.type,\n            deck_card_id: cardToUse.instance_id // Send the unique instance ID\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Backend notification:', data.message);\n        console.log('Simulated System Log Entry from Backend:', data.log_entry);\n        // Check your Python terminal for the detailed log output!\n      } catch (err) {\n        setError('Failed to notify backend of card usage for logging: ' + err.message);\n        console.error('Error sending card used notification:', err);\n      }\n    } else {\n      setError(`\"${cardToUse.name}\" has no uses left! It needs a long rest.`);\n    }\n  };\n\n  // --- Card Usage Logic: Reset Card Uses (Long Rest) ---\n  const handleResetCardUses = instance_id => {\n    setSelectedCards(prev => prev.map(card => card.instance_id === instance_id ? {\n      ...card,\n      current_uses: card.default_uses_per_rest\n    } : card));\n    setError(''); // Clear any related error message\n  };\n\n  // --- Conditional Rendering for Loading/Error States ---\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: \"Loading cards...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 16\n    }, this);\n  }\n\n  // --- Main Component Render ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"Spell Trading Cards Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-stats-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"panel-title\",\n        children: \"Character Stats\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"charLevel\",\n          children: \"Level:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"charLevel\",\n          type: \"number\",\n          value: characterLevel,\n          onChange: e => setCharacterLevel(Math.max(1, parseInt(e.target.value) || 1)),\n          min: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"wisMod\",\n          children: \"WIS Mod:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"wisMod\",\n          type: \"number\",\n          value: wisMod,\n          onChange: e => setWisMod(parseInt(e.target.value) || 0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"intMod\",\n          children: \"INT Mod:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"intMod\",\n          type: \"number\",\n          value: intMod,\n          onChange: e => setIntMod(parseInt(e.target.value) || 0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"chaMod\",\n          children: \"CHA Mod:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"chaMod\",\n          type: \"number\",\n          value: chaMod,\n          onChange: e => setChaMod(parseInt(e.target.value) || 0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"deck-summary\",\n        children: [\"Max Deck Size: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"highlight\",\n          children: maxDeckSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 36\n        }, this), \" | Current Deck: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"highlight\",\n          children: selectedCards.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 101\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 27\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-collection-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"panel-title\",\n          children: \"Available Spells\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-list\",\n          children: allCards.map(card => {\n            var _card$name, _card$name$split$;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-item available-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: `https://placehold.co/100x150/a8dadc/ffffff?text=${((_card$name = card.name) === null || _card$name === void 0 ? void 0 : (_card$name$split$ = _card$name.split('.')[0]) === null || _card$name$split$ === void 0 ? void 0 : _card$name$split$.replace('_', '%20')) || 'Card'}`,\n                alt: card.name,\n                className: \"card-image\",\n                onError: e => {\n                  e.target.onerror = null;\n                  e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\";\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"card-name\",\n                children: [card.name, \" (\", card.type, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-description\",\n                children: card.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-meta\",\n                children: [\"Rarity: \", card.rarity]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleAddCardToDeck(card)\n                // Disable button if deck is full\n                ,\n                disabled: selectedCards.length >= maxDeckSize,\n                className: \"select-button\",\n                children: \"Add to Deck\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 33\n              }, this)]\n            }, card.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"built-deck-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"panel-title\",\n          children: [\"Your Deck (\", selectedCards.length, \"/\", maxDeckSize, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"deck-list\",\n          children: selectedCards.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"empty-message\",\n            children: \"Select cards from the left to build your deck!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 29\n          }, this) : selectedCards.map(card => {\n            var _card$name2, _card$name2$split$;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-item deck-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: `https://placehold.co/100x150/a8dadc/ffffff?text=${((_card$name2 = card.name) === null || _card$name2 === void 0 ? void 0 : (_card$name2$split$ = _card$name2.split('.')[4]) === null || _card$name2$split$ === void 0 ? void 0 : _card$name2$split$.replace('_', '%20')) || 'Card'}`,\n                alt: card.name,\n                className: \"card-image\",\n                onError: e => {\n                  e.target.onerror = null;\n                  e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\";\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"card-name\",\n                children: [card.name, \" (\", card.type, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-description\",\n                children: card.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-uses\",\n                children: [\"Uses Left: \", card.current_uses, \"/\", card.default_uses_per_rest]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-actions\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleMarkCardUsed(card.instance_id),\n                  disabled: card.current_uses <= 0 // Disable if no uses left\n                  ,\n                  className: \"use-button\",\n                  children: \"Use\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleResetCardUses(card.instance_id),\n                  className: \"reset-button\",\n                  children: \"Reset Uses\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleRemoveCardFromDeck(card.instance_id),\n                  className: \"remove-button\",\n                  children: \"Remove\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 285,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 37\n              }, this)]\n            }, card.instance_id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"LsqD0+saV+O6Qub+620uvPOrVHI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","v4","uuidv4","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","allCards","setAllCards","characterLevel","setCharacterLevel","wisMod","setWisMod","intMod","setIntMod","chaMod","setChaMod","maxDeckSize","setMaxDeckSize","selectedCards","setSelectedCards","error","setError","loading","setLoading","fetchAllCards","response","fetch","ok","Error","status","data","json","err","message","console","calculateDeckSize","method","headers","body","JSON","stringify","character_level","wis_mod","int_mod","cha_mod","max_deck_size","isNaN","handleAddCardToDeck","card","length","cantripCountInDeck","filter","c","type","prev","instance_id","current_uses","default_uses_per_rest","handleRemoveCardFromDeck","updatedDeck","cantripCount","handleMarkCardUsed","cardToUse","find","map","card_name","name","card_type","deck_card_id","log","log_entry","handleResetCardUses","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","value","onChange","e","Math","max","parseInt","target","min","_card$name","_card$name$split$","src","split","replace","alt","onError","onerror","description","rarity","onClick","disabled","_card$name2","_card$name2$split$","_c","$RefreshReg$"],"sources":["C:/Users/smith/OneDrive/Documents/New folder/Spell_Card_Game/dnd_spell_cards_app/frontend/src/App.js"],"sourcesContent":["// dnd-spell-cards-app/frontend/src/App.js\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport './App.css';\r\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid for unique keys for deck card instances\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000/api'; // Ensure this matches your Flask port\r\n\r\nfunction App() {\r\n    // --- State Variables ---\r\n    const [allCards, setAllCards] = useState([]); // All cards fetched from the backend\r\n    const [characterLevel, setCharacterLevel] = useState(1);\r\n    const [wisMod, setWisMod] = useState(0);\r\n    const [intMod, setIntMod] = useState(0);\r\n    const [chaMod, setChaMod] = useState(0);\r\n    const [maxDeckSize, setMaxDeckSize] = useState(0);\r\n    const [selectedCards, setSelectedCards] = useState([]); // Cards currently in the player's deck\r\n    const [error, setError] = useState(''); // General error messages for UI\r\n    const [loading, setLoading] = useState(true); // Loading state for initial data fetch\r\n\r\n    // --- Effect to Fetch All Cards from Backend on Component Mount ---\r\n    const fetchAllCards = useCallback(async () => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/cards`);\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            // Store the raw cards from the backend\r\n            setAllCards(data);\r\n            setLoading(false);\r\n        } catch (err) {\r\n            setError('Failed to fetch cards: ' + err.message);\r\n            setLoading(false);\r\n            console.error('Error fetching cards:', err);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchAllCards();\r\n    }, [fetchAllCards]);\r\n\r\n    // --- Effect to Calculate Max Deck Size when Character Stats Change ---\r\n    useEffect(() => {\r\n        const calculateDeckSize = async () => {\r\n            setError(''); // Clear previous errors related to deck size\r\n            try {\r\n                const response = await fetch(`${API_BASE_URL}/calculate_deck_size`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        character_level: characterLevel,\r\n                        wis_mod: wisMod,\r\n                        int_mod: intMod,\r\n                        cha_mod: chaMod,\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n                setMaxDeckSize(data.max_deck_size);\r\n            } catch (err) {\r\n                setError('Failed to calculate deck size: ' + err.message);\r\n                console.error('Error calculating deck size:', err);\r\n            }\r\n        };\r\n\r\n        // Ensure all character stats are valid numbers before making the API call\r\n        if (!isNaN(characterLevel) && !isNaN(wisMod) && !isNaN(intMod) && !isNaN(chaMod)) {\r\n            calculateDeckSize();\r\n        }\r\n    }, [characterLevel, wisMod, intMod, chaMod]); // Dependencies: recalculate if any of these change\r\n\r\n    // --- Deck Building Logic: Add Card ---\r\n    const handleAddCardToDeck = (card) => {\r\n        // 1. Check if the deck is already full\r\n        if (selectedCards.length >= maxDeckSize) {\r\n            setError('Deck is full! Remove cards to add new ones.');\r\n            return;\r\n        }\r\n\r\n        // 2. Enforce the rule: deck must contain at least one Cantrip.\r\n        // If the deck is currently empty AND the card being added is NOT a Cantrip, prevent addition.\r\n        const cantripCountInDeck = selectedCards.filter(c => c.type === 'Cantrip').length;\r\n        if (card.type !== 'Cantrip' && cantripCountInDeck === 0 && selectedCards.length === 0) {\r\n            setError('Your deck must contain at least one Cantrip! Add a Cantrip first.');\r\n            return;\r\n        }\r\n\r\n        // Add the card to the deck. Assign a unique instance_id for tracking uses,\r\n        // and initialize current_uses from its default_uses_per_rest.\r\n        setSelectedCards(prev => [...prev, {\r\n            ...card,\r\n            instance_id: uuidv4(), // Unique ID for this specific card instance in the deck\r\n            current_uses: card.default_uses_per_rest // Initialize current uses based on default\r\n        }]);\r\n        setError(''); // Clear any previous error message\r\n    };\r\n\r\n    // --- Deck Building Logic: Remove Card ---\r\n    const handleRemoveCardFromDeck = (instance_id) => {\r\n        const updatedDeck = selectedCards.filter(card => card.instance_id !== instance_id);\r\n        const cantripCount = updatedDeck.filter(c => c.type === 'Cantrip').length;\r\n\r\n        // Prevent removing the last cantrip if there are still other cards in the deck\r\n        if (cantripCount === 0 && updatedDeck.length > 0) {\r\n            setError('Your deck must contain at least one Cantrip! You cannot remove the last one.');\r\n            return;\r\n        }\r\n        setSelectedCards(updatedDeck);\r\n        setError(''); // Clear any previous error message\r\n    };\r\n\r\n    // --- Card Usage Logic: Mark Card as Used ---\r\n    const handleMarkCardUsed = async (instance_id) => {\r\n        const cardToUse = selectedCards.find(card => card.instance_id === instance_id);\r\n        if (!cardToUse) return; // Should not happen if UI is correct\r\n\r\n        if (cardToUse.current_uses > 0) {\r\n            // Optimistically update frontend state\r\n            setSelectedCards(prev =>\r\n                prev.map(card =>\r\n                    card.instance_id === instance_id ? { ...card, current_uses: card.current_uses - 1 } : card\r\n                )\r\n            );\r\n\r\n            // Notify backend about the card usage for logging purposes.\r\n            // This is where you demonstrate the client-server communication and backend logging.\r\n            try {\r\n                const response = await fetch(`${API_BASE_URL}/card_used`, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        card_name: cardToUse.name,\r\n                        card_type: cardToUse.type,\r\n                        deck_card_id: cardToUse.instance_id // Send the unique instance ID\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                const data = await response.json();\r\n                console.log('Backend notification:', data.message);\r\n                console.log('Simulated System Log Entry from Backend:', data.log_entry);\r\n                // Check your Python terminal for the detailed log output!\r\n            } catch (err) {\r\n                setError('Failed to notify backend of card usage for logging: ' + err.message);\r\n                console.error('Error sending card used notification:', err);\r\n            }\r\n        } else {\r\n            setError(`\"${cardToUse.name}\" has no uses left! It needs a long rest.`);\r\n        }\r\n    };\r\n\r\n    // --- Card Usage Logic: Reset Card Uses (Long Rest) ---\r\n    const handleResetCardUses = (instance_id) => {\r\n        setSelectedCards(prev =>\r\n            prev.map(card =>\r\n                card.instance_id === instance_id ? { ...card, current_uses: card.default_uses_per_rest } : card\r\n            )\r\n        );\r\n        setError(''); // Clear any related error message\r\n    };\r\n\r\n    // --- Conditional Rendering for Loading/Error States ---\r\n    if (loading) {\r\n        return <div className=\"app-container\">Loading cards...</div>;\r\n    }\r\n\r\n    // --- Main Component Render ---\r\n    return (\r\n        <div className=\"app-container\">\r\n            <h1 className=\"app-title\">Spell Trading Cards Manager</h1>\r\n\r\n            {/* Character Stats Input Panel */}\r\n            <div className=\"character-stats-panel\">\r\n                <h2 className=\"panel-title\">Character Stats</h2>\r\n                <div className=\"input-group\">\r\n                    <label htmlFor=\"charLevel\">Level:</label>\r\n                    <input\r\n                        id=\"charLevel\"\r\n                        type=\"number\"\r\n                        value={characterLevel}\r\n                        onChange={(e) => setCharacterLevel(Math.max(1, parseInt(e.target.value) || 1))}\r\n                        min=\"1\"\r\n                    />\r\n                </div>\r\n                <div className=\"input-group\">\r\n                    <label htmlFor=\"wisMod\">WIS Mod:</label>\r\n                    <input\r\n                        id=\"wisMod\"\r\n                        type=\"number\"\r\n                        value={wisMod}\r\n                        onChange={(e) => setWisMod(parseInt(e.target.value) || 0)}\r\n                    />\r\n                </div>\r\n                <div className=\"input-group\">\r\n                    <label htmlFor=\"intMod\">INT Mod:</label>\r\n                    <input\r\n                        id=\"intMod\"\r\n                        type=\"number\"\r\n                        value={intMod}\r\n                        onChange={(e) => setIntMod(parseInt(e.target.value) || 0)}\r\n                    />\r\n                </div>\r\n                <div className=\"input-group\">\r\n                    <label htmlFor=\"chaMod\">CHA Mod:</label>\r\n                    <input\r\n                        id=\"chaMod\"\r\n                        type=\"number\"\r\n                        value={chaMod}\r\n                        onChange={(e) => setChaMod(parseInt(e.target.value) || 0)}\r\n                    />\r\n                </div>\r\n                <div className=\"deck-summary\">\r\n                    Max Deck Size: <span className=\"highlight\">{maxDeckSize}</span> | Current Deck: <span className=\"highlight\">{selectedCards.length}</span>\r\n                </div>\r\n                {error && <div className=\"error-message\">{error}</div>} {/* Display general errors here */}\r\n            </div>\r\n\r\n            <div className=\"main-content\">\r\n                {/* Available Cards Section */}\r\n                <div className=\"card-collection-panel\">\r\n                    <h2 className=\"panel-title\">Available Spells</h2>\r\n                    <div className=\"card-list\">\r\n                        {allCards.map((card) => (\r\n                            <div key={card.id} className=\"card-item available-card\">\r\n                                {/* FIXED: More robust image source with optional chaining and fallback */}\r\n                                <img\r\n                                    src={`https://placehold.co/100x150/a8dadc/ffffff?text=${card.name?.split('.')[0]?.replace('_', '%20') || 'Card'}`}\r\n                                    alt={card.name}\r\n                                    className=\"card-image\"\r\n                                    onError={(e) => { e.target.onerror = null; e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\"; }}\r\n                                />\r\n                                <h3 className=\"card-name\">{card.name} ({card.type})</h3>\r\n                                <p className=\"card-description\">{card.description}</p>\r\n                                <p className=\"card-meta\">Rarity: {card.rarity}</p>\r\n                                <button\r\n                                    onClick={() => handleAddCardToDeck(card)}\r\n                                    // Disable button if deck is full\r\n                                    disabled={selectedCards.length >= maxDeckSize}\r\n                                    className=\"select-button\"\r\n                                >\r\n                                    Add to Deck\r\n                                </button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Built Deck Section */}\r\n                <div className=\"built-deck-panel\">\r\n                    <h2 className=\"panel-title\">Your Deck ({selectedCards.length}/{maxDeckSize})</h2>\r\n                    <div className=\"deck-list\">\r\n                        {selectedCards.length === 0 ? (\r\n                            <p className=\"empty-message\">Select cards from the left to build your deck!</p>\r\n                        ) : (\r\n                            selectedCards.map((card) => (\r\n                                <div key={card.instance_id} className=\"card-item deck-card\">\r\n                                    {/* FIXED: More robust image source with optional chaining and fallback */}\r\n                                    <img\r\n                                        src={`https://placehold.co/100x150/a8dadc/ffffff?text=${card.name?.split('.')[4]?.replace('_', '%20') || 'Card'}`}\r\n                                        alt={card.name}\r\n                                        className=\"card-image\"\r\n                                        onError={(e) => { e.target.onerror = null; e.target.src = \"https://placehold.co/100x150/cccccc/333333?text=Image%20Error\"; }}\r\n                                    />\r\n                                    <h3 className=\"card-name\">{card.name} ({card.type})</h3>\r\n                                    <p className=\"card-description\">{card.description}</p>\r\n                                    <p className=\"card-uses\">Uses Left: {card.current_uses}/{card.default_uses_per_rest}</p>\r\n                                    <div className=\"card-actions\">\r\n                                        <button\r\n                                            onClick={() => handleMarkCardUsed(card.instance_id)}\r\n                                            disabled={card.current_uses <= 0} // Disable if no uses left\r\n                                            className=\"use-button\"\r\n                                        >\r\n                                            Use\r\n                                        </button>\r\n                                        <button\r\n                                            onClick={() => handleResetCardUses(card.instance_id)}\r\n                                            className=\"reset-button\"\r\n                                        >\r\n                                            Reset Uses\r\n                                        </button>\r\n                                        <button\r\n                                            onClick={() => handleRemoveCardFromDeck(card.instance_id)}\r\n                                            className=\"remove-button\"\r\n                                        >\r\n                                            Remove\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}